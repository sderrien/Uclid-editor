/*
 * generated by Xtext 2.22.0
 */
package uclid.xtext.scoping

import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import java.util.List
import uclid.xtext.uclid.AssignmentRule
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider
import org.eclipse.xtext.EcoreUtil2
import uclid.xtext.uclid.VarDecl
import java.util.Iterator
import uclid.xtext.uclid.SynonymTypeRule
import uclid.xtext.uclid.TypeDecl
import uclid.xtext.uclid.Assignment
import org.eclipse.xtext.resource.EObjectDescription
import javax.inject.Scope
import org.eclipse.xtext.scoping.impl.SimpleScope
import uclid.xtext.uclid.Lhs
import uclid.xtext.uclid.Module
import java.sql.CallableStatement
import uclid.xtext.uclid.ProcedureDecl
import uclid.xtext.uclid.CallStatement
import java.util.Set
import uclid.xtext.uclid.VarRef
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.naming.QualifiedName

import uclid.xtext.uclid.InstanceDecl

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class UclidScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
 
	def getModule(EObject e) {
		EcoreUtil2.getContainerOfType(e, Module)
	}

	def getLocalVarsDecl(Module module) {
		val allLocalDecls = module.eAllContents.filter(VarDecl).toSet
		allLocalDecls.map[it->QualifiedName.create(it.name)]
	}
	
	def getInstanceLocalVarsDecl(InstanceDecl instance) {
		val allLocalDecls = instance.module.eAllContents.filter(VarDecl).toSet
		allLocalDecls.map[it->QualifiedName.create(#[instance.name,it.name])]
	}
	
	def getVarsInScope(EObject e) {
		val module = EcoreUtil2.getContainerOfType(e, Module)
		val allLocalDecls = module.eAllContents.filter(VarDecl).toSet
        val allInstanceDecls = module.eAllContents.filter(InstanceDecl).toSet
 
		allInstanceDecls.map[instanceLocalVarsDecl].flatten.toSet
		
    	val root = EcoreUtil2.getRootContainer(e)
		val allDecls = root.eAllContents.filter(VarDecl).toSet
		
		val res= 
			(allLocalDecls.map[it->QualifiedName.create(it.name)]
			+
			allDecls.map[it->
				{
					val qname = QualifiedName.create(#[it.module.name,it.name])
					//println(qname)
					qname
				}
			]).toSet
			+
			allInstanceDecls.map[instanceLocalVarsDecl].flatten.toSet
		
		//println(res)
		
		res
	}
	
	def getModuleInScope(EObject e) {
		val root = EcoreUtil2.getRootContainer(e)
		val allDecls = root.eAllContents.filter(Module).toSet
		
		val res= 
			allDecls.map[it->
				{
					val qname = QualifiedName.create(#[it.module.name])
					//
					qname
				}
			].toSet
		res
	}
	def getProcsInScope(EObject e) {
		val module = EcoreUtil2.getContainerOfType(e, Module)
		val allLocalDecls = module.eAllContents.filter(ProcedureDecl).toSet
        	
		val root = EcoreUtil2.getRootContainer(e)
		val allDecls = root.eAllContents.filter(ProcedureDecl).toSet
		
		val res= 
			(allLocalDecls.map[it->QualifiedName.create(it.name)]
			+
			allDecls.map[it->
				{
					val qname = QualifiedName.create(#[it.module.name,it.name])
					//println(qname)
					qname
				}
			]).toSet
		res
	}

    def dispatch IScope getScope(VarRef context, EReference reference) {
        // We want to define the Scope for the Element's superElement cross-reference
        if (reference.name=="var") {
        	val allQNames = context.varsInScope 
        	var objdesr = allQNames.map[new EObjectDescription(it.value, it.key, null)].toSet;
//        	println("refs:");
//        	println(allQNames.map[toString].reduce[p1, p2|p1+"\n"+p2])
//        	println("end ref")
        	return new SimpleScope(IScope.NULLSCOPE,objdesr as Iterable);
        }
        return  IScope.NULLSCOPE
    }
   
    def dispatch IScope getScope(InstanceDecl context, EReference reference) {
        // We want to define the Scope for the Element's superElement cross-reference
        val root = EcoreUtil2.getRootContainer(context)
        if (reference.name=="module" && root!==null) {
        	val Set<Module> allDecls = root.eAllContents.filter(Module).toSet 
        	var 
        	objdesr = allDecls.map[
        		val label =it.name
        		val qname = qualifiedNameConverter.toQualifiedName(label)
        		new EObjectDescription(qname, it, null)
        	].toSet;
        	return new SimpleScope(IScope.NULLSCOPE,objdesr as Iterable);
        }  
        return  IScope.NULLSCOPE
    }

    def dispatch IScope getScope(CallStatement context, EReference reference) {
        // We want to define the Scope for the Element's superElement cross-reference
        if (reference.name=="var") {
        	val allQNames = context.procsInScope 
        	var objdesr = allQNames.map[new EObjectDescription(it.value, it.key, null)].toSet;
//        	println("refs:");
//        	println(allQNames.map[toString].reduce[p1, p2|p1+"\n"+p2])
//        	println("end ref")
        	return new SimpleScope(IScope.NULLSCOPE,objdesr as Iterable);
        }
        return  IScope.NULLSCOPE
    }
  
  	/**
	 * Find the first object which is an instance of a subtype of <code>c</code>
	 * in the eContainer chain. Returns null if none is found.
	 * 
	 * @param current
	 * @param eclass
	 * @return
	 */
	def static <T extends EObject> T eContainerTypeSelect(EObject _current, Class<T> c) {
		var current = _current;
		while (current !== null) {
			if (c.isInstance(current)) {
				
				val T current2 = current as T ;
				return current2;
			}
			current = current.eContainer();
		}
		return null;
	}
  
   def dispatch IScope getScope(SynonymTypeRule context, EReference reference) {
        // We want to define the Scope for the Element's superElement cross-reference
        val root = EcoreUtil2.getRootContainer(context)
        if (reference.name=="decl" && root!==null) {
        	val Set<TypeDecl> allDecls = root.eAllContents.filter(TypeDecl).toSet 
        	var 
        	objdesr = allDecls.map[
        		val label =it.name
        		val qname = qualifiedNameConverter.toQualifiedName(label)
        		new EObjectDescription(qname, it, null)
        	].toSet;

        	val module = eContainerTypeSelect(context, Module)
        	objdesr+=module.d.filter(TypeDecl).map[
        		val label =it.name
        		new EObjectDescription(QualifiedName.create(#[label]), it, null)
        	]
			
        	return new SimpleScope(IScope.NULLSCOPE,objdesr as Iterable);
        }  
        
        return  IScope.NULLSCOPE
    }
 

}

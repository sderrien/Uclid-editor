grammar uclid.xtext.Uclid with org.eclipse.xtext.common.Terminals

generate uclid "http://www.xtext.uclid/Uclid"


ModelRule : {TopLevel} 
	rules+=ModuleRule*
;

FQN: ID ("." ID)*;

@Override
terminal STRING:
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

ModuleRule : {Module} 'module' name=ID '{' d+=DeclRule* e=ControlBlockRule? '}';

DeclRule : 	TypeDeclRule 
		|	InputsDeclRule 
		|	OutputsDeclRule 
		|	VarsDeclRule 
		|	SharedVarsDeclRule 
		|	DefineDeclRule 
		|	ConstsDeclRule 
		|	FunctionDecl 
		|	ProcedureDecl
		|	InstanceDeclRule 
		|	InitDeclRule 
		|	NextDeclRule 
		|	AxiomDeclRule 
		|	SpecDeclRule ;

TypeDeclRule returns TypeDecl : 'type' (name=ID|'*')  '=' t=TypeRule ';'
			|'type' name=ID  ';';

InputsDeclRule :  'input' inputs+=InputDecl (',' inputs+=InputDecl)* ':'t=TypeRule ';';
OutputsDeclRule :  'output' outputs+=OutputDecl (',' outputs+=OutputDecl)* ':'t=TypeRule ';';


TypedObjectDecl : VarDecl | InputDecl | OutputDecl | FuncDecl | ConstDecl;

InputDecl : name=ID;

OutputDecl: name=ID;

VarDecl : name=ID;

FuncDecl : name=ID;

VarsDeclRule :  'var' (vars+=VarDecl  (',' vars+=VarDecl)*) ':' t=TypeRule ';';
ConstsDeclRule :  'const' constants+=ConstDecl (',' constants+=ConstDecl)* ':'t=TypeRule ('=' INT )?';';
 
ConstDecl : 
	name =ID
;

SharedVarsDeclRule :  'sharedvar' (vars+=VarDecl (',' vars+=VarDecl)*) ':'t=TypeRule ';';

ArgList:
	(
		(    args+=VarDecl  (',' args+=VarDecl)* ':' t=TypeRule ) 
		(',' args+=VarDecl  (',' args+=VarDecl)* ':' t=TypeRule )*
	)?;

DefineDeclRule returns FuncDecl:  'define' name=ID  '(' inputs=ArgList ')' ':' t=TypeRule '='e=ExprRule  ';';

FunctionDecl returns FuncDecl: 
	{FunctionDecl} ('synthesis'?) 'function' name=ID  '(' inputs=ArgList  ')' ':'t=TypeRule ';';

ProcedureDecl returns FuncDecl:  
	{ProcedureDecl} 'procedure' name=ID  '(' inputs=ArgList  ')' 
					ret=ProcReturnArgRule?
					(req+=RequireExprsRule)* 
					(ensure+=EnsureExprsRule)* 
					(modifies+=ModifiesExprsRule)*
					body=BlkStmtRule;

ProcReturnArgRule :  'returns' '(' output=ArgList ? ')';

RequireExprsRule :  ( 'requires' e=ExprRule  ';' );

EnsureExprsRule :  ( 'ensures' e=ExprRule  ';' );

ModifiesExprsRule :  ( 'modifies' l=IdListRule ';' );

InstanceDeclRule returns InstanceDecl:  'instance' name=ID  ':' module=[Module|FQN] args+=ArgMapListRule ';';

ArgMapListRule : 
{ArgMapListRule}'(' ((arg+=ArgMapRule (',' arg+=ArgMapRule)*) )?')';

ArgMapRule : {ArgMapRule} name=ID  ':' '(' (e+=ExprRule)?  ')';


AxiomDeclRule : ('axiom' | 'assume') (n=ID  ':')? e=ExprRule  ';';




SpecDeclRule : PropertyRule | InvariantRule; 

PropertyRule :	
	'property' ('[' ('LTL'|'CTL') ']' )? (name=ID ':')? e=ExprRule  ';' ;
	
InvariantRule:	
	'invariant'  ('[' ('LTL'|'CTL') ']' )? (name=ID ':')? e=ExprRule  ';' ;

InitDeclRule :  'init' body=BlkStmtRule;

NextDeclRule :  'next' body=BlkStmtRule;

StatementRule returns Statement:  
			(({StatementRule}'skip' ';')
			|('assert' d=ExprRule ';')
			|('assume'd=ExprRule ';')
			|('havoc' name=ID ';')
			|(AssignmentRule ';')
			|(CallStatement ';')
			|('next' '('name=ID ')'';')
			|(s=IfStmtRule (';'?))
			|(s=CaseStmtRule (';'?))
			|(s=ForLoopRule (';'?))
			|(s=WhileLoopRule (';'?))
			|(s=BlkStmtRule (';'?))
				);
CallStatement :
	{CallStatement}
	('call' ('(' (lhs+=VarReference (',' lhs+=VarReference)*)? ')' '=')? target=FunctionReference ('(' (exprs+=ExprRule (',' exprs+=ExprRule)* )?)? ')');
	
	

AssignmentRule :
	{Assignment} (lhs += VarReference (',' lhs+= VarReference*)?) '='  exprs+=ExprRule (',' exprs+=ExprRule)*;
	

BlkStmtRule returns CompoundStatement:  '{' {CompoundStatement} dec+=VarsDeclRule* stmt+=StatementRule*  '}';


IfStmtRule 	:  'if' '('c=ExprRule')' then=BlkStmtRule ('else' else=BlkStmtRule)?;


CaseStmtRule:  {CaseStmtRule}'case' cases+=(CaseBlockRule|DefaultCaseBlockRule)* 'esac';

DefaultCaseBlockRule : 
	'default' ':'body=BlkStmtRule;

CaseBlockRule : 
	e=ExprRule  ':' body=BlkStmtRule;


ForLoopRule:  'for' iterator=VarDecl 'in' 'range' '(' lb=ConstRule  ',' ub=ConstRule')' body=BlkStmtRule;

WhileLoopRule :  'while' '('c=ExprRule  ')' inv+=SpecDeclRule* stmt=BlkStmtRule;


ExprRule : E1Rule ;

E1Rule : E2Rule 
	| (pred=('forall'|'exists') '(' existential=ArgList')' '::' a=E1Rule )
	| (pred=('const') '(' existential=ExprListRule')' )
;
E2Rule : z+=E3Rule  (op=LOGEQU q+=(E2Rule|E3Rule))* ;

E3Rule : e+=E4Rule  (op=LOGIMPLY e+=(E3Rule|E4Rule))* ;

E4Rule : 	(e+=E5Rule '&&' e+=E4Rule) |
			(e+=E5Rule '||' e+=E4Rule) |
			(e+=E5Rule '&' e+=E4Rule)  |
			(e+=E5Rule '|' e+=E4Rule)  |
			(e+=E5Rule '^' e+=E4Rule)  |
			e+=E5Rule ;

E5Rule : e+=E6Rule (op=REL_OP_RULE e+=E6Rule)* ;

terminal LOGEQU:  '<==>' ;

terminal LOGIMPLY:   '==>' ;

terminal REL_OP_RULE :  ('<' | '>' | '==' | '!=' | '<=' | '>=');


E6Rule : e+=E7Rule ('++' e+=E6Rule)* ;

E7Rule : e+=E8Rule  ('+' e+=E7Rule )*;

E8Rule : e+=E9Rule  ('-' e+=E9Rule)* ;

E9Rule : e+=E10Rule  ('*'  e+=E10Rule )*;

E10Rule : (op=('-' | '!' | '~') e=E11Rule) | e=E11Rule ;


E11Rule :  E12Rule ('[' l+=ExprListRule (('->'e+=ExprRule)|(':'e+=ExprRule)) ?']') ?;


E12Rule : j=E13Rule  
	(
		'(' (v=ExprListRule)? ')'
	)?;


RHSVarRef returns VarReference : 
	FQN
//	({VarReference}(var=[TypedObjectDecl|FQN] prime='\''?)) 
	;

FunctionReference : 
	FQN
//	({FunctionReference }(target=[FuncDecl|FQN])) 
	;

TypeReference returns Type: 
	//{TypeReference} decl=[TypeDecl|FQN]
	decl=FQN
;
VarReference:  
	//var=[TypedObjectDecl|FQN]
	FQN 
	('['  index+=ExprRule (',' index+=ExprRule )*  ']')? ("'"  )?  
	;
	
E13Rule : 	ConstRule 
		  | RHSVarRef
		  | FunctionReference
		  | EnumRef
		  | TupleExpr
		  | IfPrimaryExpr
		  | ParenthesisExpr; 


EnumRef : 
	_enum=[EnumValue|FQN]
;	

TupleExpr : 
	'{'e+=ExprRule  (','e+=ExprRule )* '}'
;

IfPrimaryExpr :
	'if' '('c=ExprRule  ')' 'then' e+=ExprRule  'else' e+=ExprRule
; 

ParenthesisExpr:
	'(' ExprRule ')'
;
ConstRule : v= 'false' | v='true' |(d=INT(w=BV?))  |v=STRING;

TypeRule returns Type: 
	 PrimitiveTypeRule
		|EnumTypeRule
		|TupleTypeRule 
		|RecordTypeRule
		|ArrayTypeRule
		|TypeReference;
		//|ExternalTypeRule;

PrimitiveTypeRule returns Type:   t=('boolean' | 'integer' | BV);

terminal BV : ('bv'INT);

EnumTypeRule returns Type:  {EnumTypeRule} 'enum' '{' enums+=EnumValue (',' enums+=EnumValue)* '}';

EnumValue returns VarDecl: 
	{EnumValue} name=ID
;

TupleTypeRule returns Type: {TupleTypeRule} '{'tuple+=TypeRule (',' tuple+=TypeRule)* '}';



RecordTypeRule returns Type: {RecordTypeRule} 'record' '{' 
	(
		(    fields+=VarDecl  (',' fields+=VarDecl)* ':' type=TypeRule ) 
		(',' fields+=VarDecl  (',' fields+=VarDecl)* ':' type=TypeRule )*
	)?
	'}'	
;

ArrayTypeRule returns Type: {ArrayTypeRule} '['b+=TypeRule (',' b+=TypeRule)* ']' base+=TypeRule;




ControlBlockRule : {ControlBlockRule} 'control' '{' cmd+=CmdRule * '}';

CmdRule :  (lhs=VarDecl '=')? (ID '.')? c=CmdNameRule  ('[' lid=IdListRule ']')? ('(' lex=ExprListRule ? ')')? ';';

CmdNameRule :  'bmc'
			| 'check'
			| 'clear_context'
			| 'induction'
			| 'print'
			| 'print_cex'
			| 'print_module'
			| 'print_results'
			| 'print_smt2' 
			| 'synthesize_invariant'
			| 'unroll'
			| 'verify';

IdListRule 	:  name+=ID |	name+=ID  ',' l=IdListRule;

//IdTypeListRule : k+=ID  (',' z+=ID )* ':' t=TypeRule (',' l=IdTypeListRule)?;

ExprListRule :{ExprListRule} exprs+=ExprRule (',' exprs+=ExprRule)*;


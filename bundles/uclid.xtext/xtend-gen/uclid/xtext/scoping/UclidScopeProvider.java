/**
 * generated by Xtext 2.22.0
 */
package uclid.xtext.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import java.util.Arrays;
import java.util.Collections;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Pair;
import uclid.xtext.uclid.InstanceDecl;
import uclid.xtext.uclid.TypedObjectDecl;
import uclid.xtext.uclid.VarDecl;
import uclid.xtext.uclid.VarReference;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class UclidScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
  public uclid.xtext.uclid.Module getModule(final EObject e) {
    return EcoreUtil2.<uclid.xtext.uclid.Module>getContainerOfType(e, uclid.xtext.uclid.Module.class);
  }
  
  public Iterable<Pair<TypedObjectDecl, QualifiedName>> getLocalVarsDecl(final uclid.xtext.uclid.Module module) {
    Iterable<Pair<TypedObjectDecl, QualifiedName>> _xblockexpression = null;
    {
      final Set<TypedObjectDecl> allLocalDecls = IteratorExtensions.<TypedObjectDecl>toSet(Iterators.<TypedObjectDecl>filter(module.eAllContents(), TypedObjectDecl.class));
      final Function1<TypedObjectDecl, Pair<TypedObjectDecl, QualifiedName>> _function = (TypedObjectDecl it) -> {
        QualifiedName _create = QualifiedName.create(it.getName());
        return Pair.<TypedObjectDecl, QualifiedName>of(it, _create);
      };
      _xblockexpression = IterableExtensions.<TypedObjectDecl, Pair<TypedObjectDecl, QualifiedName>>map(allLocalDecls, _function);
    }
    return _xblockexpression;
  }
  
  public Iterable<Pair<TypedObjectDecl, QualifiedName>> getInstanceLocalVarsDecl(final InstanceDecl instance) {
    Iterable<Pair<TypedObjectDecl, QualifiedName>> _xblockexpression = null;
    {
      final Set<TypedObjectDecl> allLocalDecls = IteratorExtensions.<TypedObjectDecl>toSet(Iterators.<TypedObjectDecl>filter(instance.getModule().eAllContents(), TypedObjectDecl.class));
      final Function1<TypedObjectDecl, Pair<TypedObjectDecl, QualifiedName>> _function = (TypedObjectDecl it) -> {
        String _name = instance.getName();
        String _name_1 = it.getName();
        QualifiedName _create = QualifiedName.create(Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(_name, _name_1)));
        return Pair.<TypedObjectDecl, QualifiedName>of(it, _create);
      };
      _xblockexpression = IterableExtensions.<TypedObjectDecl, Pair<TypedObjectDecl, QualifiedName>>map(allLocalDecls, _function);
    }
    return _xblockexpression;
  }
  
  public Iterable<Pair<? extends TypedObjectDecl, QualifiedName>> getVarsInScope(final EObject e) {
    Iterable<Pair<? extends TypedObjectDecl, QualifiedName>> _xblockexpression = null;
    {
      final uclid.xtext.uclid.Module module = EcoreUtil2.<uclid.xtext.uclid.Module>getContainerOfType(e, uclid.xtext.uclid.Module.class);
      final Set<TypedObjectDecl> allLocalDecls = IteratorExtensions.<TypedObjectDecl>toSet(Iterators.<TypedObjectDecl>filter(module.eAllContents(), TypedObjectDecl.class));
      final Set<InstanceDecl> allInstanceDecls = IteratorExtensions.<InstanceDecl>toSet(Iterators.<InstanceDecl>filter(module.eAllContents(), InstanceDecl.class));
      final Function1<InstanceDecl, Iterable<Pair<TypedObjectDecl, QualifiedName>>> _function = (InstanceDecl it) -> {
        return this.getInstanceLocalVarsDecl(it);
      };
      IterableExtensions.<Pair<TypedObjectDecl, QualifiedName>>toSet(Iterables.<Pair<TypedObjectDecl, QualifiedName>>concat(IterableExtensions.<InstanceDecl, Iterable<Pair<TypedObjectDecl, QualifiedName>>>map(allInstanceDecls, _function)));
      final EObject root = EcoreUtil2.getRootContainer(e);
      final Set<VarDecl> allDecls = IteratorExtensions.<VarDecl>toSet(Iterators.<VarDecl>filter(root.eAllContents(), VarDecl.class));
      final Function1<TypedObjectDecl, Pair<TypedObjectDecl, QualifiedName>> _function_1 = (TypedObjectDecl it) -> {
        QualifiedName _create = QualifiedName.create(it.getName());
        return Pair.<TypedObjectDecl, QualifiedName>of(it, _create);
      };
      Iterable<Pair<TypedObjectDecl, QualifiedName>> _map = IterableExtensions.<TypedObjectDecl, Pair<TypedObjectDecl, QualifiedName>>map(allLocalDecls, _function_1);
      final Function1<VarDecl, Pair<VarDecl, QualifiedName>> _function_2 = (VarDecl it) -> {
        QualifiedName _xblockexpression_1 = null;
        {
          String _name = this.getModule(it).getName();
          String _name_1 = it.getName();
          final QualifiedName qname = QualifiedName.create(Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(_name, _name_1)));
          _xblockexpression_1 = qname;
        }
        return Pair.<VarDecl, QualifiedName>of(it, _xblockexpression_1);
      };
      Iterable<Pair<VarDecl, QualifiedName>> _map_1 = IterableExtensions.<VarDecl, Pair<VarDecl, QualifiedName>>map(allDecls, _function_2);
      Set<Pair<? extends TypedObjectDecl, QualifiedName>> _set = IterableExtensions.<Pair<? extends TypedObjectDecl, QualifiedName>>toSet(Iterables.<Pair<? extends TypedObjectDecl, QualifiedName>>concat(_map, _map_1));
      final Function1<InstanceDecl, Iterable<Pair<TypedObjectDecl, QualifiedName>>> _function_3 = (InstanceDecl it) -> {
        return this.getInstanceLocalVarsDecl(it);
      };
      Set<Pair<TypedObjectDecl, QualifiedName>> _set_1 = IterableExtensions.<Pair<TypedObjectDecl, QualifiedName>>toSet(Iterables.<Pair<TypedObjectDecl, QualifiedName>>concat(IterableExtensions.<InstanceDecl, Iterable<Pair<TypedObjectDecl, QualifiedName>>>map(allInstanceDecls, _function_3)));
      final Iterable<Pair<? extends TypedObjectDecl, QualifiedName>> res = Iterables.<Pair<? extends TypedObjectDecl, QualifiedName>>concat(_set, _set_1);
      _xblockexpression = res;
    }
    return _xblockexpression;
  }
  
  public Set<Pair<uclid.xtext.uclid.Module, QualifiedName>> getModuleInScope(final EObject e) {
    Set<Pair<uclid.xtext.uclid.Module, QualifiedName>> _xblockexpression = null;
    {
      final EObject root = EcoreUtil2.getRootContainer(e);
      final Set<uclid.xtext.uclid.Module> allDecls = IteratorExtensions.<uclid.xtext.uclid.Module>toSet(Iterators.<uclid.xtext.uclid.Module>filter(root.eAllContents(), uclid.xtext.uclid.Module.class));
      final Function1<uclid.xtext.uclid.Module, Pair<uclid.xtext.uclid.Module, QualifiedName>> _function = (uclid.xtext.uclid.Module it) -> {
        QualifiedName _xblockexpression_1 = null;
        {
          String _name = this.getModule(it).getName();
          final QualifiedName qname = QualifiedName.create(Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(_name)));
          _xblockexpression_1 = qname;
        }
        return Pair.<uclid.xtext.uclid.Module, QualifiedName>of(it, _xblockexpression_1);
      };
      final Set<Pair<uclid.xtext.uclid.Module, QualifiedName>> res = IterableExtensions.<Pair<uclid.xtext.uclid.Module, QualifiedName>>toSet(IterableExtensions.<uclid.xtext.uclid.Module, Pair<uclid.xtext.uclid.Module, QualifiedName>>map(allDecls, _function));
      _xblockexpression = res;
    }
    return _xblockexpression;
  }
  
  protected IScope _getScope(final EObject context, final EReference reference) {
    String _name = reference.getName();
    boolean _equals = Objects.equal(_name, "var");
    if (_equals) {
      final Iterable<Pair<? extends TypedObjectDecl, QualifiedName>> allQNames = this.getVarsInScope(context);
      final Function1<Pair<? extends TypedObjectDecl, QualifiedName>, EObjectDescription> _function = (Pair<? extends TypedObjectDecl, QualifiedName> it) -> {
        QualifiedName _value = it.getValue();
        TypedObjectDecl _key = it.getKey();
        return new EObjectDescription(_value, _key, null);
      };
      Set<EObjectDescription> objdesr = IterableExtensions.<EObjectDescription>toSet(IterableExtensions.<Pair<? extends TypedObjectDecl, QualifiedName>, EObjectDescription>map(allQNames, _function));
      return new SimpleScope(IScope.NULLSCOPE, ((Iterable) objdesr));
    }
    return IScope.NULLSCOPE;
  }
  
  protected IScope _getScope(final VarReference context, final EReference reference) {
    String _name = reference.getName();
    boolean _equals = Objects.equal(_name, "var");
    if (_equals) {
      final Iterable<Pair<? extends TypedObjectDecl, QualifiedName>> allQNames = this.getVarsInScope(context);
      final Function1<Pair<? extends TypedObjectDecl, QualifiedName>, EObjectDescription> _function = (Pair<? extends TypedObjectDecl, QualifiedName> it) -> {
        QualifiedName _value = it.getValue();
        TypedObjectDecl _key = it.getKey();
        return new EObjectDescription(_value, _key, null);
      };
      Set<EObjectDescription> objdesr = IterableExtensions.<EObjectDescription>toSet(IterableExtensions.<Pair<? extends TypedObjectDecl, QualifiedName>, EObjectDescription>map(allQNames, _function));
      return new SimpleScope(IScope.NULLSCOPE, ((Iterable) objdesr));
    }
    return IScope.NULLSCOPE;
  }
  
  protected IScope _getScope(final InstanceDecl context, final EReference reference) {
    final EObject root = EcoreUtil2.getRootContainer(context);
    if ((Objects.equal(reference.getName(), "module") && (root != null))) {
      final Set<uclid.xtext.uclid.Module> allDecls = IteratorExtensions.<uclid.xtext.uclid.Module>toSet(Iterators.<uclid.xtext.uclid.Module>filter(root.eAllContents(), uclid.xtext.uclid.Module.class));
      final Function1<uclid.xtext.uclid.Module, EObjectDescription> _function = (uclid.xtext.uclid.Module it) -> {
        EObjectDescription _xblockexpression = null;
        {
          final String label = it.getName();
          final QualifiedName qname = this.getQualifiedNameConverter().toQualifiedName(label);
          _xblockexpression = new EObjectDescription(qname, it, null);
        }
        return _xblockexpression;
      };
      Set<EObjectDescription> objdesr = IterableExtensions.<EObjectDescription>toSet(IterableExtensions.<uclid.xtext.uclid.Module, EObjectDescription>map(allDecls, _function));
      return new SimpleScope(IScope.NULLSCOPE, ((Iterable) objdesr));
    }
    return IScope.NULLSCOPE;
  }
  
  /**
   * Find the first object which is an instance of a subtype of <code>c</code>
   * in the eContainer chain. Returns null if none is found.
   * 
   * @param current
   * @param eclass
   * @return
   */
  public static <T extends EObject> T eContainerTypeSelect(final EObject _current, final Class<T> c) {
    EObject current = _current;
    while ((current != null)) {
      {
        boolean _isInstance = c.isInstance(current);
        if (_isInstance) {
          return ((T) current);
        }
        current = current.eContainer();
      }
    }
    return null;
  }
  
  public IScope getScope(final EObject context, final EReference reference) {
    if (context instanceof InstanceDecl) {
      return _getScope((InstanceDecl)context, reference);
    } else if (context instanceof VarReference) {
      return _getScope((VarReference)context, reference);
    } else if (context != null) {
      return _getScope(context, reference);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(context, reference).toString());
    }
  }
}

grammar uclid.xtext.Uclid with org.eclipse.xtext.common.Terminals

generate uclid "http://www.xtext.uclid/Uclid"


ModelRule : {TopLevel} 
	rules+=ModuleRule*
;

FQN: ID ("." ID)*;

@Override
terminal STRING:
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

ModuleRule : {Module} 'module' name=ID '{' d+=DeclRule* e=ControlBlockRule? '}';

DeclRule : 	TypeDeclRule 
		|	InputsDeclRule 
		|	OutputsDeclRule 
		|	VarsDeclRule 
		|	SharedVarsDeclRule 
		|	DefineDeclRule 
		|	ConstsDeclRule 
		|	FunctionDecl 
		|	ProcedureDecl
		|	InstanceDeclRule 
		|	InitDeclRule 
		|	NextDeclRule 
		|	AxiomDeclRule 
		|	SpecDeclRule ;

TypeDeclRule returns TypeDecl : 'type' (name=ID|'*')  '=' t=TypeRule ';'
			|'type' name=ID  ';';

InputsDeclRule :  'input' IdListRule ':'t=TypeRule ';';


OutputsDeclRule :  'output' IdListRule ':'t=TypeRule ';';

VarsDeclRule :  'var' (vars+=VarDecl  (',' vars+=VarDecl)*) ':' t=TypeRule ';';

VarDecl : name=ID;

ConstsDeclRule :  'const' constants+=ConstDecl (',' constants+=ConstDecl)* ':'t=TypeRule ('=' INT )?';';
 
ConstDecl returns VarDecl: 
	{ConstDecl} name =ID
;
SharedVarsDeclRule :  'sharedvar' IdListRule ':'t=TypeRule ';';

DefineDeclRule :  'define' name=ID  '(' (l=IdTypeListRule)? ')' ':' t=TypeRule '='e=ExprRule  ';';

FunctionDecl returns VarDecl : 
	{FunctionDecl} 'function'name=ID  '('(l=IdTypeListRule)? ')' ':'t=TypeRule ';';

ProcedureDecl returns VarDecl:  
	{ProcedureDecl} 'procedure' name=ID  '(' (l=IdTypeListRule)? ')' 
					ret=ProcReturnArgRule?
					(req+=RequireExprsRule)* 
					(ensure+=EnsureExprsRule)* 
					(modifies+=ModifiesExprsRule)*
					body=BlkStmtRule;

ProcReturnArgRule :  'returns' '(' (l=IdTypeListRule)? ')';

RequireExprsRule :  ( 'requires' e=ExprRule  ';' );

EnsureExprsRule :  ( 'ensures' e=ExprRule  ';' );

ModifiesExprsRule :  ( 'modifies' l=IdListRule ';' );

InstanceDeclRule returns InstanceDecl:  'instance' name=ID  ':' module=[Module|FQN] args+=ArgMapListRule ';';

ArgMapListRule : 
{ArgMapListRule}'(' ((arg+=ArgMapRule (',' arg+=ArgMapRule)*) )?')';

ArgMapRule : {ArgMapRule} name=ID  ':' '(' (e+=ExprRule)?  ')';


AxiomDeclRule : ('axiom' | 'assume') n=ID  ':'e=ExprRule  ';'
| ('axiom' | 'assume') h=ExprRule  ';';




SpecDeclRule : prop=( 'property' | 'invariant') name=ID  ':' e=ExprRule  ';'
			|prop=( 'property' | 'invariant') e=ExprRule  ';';


InitDeclRule :  'init' body=BlkStmtRule;

NextDeclRule :  'next' body=BlkStmtRule;

StatementRule returns Statement:  
			(({StatementRule}'skip' ';')
			|('assert' d=ExprRule ';')
			|('assume'd=ExprRule ';')
			|('havoc' name=ID ';')
			|(AssignmentRule ';')
			|(CallStatement ';')
			|('next' '('name=ID ')'';')
			|(s=IfStmtRule (';'?))
			|(s=CaseStmtRule (';'?))
			|(s=ForLoopRule (';'?))
			|(s=WhileLoopRule (';'?))
			|(s=BlkStmtRule (';'?))
				);
CallStatement :
	{CallStatement}
	('call' '(' (lhs+=Lhs (',' lhs+=Lhs)*)? ')' '=' target=[ProcedureDecl|FQN] '(' exprs+=ExprRule (',' exprs+=ExprRule)* ')'';')
	|('call' target=[ProcedureDecl|FQN] '(' exprs+=ExprRule (',' exprs+=ExprRule)* ')' ';');
	
AssignmentRule :
	{Assignment} (lhs += Lhs (',' lhs+= Lhs*)?) '='  exprs+=ExprRule (',' exprs+=ExprRule)*;
	

BlkStmtRule returns CompoundStatement:  '{' {CompoundStatement} dec+=VarsDeclRule* stmt+=StatementRule*  '}';

//BlockVarDeclRule :  'var' l=IdListRule ':' t=TypeRule ';';




Lhs: {Lhs} 
	target=LhsVarRef
	('['  index+=ExprRule (',' index+=ExprRule )*  ']')? ("'"  )?  
	;

LhsVarRef returns VarRef: 
	var=[VarDecl|FQN] 
;

IfStmtRule 	:  'if' '('c=ExprRule')' then=BlkStmtRule ('else' else=BlkStmtRule)?;


CaseStmtRule:  {CaseStmtRule}'case' cases+=(CaseBlockRule|DefaultCaseBlockRule)* 'esac';

DefaultCaseBlockRule : 
	'default' ':'body=BlkStmtRule;

CaseBlockRule : 
	e=ExprRule  ':' body=BlkStmtRule;


ForLoopRule:  'for' iterator=VarDecl 'in' 'range' '(' lb=INT  ',' ub=INT ')' body=BlkStmtRule;

WhileLoopRule :  'while' '('c=ExprRule  ')' inv+=InvariantClauseRule* stmt=BlkStmtRule;

InvariantClauseRule:  ( 'property' | 'invariant') ('[' 'LTL' ']')? e=ExprRule  ';';

ExprRule : E1Rule ;

E1Rule : E2Rule | '(' pred=('forall'|'exists') '(' l=IdTypeListRule? ')' '::' a=E1Rule ')' ;

E2Rule : z+=E3Rule  ('<==>' q+=(E2Rule|E3Rule))* ;

E3Rule : e+=E4Rule  ('==>' e+=(E3Rule|E4Rule))* ;

E4Rule : 	(e+=E5Rule '&&' e+=E4Rule) |
			(e+=E5Rule '||' e+=E4Rule) |
			(e+=E5Rule '&' e+=E4Rule)  |
			(e+=E5Rule '|' e+=E4Rule)  |
			(e+=E5Rule '^' e+=E4Rule)  |
			e+=E5Rule ;

E5Rule : e+=E6Rule (op=REL_OP_RULE e+=E6Rule)* ;

terminal REL_OP_RULE :  '<' | '>' | '==' | '!=' | '<=' | '>=';

E6Rule : e+=E7Rule ('++' e+=E6Rule)* ;

E7Rule : e+=E8Rule  ('+' e+=E7Rule )*;

E8Rule : e+=E9Rule  ('-' e+=E9Rule)* ;

E9Rule : e+=E10Rule  ('*'  e+=E10Rule )*;

E10Rule : (op=('-' | '!' | '~') e=E11Rule) | e=E11Rule ;



E11Rule :  E12Rule '[' l+=ExprListRule (('->'e+=ExprRule)|(':'e+=ExprRule)) ?']'
//		| E12Rule  '[' e+=ExprRule  (','e+=ExprRule )* '->'e+=ExprRule  ']'
//		| E12Rule  '[' e+=ExprRule  ':'e+=ExprRule  ']'
		| E12Rule ;


E12Rule : j=E13Rule  
	(
		'(' (v=ExprListRule)? ')'
//		| 
//		(('.' name+=ID )+)
	)?;


RHSVarRef returns VarRef : 
	({VarRef}(var=[VarDecl|FQN] prime='\''?)) 
	;

EnumRef : 
	_enum=[EnumValue|FQN]
;	
E13Rule : 	ConstRule 
		  | RHSVarRef
		  | EnumRef
		  | TupleExpr
		  | IfPrimaryExpr
		  | ParenthesisExpr; 

TupleExpr : 
	'{'e+=ExprRule  (','e+=ExprRule )* '}'
;

IfPrimaryExpr :
	'if' '('c=ExprRule  ')' 'then' e+=ExprRule  'else' e+=ExprRule
; 

ParenthesisExpr:
	'(' ExprRule ')'
;
ConstRule : v= 'false' | v='true' |(d=INT(w=BV?))  |v=STRING;

TypeRule returns Type: 
	 PrimitiveTypeRule
		|EnumTypeRule
		|TupleTypeRule 
		|RecordTypeRule
		|ArrayTypeRule
		|SynonymTypeRule;
		//|ExternalTypeRule;

PrimitiveTypeRule returns Type:   t=('boolean' | 'integer' | BV);

terminal BV : ('bv'INT);

EnumTypeRule returns Type:  {EnumTypeRule} 'enum' '{' enums+=EnumValue (',' enums+=EnumValue)* '}';

EnumValue returns VarDecl: 
	{EnumValue} name=ID
;

TupleTypeRule returns Type: {TupleTypeRule} '{'tuple+=TypeRule (',' tuple+=TypeRule)* '}';

RecordTypeRule returns Type: {RecordTypeRule} 'record' '{' fields+=IdTypeListRule '}';

ArrayTypeRule returns Type: {ArrayTypeRule} '['b+=TypeRule (',' b+=TypeRule)* ']' base+=TypeRule;

SynonymTypeRule returns Type: 
	{SynonymTypeRule} decl=[TypeDecl]
;


ControlBlockRule : {ControlBlockRule} 'control' '{' cmd+=CmdRule * '}';

CmdRule :  (lhs=VarDecl '=')? (ID '.')? c=CmdNameRule  ('[' lid=IdListRule ']')? ('(' lex=ExprListRule ? ')')? ';';

CmdNameRule :  'bmc'
			| 'check'
			| 'clear_context'
			| 'induction'
			| 'print'
			| 'print_cex'
			| 'print_module'
			| 'print_results'
			| 'print_smt2' 
			| 'synthesize_invariant'
			| 'unroll'
			| 'verify';

IdListRule 	:  name+=ID |	name+=ID  ',' l=IdListRule;

IdTypeListRule : k+=ID  (',' z+=ID )* ':' t=TypeRule (',' l=IdTypeListRule)?;

ExprListRule :{ExprListRule} exprs+=ExprRule (',' exprs+=ExprRule)*;


/*Module:
	'module' name=ID '{'
		(decls+=Declaration)+
	'}';

Init:
	'init' init=CompoundStatement
;	
Next :
	'next' next=CompoundStatement
;
Declaration : FuncDecl | TypeDecl | ConstDecl | ProcDecl | VarDecl | InputDecl | DefineDecl | InstanceDecl | Init | Next;

TypeRef :
	BuiltInTypeRef | LocalTypeRef
;
LocalTypeRef:
	(path+=[Declaration])('.' path+=[Declaration]);


BuiltInTypeRef:
	'bv'size=INT
;

VarDecl:
	'var' name=ID ':' type=TypeRef;

InputDecl:
	'input' name=ID ':' type=TypeRef;

FuncDecl: 'function' name=ID '(' args+=ArgDecl (',' args+=ArgDecl)* ')' ':' returnType=TypeRef;	

DefineDecl: 'define' name=ID '(' args+=ArgDecl (',' args+=ArgDecl)* ')' '=' returnType=TypeRef (body=CompoundStatement)?;	

InstanceDecl : 'instance' name=ID '(' (ID ':' ID)  (',' (ID ':' ID))* ')' ;	

ExprList:
	exprs+=LOrExpression (';' exprs+=LOrExpression);
	
ProcDecl: 'procedure' name=ID '(' args+=ArgDecl (',' args+=ArgDecl)* ')' 
'returns' ret=TypeRef (body=CompoundStatement)?	
'requires' requires=ExprList
'ensures' ensures=ExprList
'modifies' mod+=TypeRef (modBody=CompoundStatement)?;	

TypeDecl : 'type' name=ID '=' alias=TypeRef;
ConstDecl: 'const' name=ID ':' type=TypeRef;
ArgDecl: name =ID ':' type= TypeRef;

Statement: 
	AssumeStmt | AssignStatement | IfStatement | CompoundStatement |SwitchStatement
;

AssumeStmt  :
	kw='assume'|'axiom' name=ID ':' expr=LOrExpression 
;

CompoundStatement:
	'{'
		(statements+=Statement ';')+
	'}'
;
AssignStatement :
	(dest=[Declaration] ':=')? value=Expression;
	
IfStatement :
	'if' '(' cond=LOrExpression ')' 
	then=CompoundStatement
	 (=>'else' else=CompoundStatement)?
; 
Control :
	'Ã§ontrol' '{' CommandList '}';
	
CommandList : 
 	Command (";" Command)*;
 
Command: CommandName;
 
 terminal CommandName:			
	'bmc'
| 'check'
| 'clear context'
| 'induction'
| 'print'
| 'print_cex'
| 'print_module'
| 'print_results'
| 'print_smt2' 'synthesize_invariant'
| 'unroll'
| 'verify'
;	 
SwitchStatement :
	'case' 
		(cases+=CaseStatement)+
	 'esac'
; 

CaseStatement :
	expr=Expression body=CompoundStatement
;

Expression: 
	LOrExpression | 
	LAndExpression | 
	OrExpression | 
	AndExpression | 
	RelationalExpression |
	RangeExpression |
	AdditiveExpression |
	MultiplicativeExpression |
	UnaryPostfixExpression |
	FieldExpression |
	PrimaryExpression |
	LiteralExpression |
	CallExpression |
	ArrayExpression |
	IfExpression
	
;
IfExpression :
	IfStatement
;
LOrExpression :
	LAndExpression ( (name=LOR_KW children+=LAndExpression))*;


LAndExpression :
	OrExpression ( (name=LAND_KW children+=OrExpression))*;


OrExpression :
	AndExpression ( (name=OR_KW children+=AndExpression))*;

AndExpression :
	RelationalExpression ( (name=AND_KW children+=RelationalExpression))*;

RelationalExpression :
	RangeExpression (( name=(LT_KW|GT_KW|LE_KW|GE_KW|EQ_KW|NEQ_KW) children+=RelationalExpression))?;


RangeExpression :
	(AdditiveExpression ( name=':' children+=AdditiveExpression (=>':' children+=AdditiveExpression )?)?)
	;

AdditiveExpression :
	MultiplicativeExpression ( name=('+'|'-') children+=AdditiveExpression)?;


MultiplicativeExpression :
	(UnaryPostfixExpression) ((name=ARITH_KW children+=MultiplicativeExpression))?;

UnaryPostfixExpression :
	(FieldExpression )(('\'' )?) ; 

FieldExpression :
	(PrimaryExpression )(( ('.') field=Expression)?) ; 

CallExpression :
	ArrayExpression ( '(' (index+=Expression (',' index+=Expression)*)? ')')?;

ArrayExpression:
	PrimaryExpression '['  (children+=PrimaryExpression ((';') children+=PrimaryExpression )*)?  ']';


PrimaryExpression :
	LiteralExpression | SymbolExpression | ParanthesizedExpression    ;

ParanthesizedExpression :
	(=>'(' AssignStatement')');
	
	
SymbolExpression  :
	{SymbolExpression} symbol=([Declaration]);
	
LiteralExpression :
	v=INT |b=BOOL;
//	({ComplexNumberExpression} im=IMAGINARY_FLOATNUMBER)|
//	({GenericExpression} name=RESERVED)|
//	({StringExpression} /*QUOTE_KW value=(DQUOTE_STRING|SQUOTE_STRING))| 
//	({StringExpression} value=)
	
	

terminal LOR_KW : '||';
terminal LAND_KW : '&&';	
terminal OR_KW : '|';	
terminal AND_KW : '&'; 	

//terminal INT_KW : 'int';
//terminal FIXED_KW : 'fixed';
//terminal FLOAT_KW : 'float';
//terminal COMPLEX_KW : 'complex';

terminal LT_KW : '<';
terminal GT_KW : '>';
terminal LE_KW : '<=';
terminal GE_KW : '>=';
terminal EQ_KW : '==';
terminal NEQ_KW : '/=';

terminal BOOL : ('true' | 'false');
terminal ARITH_KW : ('*' | '/' | '//' | '.*' | './' | '\\' | '.\\' | '**' | '.**' | '.^'  );
terminal ELLIPSIS: '...' WS* (SL_COMMENT );

terminal INT returns ecore::EInt: ('0'..'9')+;
terminal ML_COMMENT : '' -> '';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
*/

	
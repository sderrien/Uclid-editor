/**
 * generated by Xtext 2.22.0
 */
package uclid.xtext.uclid.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import uclid.xtext.uclid.ArgMapListRule;
import uclid.xtext.uclid.ArgMapRule;
import uclid.xtext.uclid.ArrayTypeRule;
import uclid.xtext.uclid.Assignment;
import uclid.xtext.uclid.AssignmentRule;
import uclid.xtext.uclid.AxiomDeclRule;
import uclid.xtext.uclid.CallStatement;
import uclid.xtext.uclid.CaseBlockRule;
import uclid.xtext.uclid.CaseStmtRule;
import uclid.xtext.uclid.CmdRule;
import uclid.xtext.uclid.CompoundStatement;
import uclid.xtext.uclid.ConstDecl;
import uclid.xtext.uclid.ConstRule;
import uclid.xtext.uclid.ConstsDeclRule;
import uclid.xtext.uclid.ControlBlockRule;
import uclid.xtext.uclid.DeclRule;
import uclid.xtext.uclid.DefaultCaseBlockRule;
import uclid.xtext.uclid.DefineDeclRule;
import uclid.xtext.uclid.E10Rule;
import uclid.xtext.uclid.E11Rule;
import uclid.xtext.uclid.E12Rule;
import uclid.xtext.uclid.E13Rule;
import uclid.xtext.uclid.E1Rule;
import uclid.xtext.uclid.E2Rule;
import uclid.xtext.uclid.E3Rule;
import uclid.xtext.uclid.E4Rule;
import uclid.xtext.uclid.E5Rule;
import uclid.xtext.uclid.E6Rule;
import uclid.xtext.uclid.E7Rule;
import uclid.xtext.uclid.E8Rule;
import uclid.xtext.uclid.E9Rule;
import uclid.xtext.uclid.EnsureExprsRule;
import uclid.xtext.uclid.EnumRef;
import uclid.xtext.uclid.EnumTypeRule;
import uclid.xtext.uclid.EnumValue;
import uclid.xtext.uclid.ExprListRule;
import uclid.xtext.uclid.ExprRule;
import uclid.xtext.uclid.ForLoopRule;
import uclid.xtext.uclid.FunctionDecl;
import uclid.xtext.uclid.IdListRule;
import uclid.xtext.uclid.IdTypeListRule;
import uclid.xtext.uclid.IfPrimaryExpr;
import uclid.xtext.uclid.IfStmtRule;
import uclid.xtext.uclid.InitDeclRule;
import uclid.xtext.uclid.InputsDeclRule;
import uclid.xtext.uclid.InstanceDecl;
import uclid.xtext.uclid.InvariantClauseRule;
import uclid.xtext.uclid.Lhs;
import uclid.xtext.uclid.ModelRule;
import uclid.xtext.uclid.ModifiesExprsRule;
import uclid.xtext.uclid.ModuleRule;
import uclid.xtext.uclid.NextDeclRule;
import uclid.xtext.uclid.OutputsDeclRule;
import uclid.xtext.uclid.ParenthesisExpr;
import uclid.xtext.uclid.ProcReturnArgRule;
import uclid.xtext.uclid.ProcedureDecl;
import uclid.xtext.uclid.RecordTypeRule;
import uclid.xtext.uclid.RequireExprsRule;
import uclid.xtext.uclid.SharedVarsDeclRule;
import uclid.xtext.uclid.SpecDeclRule;
import uclid.xtext.uclid.Statement;
import uclid.xtext.uclid.StatementRule;
import uclid.xtext.uclid.SynonymTypeRule;
import uclid.xtext.uclid.TopLevel;
import uclid.xtext.uclid.TupleExpr;
import uclid.xtext.uclid.TupleTypeRule;
import uclid.xtext.uclid.Type;
import uclid.xtext.uclid.TypeDecl;
import uclid.xtext.uclid.UclidFactory;
import uclid.xtext.uclid.UclidPackage;
import uclid.xtext.uclid.VarDecl;
import uclid.xtext.uclid.VarRef;
import uclid.xtext.uclid.VarsDeclRule;
import uclid.xtext.uclid.WhileLoopRule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class UclidPackageImpl extends EPackageImpl implements UclidPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moduleRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass declRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeDeclEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inputsDeclRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputsDeclRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varsDeclRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varDeclEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass constsDeclRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sharedVarsDeclRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass defineDeclRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass procReturnArgRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass requireExprsRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ensureExprsRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modifiesExprsRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass instanceDeclEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass argMapListRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass argMapRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass axiomDeclRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass specDeclRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass initDeclRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nextDeclRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass callStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass assignmentRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass compoundStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lhsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varRefEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ifStmtRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass caseStmtRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass defaultCaseBlockRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass caseBlockRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass forLoopRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass whileLoopRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass invariantClauseRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass exprRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e1RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e2RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e3RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e4RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e5RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e6RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e7RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e8RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e9RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e10RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e11RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e12RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass enumRefEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass e13RuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tupleExprEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ifPrimaryExprEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parenthesisExprEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass constRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass controlBlockRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cmdRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass idListRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass idTypeListRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass exprListRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass topLevelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moduleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass constDeclEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionDeclEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass procedureDeclEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass assignmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass enumTypeRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass enumValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tupleTypeRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass recordTypeRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arrayTypeRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass synonymTypeRuleEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see uclid.xtext.uclid.UclidPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private UclidPackageImpl()
  {
    super(eNS_URI, UclidFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link UclidPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static UclidPackage init()
  {
    if (isInited) return (UclidPackage)EPackage.Registry.INSTANCE.getEPackage(UclidPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredUclidPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    UclidPackageImpl theUclidPackage = registeredUclidPackage instanceof UclidPackageImpl ? (UclidPackageImpl)registeredUclidPackage : new UclidPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theUclidPackage.createPackageContents();

    // Initialize created meta-data
    theUclidPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theUclidPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(UclidPackage.eNS_URI, theUclidPackage);
    return theUclidPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModelRule()
  {
    return modelRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModuleRule()
  {
    return moduleRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeclRule()
  {
    return declRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTypeDecl()
  {
    return typeDeclEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTypeDecl_Name()
  {
    return (EAttribute)typeDeclEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTypeDecl_T()
  {
    return (EReference)typeDeclEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInputsDeclRule()
  {
    return inputsDeclRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOutputsDeclRule()
  {
    return outputsDeclRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVarsDeclRule()
  {
    return varsDeclRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarsDeclRule_Vars()
  {
    return (EReference)varsDeclRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarsDeclRule_T()
  {
    return (EReference)varsDeclRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVarDecl()
  {
    return varDeclEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarDecl_Name()
  {
    return (EAttribute)varDeclEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConstsDeclRule()
  {
    return constsDeclRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConstsDeclRule_Constants()
  {
    return (EReference)constsDeclRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConstsDeclRule_T()
  {
    return (EReference)constsDeclRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSharedVarsDeclRule()
  {
    return sharedVarsDeclRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDefineDeclRule()
  {
    return defineDeclRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDefineDeclRule_Name()
  {
    return (EAttribute)defineDeclRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDefineDeclRule_L()
  {
    return (EReference)defineDeclRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDefineDeclRule_T()
  {
    return (EReference)defineDeclRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDefineDeclRule_E()
  {
    return (EReference)defineDeclRuleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getProcReturnArgRule()
  {
    return procReturnArgRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProcReturnArgRule_L()
  {
    return (EReference)procReturnArgRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRequireExprsRule()
  {
    return requireExprsRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRequireExprsRule_E()
  {
    return (EReference)requireExprsRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEnsureExprsRule()
  {
    return ensureExprsRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEnsureExprsRule_E()
  {
    return (EReference)ensureExprsRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModifiesExprsRule()
  {
    return modifiesExprsRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModifiesExprsRule_L()
  {
    return (EReference)modifiesExprsRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInstanceDecl()
  {
    return instanceDeclEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInstanceDecl_Name()
  {
    return (EAttribute)instanceDeclEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInstanceDecl_Module()
  {
    return (EReference)instanceDeclEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInstanceDecl_Args()
  {
    return (EReference)instanceDeclEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getArgMapListRule()
  {
    return argMapListRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getArgMapListRule_Arg()
  {
    return (EReference)argMapListRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getArgMapRule()
  {
    return argMapRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getArgMapRule_Name()
  {
    return (EAttribute)argMapRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getArgMapRule_E()
  {
    return (EReference)argMapRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAxiomDeclRule()
  {
    return axiomDeclRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAxiomDeclRule_N()
  {
    return (EAttribute)axiomDeclRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAxiomDeclRule_E()
  {
    return (EReference)axiomDeclRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAxiomDeclRule_H()
  {
    return (EReference)axiomDeclRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSpecDeclRule()
  {
    return specDeclRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSpecDeclRule_Prop()
  {
    return (EAttribute)specDeclRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSpecDeclRule_Name()
  {
    return (EAttribute)specDeclRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSpecDeclRule_E()
  {
    return (EReference)specDeclRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInitDeclRule()
  {
    return initDeclRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInitDeclRule_Body()
  {
    return (EReference)initDeclRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNextDeclRule()
  {
    return nextDeclRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNextDeclRule_Body()
  {
    return (EReference)nextDeclRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStatement()
  {
    return statementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStatement_D()
  {
    return (EReference)statementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStatement_Name()
  {
    return (EAttribute)statementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStatement_S()
  {
    return (EReference)statementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCallStatement()
  {
    return callStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCallStatement_Lhs()
  {
    return (EReference)callStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCallStatement_Target()
  {
    return (EReference)callStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCallStatement_Exprs()
  {
    return (EReference)callStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAssignmentRule()
  {
    return assignmentRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCompoundStatement()
  {
    return compoundStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompoundStatement_Dec()
  {
    return (EReference)compoundStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompoundStatement_Stmt()
  {
    return (EReference)compoundStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLhs()
  {
    return lhsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLhs_Target()
  {
    return (EReference)lhsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLhs_Index()
  {
    return (EReference)lhsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVarRef()
  {
    return varRefEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarRef_Var()
  {
    return (EReference)varRefEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarRef_Prime()
  {
    return (EAttribute)varRefEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIfStmtRule()
  {
    return ifStmtRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIfStmtRule_C()
  {
    return (EReference)ifStmtRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIfStmtRule_Then()
  {
    return (EReference)ifStmtRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIfStmtRule_Else()
  {
    return (EReference)ifStmtRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCaseStmtRule()
  {
    return caseStmtRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseStmtRule_Cases()
  {
    return (EReference)caseStmtRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDefaultCaseBlockRule()
  {
    return defaultCaseBlockRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDefaultCaseBlockRule_Body()
  {
    return (EReference)defaultCaseBlockRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCaseBlockRule()
  {
    return caseBlockRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseBlockRule_E()
  {
    return (EReference)caseBlockRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseBlockRule_Body()
  {
    return (EReference)caseBlockRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getForLoopRule()
  {
    return forLoopRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getForLoopRule_Iterator()
  {
    return (EReference)forLoopRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getForLoopRule_Lb()
  {
    return (EAttribute)forLoopRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getForLoopRule_Ub()
  {
    return (EAttribute)forLoopRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getForLoopRule_Body()
  {
    return (EReference)forLoopRuleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getWhileLoopRule()
  {
    return whileLoopRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhileLoopRule_C()
  {
    return (EReference)whileLoopRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhileLoopRule_Inv()
  {
    return (EReference)whileLoopRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhileLoopRule_Stmt()
  {
    return (EReference)whileLoopRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInvariantClauseRule()
  {
    return invariantClauseRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInvariantClauseRule_E()
  {
    return (EReference)invariantClauseRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExprRule()
  {
    return exprRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE1Rule()
  {
    return e1RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getE1Rule_Pred()
  {
    return (EAttribute)e1RuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE1Rule_L()
  {
    return (EReference)e1RuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE1Rule_A()
  {
    return (EReference)e1RuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE2Rule()
  {
    return e2RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE2Rule_Z()
  {
    return (EReference)e2RuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE2Rule_Q()
  {
    return (EReference)e2RuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE3Rule()
  {
    return e3RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE3Rule_E()
  {
    return (EReference)e3RuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE4Rule()
  {
    return e4RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE4Rule_E()
  {
    return (EReference)e4RuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE5Rule()
  {
    return e5RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE5Rule_E()
  {
    return (EReference)e5RuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getE5Rule_Op()
  {
    return (EAttribute)e5RuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE6Rule()
  {
    return e6RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE6Rule_E()
  {
    return (EReference)e6RuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE7Rule()
  {
    return e7RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE7Rule_E()
  {
    return (EReference)e7RuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE8Rule()
  {
    return e8RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE8Rule_E()
  {
    return (EReference)e8RuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE9Rule()
  {
    return e9RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE9Rule_E()
  {
    return (EReference)e9RuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE10Rule()
  {
    return e10RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getE10Rule_Op()
  {
    return (EAttribute)e10RuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE10Rule_E()
  {
    return (EReference)e10RuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE11Rule()
  {
    return e11RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE12Rule()
  {
    return e12RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE12Rule_L()
  {
    return (EReference)e12RuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE12Rule_E()
  {
    return (EReference)e12RuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE12Rule_J()
  {
    return (EReference)e12RuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getE12Rule_V()
  {
    return (EReference)e12RuleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEnumRef()
  {
    return enumRefEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEnumRef__enum()
  {
    return (EReference)enumRefEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getE13Rule()
  {
    return e13RuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTupleExpr()
  {
    return tupleExprEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTupleExpr_E()
  {
    return (EReference)tupleExprEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIfPrimaryExpr()
  {
    return ifPrimaryExprEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIfPrimaryExpr_C()
  {
    return (EReference)ifPrimaryExprEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIfPrimaryExpr_E()
  {
    return (EReference)ifPrimaryExprEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getParenthesisExpr()
  {
    return parenthesisExprEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConstRule()
  {
    return constRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConstRule_V()
  {
    return (EAttribute)constRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConstRule_D()
  {
    return (EAttribute)constRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConstRule_W()
  {
    return (EAttribute)constRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getType()
  {
    return typeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getType_T()
  {
    return (EAttribute)typeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getControlBlockRule()
  {
    return controlBlockRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getControlBlockRule_Cmd()
  {
    return (EReference)controlBlockRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCmdRule()
  {
    return cmdRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCmdRule_Lhs()
  {
    return (EReference)cmdRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCmdRule_C()
  {
    return (EAttribute)cmdRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCmdRule_Lid()
  {
    return (EReference)cmdRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCmdRule_Lex()
  {
    return (EReference)cmdRuleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIdListRule()
  {
    return idListRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIdListRule_T()
  {
    return (EReference)idListRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIdListRule_Name()
  {
    return (EAttribute)idListRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIdListRule_L()
  {
    return (EReference)idListRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIdTypeListRule()
  {
    return idTypeListRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIdTypeListRule_K()
  {
    return (EAttribute)idTypeListRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIdTypeListRule_Z()
  {
    return (EAttribute)idTypeListRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIdTypeListRule_T()
  {
    return (EReference)idTypeListRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIdTypeListRule_L()
  {
    return (EReference)idTypeListRuleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExprListRule()
  {
    return exprListRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExprListRule_Exprs()
  {
    return (EReference)exprListRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTopLevel()
  {
    return topLevelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTopLevel_Rules()
  {
    return (EReference)topLevelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModule()
  {
    return moduleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getModule_Name()
  {
    return (EAttribute)moduleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModule_D()
  {
    return (EReference)moduleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModule_E()
  {
    return (EReference)moduleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConstDecl()
  {
    return constDeclEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFunctionDecl()
  {
    return functionDeclEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFunctionDecl_L()
  {
    return (EReference)functionDeclEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFunctionDecl_T()
  {
    return (EReference)functionDeclEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getProcedureDecl()
  {
    return procedureDeclEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProcedureDecl_L()
  {
    return (EReference)procedureDeclEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProcedureDecl_Ret()
  {
    return (EReference)procedureDeclEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProcedureDecl_Req()
  {
    return (EReference)procedureDeclEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProcedureDecl_Ensure()
  {
    return (EReference)procedureDeclEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProcedureDecl_Modifies()
  {
    return (EReference)procedureDeclEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProcedureDecl_Body()
  {
    return (EReference)procedureDeclEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStatementRule()
  {
    return statementRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAssignment()
  {
    return assignmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAssignment_Lhs()
  {
    return (EReference)assignmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAssignment_Exprs()
  {
    return (EReference)assignmentEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEnumTypeRule()
  {
    return enumTypeRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEnumTypeRule_Enums()
  {
    return (EReference)enumTypeRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEnumValue()
  {
    return enumValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTupleTypeRule()
  {
    return tupleTypeRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTupleTypeRule_Tuple()
  {
    return (EReference)tupleTypeRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRecordTypeRule()
  {
    return recordTypeRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRecordTypeRule_Fields()
  {
    return (EReference)recordTypeRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getArrayTypeRule()
  {
    return arrayTypeRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getArrayTypeRule_B()
  {
    return (EReference)arrayTypeRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getArrayTypeRule_Base()
  {
    return (EReference)arrayTypeRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSynonymTypeRule()
  {
    return synonymTypeRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSynonymTypeRule_Decl()
  {
    return (EReference)synonymTypeRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UclidFactory getUclidFactory()
  {
    return (UclidFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelRuleEClass = createEClass(MODEL_RULE);

    moduleRuleEClass = createEClass(MODULE_RULE);

    declRuleEClass = createEClass(DECL_RULE);

    typeDeclEClass = createEClass(TYPE_DECL);
    createEAttribute(typeDeclEClass, TYPE_DECL__NAME);
    createEReference(typeDeclEClass, TYPE_DECL__T);

    inputsDeclRuleEClass = createEClass(INPUTS_DECL_RULE);

    outputsDeclRuleEClass = createEClass(OUTPUTS_DECL_RULE);

    varsDeclRuleEClass = createEClass(VARS_DECL_RULE);
    createEReference(varsDeclRuleEClass, VARS_DECL_RULE__VARS);
    createEReference(varsDeclRuleEClass, VARS_DECL_RULE__T);

    varDeclEClass = createEClass(VAR_DECL);
    createEAttribute(varDeclEClass, VAR_DECL__NAME);

    constsDeclRuleEClass = createEClass(CONSTS_DECL_RULE);
    createEReference(constsDeclRuleEClass, CONSTS_DECL_RULE__CONSTANTS);
    createEReference(constsDeclRuleEClass, CONSTS_DECL_RULE__T);

    sharedVarsDeclRuleEClass = createEClass(SHARED_VARS_DECL_RULE);

    defineDeclRuleEClass = createEClass(DEFINE_DECL_RULE);
    createEAttribute(defineDeclRuleEClass, DEFINE_DECL_RULE__NAME);
    createEReference(defineDeclRuleEClass, DEFINE_DECL_RULE__L);
    createEReference(defineDeclRuleEClass, DEFINE_DECL_RULE__T);
    createEReference(defineDeclRuleEClass, DEFINE_DECL_RULE__E);

    procReturnArgRuleEClass = createEClass(PROC_RETURN_ARG_RULE);
    createEReference(procReturnArgRuleEClass, PROC_RETURN_ARG_RULE__L);

    requireExprsRuleEClass = createEClass(REQUIRE_EXPRS_RULE);
    createEReference(requireExprsRuleEClass, REQUIRE_EXPRS_RULE__E);

    ensureExprsRuleEClass = createEClass(ENSURE_EXPRS_RULE);
    createEReference(ensureExprsRuleEClass, ENSURE_EXPRS_RULE__E);

    modifiesExprsRuleEClass = createEClass(MODIFIES_EXPRS_RULE);
    createEReference(modifiesExprsRuleEClass, MODIFIES_EXPRS_RULE__L);

    instanceDeclEClass = createEClass(INSTANCE_DECL);
    createEAttribute(instanceDeclEClass, INSTANCE_DECL__NAME);
    createEReference(instanceDeclEClass, INSTANCE_DECL__MODULE);
    createEReference(instanceDeclEClass, INSTANCE_DECL__ARGS);

    argMapListRuleEClass = createEClass(ARG_MAP_LIST_RULE);
    createEReference(argMapListRuleEClass, ARG_MAP_LIST_RULE__ARG);

    argMapRuleEClass = createEClass(ARG_MAP_RULE);
    createEAttribute(argMapRuleEClass, ARG_MAP_RULE__NAME);
    createEReference(argMapRuleEClass, ARG_MAP_RULE__E);

    axiomDeclRuleEClass = createEClass(AXIOM_DECL_RULE);
    createEAttribute(axiomDeclRuleEClass, AXIOM_DECL_RULE__N);
    createEReference(axiomDeclRuleEClass, AXIOM_DECL_RULE__E);
    createEReference(axiomDeclRuleEClass, AXIOM_DECL_RULE__H);

    specDeclRuleEClass = createEClass(SPEC_DECL_RULE);
    createEAttribute(specDeclRuleEClass, SPEC_DECL_RULE__PROP);
    createEAttribute(specDeclRuleEClass, SPEC_DECL_RULE__NAME);
    createEReference(specDeclRuleEClass, SPEC_DECL_RULE__E);

    initDeclRuleEClass = createEClass(INIT_DECL_RULE);
    createEReference(initDeclRuleEClass, INIT_DECL_RULE__BODY);

    nextDeclRuleEClass = createEClass(NEXT_DECL_RULE);
    createEReference(nextDeclRuleEClass, NEXT_DECL_RULE__BODY);

    statementEClass = createEClass(STATEMENT);
    createEReference(statementEClass, STATEMENT__D);
    createEAttribute(statementEClass, STATEMENT__NAME);
    createEReference(statementEClass, STATEMENT__S);

    callStatementEClass = createEClass(CALL_STATEMENT);
    createEReference(callStatementEClass, CALL_STATEMENT__LHS);
    createEReference(callStatementEClass, CALL_STATEMENT__TARGET);
    createEReference(callStatementEClass, CALL_STATEMENT__EXPRS);

    assignmentRuleEClass = createEClass(ASSIGNMENT_RULE);

    compoundStatementEClass = createEClass(COMPOUND_STATEMENT);
    createEReference(compoundStatementEClass, COMPOUND_STATEMENT__DEC);
    createEReference(compoundStatementEClass, COMPOUND_STATEMENT__STMT);

    lhsEClass = createEClass(LHS);
    createEReference(lhsEClass, LHS__TARGET);
    createEReference(lhsEClass, LHS__INDEX);

    varRefEClass = createEClass(VAR_REF);
    createEReference(varRefEClass, VAR_REF__VAR);
    createEAttribute(varRefEClass, VAR_REF__PRIME);

    ifStmtRuleEClass = createEClass(IF_STMT_RULE);
    createEReference(ifStmtRuleEClass, IF_STMT_RULE__C);
    createEReference(ifStmtRuleEClass, IF_STMT_RULE__THEN);
    createEReference(ifStmtRuleEClass, IF_STMT_RULE__ELSE);

    caseStmtRuleEClass = createEClass(CASE_STMT_RULE);
    createEReference(caseStmtRuleEClass, CASE_STMT_RULE__CASES);

    defaultCaseBlockRuleEClass = createEClass(DEFAULT_CASE_BLOCK_RULE);
    createEReference(defaultCaseBlockRuleEClass, DEFAULT_CASE_BLOCK_RULE__BODY);

    caseBlockRuleEClass = createEClass(CASE_BLOCK_RULE);
    createEReference(caseBlockRuleEClass, CASE_BLOCK_RULE__E);
    createEReference(caseBlockRuleEClass, CASE_BLOCK_RULE__BODY);

    forLoopRuleEClass = createEClass(FOR_LOOP_RULE);
    createEReference(forLoopRuleEClass, FOR_LOOP_RULE__ITERATOR);
    createEAttribute(forLoopRuleEClass, FOR_LOOP_RULE__LB);
    createEAttribute(forLoopRuleEClass, FOR_LOOP_RULE__UB);
    createEReference(forLoopRuleEClass, FOR_LOOP_RULE__BODY);

    whileLoopRuleEClass = createEClass(WHILE_LOOP_RULE);
    createEReference(whileLoopRuleEClass, WHILE_LOOP_RULE__C);
    createEReference(whileLoopRuleEClass, WHILE_LOOP_RULE__INV);
    createEReference(whileLoopRuleEClass, WHILE_LOOP_RULE__STMT);

    invariantClauseRuleEClass = createEClass(INVARIANT_CLAUSE_RULE);
    createEReference(invariantClauseRuleEClass, INVARIANT_CLAUSE_RULE__E);

    exprRuleEClass = createEClass(EXPR_RULE);

    e1RuleEClass = createEClass(E1_RULE);
    createEAttribute(e1RuleEClass, E1_RULE__PRED);
    createEReference(e1RuleEClass, E1_RULE__L);
    createEReference(e1RuleEClass, E1_RULE__A);

    e2RuleEClass = createEClass(E2_RULE);
    createEReference(e2RuleEClass, E2_RULE__Z);
    createEReference(e2RuleEClass, E2_RULE__Q);

    e3RuleEClass = createEClass(E3_RULE);
    createEReference(e3RuleEClass, E3_RULE__E);

    e4RuleEClass = createEClass(E4_RULE);
    createEReference(e4RuleEClass, E4_RULE__E);

    e5RuleEClass = createEClass(E5_RULE);
    createEReference(e5RuleEClass, E5_RULE__E);
    createEAttribute(e5RuleEClass, E5_RULE__OP);

    e6RuleEClass = createEClass(E6_RULE);
    createEReference(e6RuleEClass, E6_RULE__E);

    e7RuleEClass = createEClass(E7_RULE);
    createEReference(e7RuleEClass, E7_RULE__E);

    e8RuleEClass = createEClass(E8_RULE);
    createEReference(e8RuleEClass, E8_RULE__E);

    e9RuleEClass = createEClass(E9_RULE);
    createEReference(e9RuleEClass, E9_RULE__E);

    e10RuleEClass = createEClass(E10_RULE);
    createEAttribute(e10RuleEClass, E10_RULE__OP);
    createEReference(e10RuleEClass, E10_RULE__E);

    e11RuleEClass = createEClass(E11_RULE);

    e12RuleEClass = createEClass(E12_RULE);
    createEReference(e12RuleEClass, E12_RULE__L);
    createEReference(e12RuleEClass, E12_RULE__E);
    createEReference(e12RuleEClass, E12_RULE__J);
    createEReference(e12RuleEClass, E12_RULE__V);

    enumRefEClass = createEClass(ENUM_REF);
    createEReference(enumRefEClass, ENUM_REF__ENUM);

    e13RuleEClass = createEClass(E13_RULE);

    tupleExprEClass = createEClass(TUPLE_EXPR);
    createEReference(tupleExprEClass, TUPLE_EXPR__E);

    ifPrimaryExprEClass = createEClass(IF_PRIMARY_EXPR);
    createEReference(ifPrimaryExprEClass, IF_PRIMARY_EXPR__C);
    createEReference(ifPrimaryExprEClass, IF_PRIMARY_EXPR__E);

    parenthesisExprEClass = createEClass(PARENTHESIS_EXPR);

    constRuleEClass = createEClass(CONST_RULE);
    createEAttribute(constRuleEClass, CONST_RULE__V);
    createEAttribute(constRuleEClass, CONST_RULE__D);
    createEAttribute(constRuleEClass, CONST_RULE__W);

    typeEClass = createEClass(TYPE);
    createEAttribute(typeEClass, TYPE__T);

    controlBlockRuleEClass = createEClass(CONTROL_BLOCK_RULE);
    createEReference(controlBlockRuleEClass, CONTROL_BLOCK_RULE__CMD);

    cmdRuleEClass = createEClass(CMD_RULE);
    createEReference(cmdRuleEClass, CMD_RULE__LHS);
    createEAttribute(cmdRuleEClass, CMD_RULE__C);
    createEReference(cmdRuleEClass, CMD_RULE__LID);
    createEReference(cmdRuleEClass, CMD_RULE__LEX);

    idListRuleEClass = createEClass(ID_LIST_RULE);
    createEReference(idListRuleEClass, ID_LIST_RULE__T);
    createEAttribute(idListRuleEClass, ID_LIST_RULE__NAME);
    createEReference(idListRuleEClass, ID_LIST_RULE__L);

    idTypeListRuleEClass = createEClass(ID_TYPE_LIST_RULE);
    createEAttribute(idTypeListRuleEClass, ID_TYPE_LIST_RULE__K);
    createEAttribute(idTypeListRuleEClass, ID_TYPE_LIST_RULE__Z);
    createEReference(idTypeListRuleEClass, ID_TYPE_LIST_RULE__T);
    createEReference(idTypeListRuleEClass, ID_TYPE_LIST_RULE__L);

    exprListRuleEClass = createEClass(EXPR_LIST_RULE);
    createEReference(exprListRuleEClass, EXPR_LIST_RULE__EXPRS);

    topLevelEClass = createEClass(TOP_LEVEL);
    createEReference(topLevelEClass, TOP_LEVEL__RULES);

    moduleEClass = createEClass(MODULE);
    createEAttribute(moduleEClass, MODULE__NAME);
    createEReference(moduleEClass, MODULE__D);
    createEReference(moduleEClass, MODULE__E);

    constDeclEClass = createEClass(CONST_DECL);

    functionDeclEClass = createEClass(FUNCTION_DECL);
    createEReference(functionDeclEClass, FUNCTION_DECL__L);
    createEReference(functionDeclEClass, FUNCTION_DECL__T);

    procedureDeclEClass = createEClass(PROCEDURE_DECL);
    createEReference(procedureDeclEClass, PROCEDURE_DECL__L);
    createEReference(procedureDeclEClass, PROCEDURE_DECL__RET);
    createEReference(procedureDeclEClass, PROCEDURE_DECL__REQ);
    createEReference(procedureDeclEClass, PROCEDURE_DECL__ENSURE);
    createEReference(procedureDeclEClass, PROCEDURE_DECL__MODIFIES);
    createEReference(procedureDeclEClass, PROCEDURE_DECL__BODY);

    statementRuleEClass = createEClass(STATEMENT_RULE);

    assignmentEClass = createEClass(ASSIGNMENT);
    createEReference(assignmentEClass, ASSIGNMENT__LHS);
    createEReference(assignmentEClass, ASSIGNMENT__EXPRS);

    enumTypeRuleEClass = createEClass(ENUM_TYPE_RULE);
    createEReference(enumTypeRuleEClass, ENUM_TYPE_RULE__ENUMS);

    enumValueEClass = createEClass(ENUM_VALUE);

    tupleTypeRuleEClass = createEClass(TUPLE_TYPE_RULE);
    createEReference(tupleTypeRuleEClass, TUPLE_TYPE_RULE__TUPLE);

    recordTypeRuleEClass = createEClass(RECORD_TYPE_RULE);
    createEReference(recordTypeRuleEClass, RECORD_TYPE_RULE__FIELDS);

    arrayTypeRuleEClass = createEClass(ARRAY_TYPE_RULE);
    createEReference(arrayTypeRuleEClass, ARRAY_TYPE_RULE__B);
    createEReference(arrayTypeRuleEClass, ARRAY_TYPE_RULE__BASE);

    synonymTypeRuleEClass = createEClass(SYNONYM_TYPE_RULE);
    createEReference(synonymTypeRuleEClass, SYNONYM_TYPE_RULE__DECL);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    typeDeclEClass.getESuperTypes().add(this.getDeclRule());
    inputsDeclRuleEClass.getESuperTypes().add(this.getDeclRule());
    outputsDeclRuleEClass.getESuperTypes().add(this.getDeclRule());
    varsDeclRuleEClass.getESuperTypes().add(this.getDeclRule());
    varDeclEClass.getESuperTypes().add(this.getDeclRule());
    constsDeclRuleEClass.getESuperTypes().add(this.getDeclRule());
    sharedVarsDeclRuleEClass.getESuperTypes().add(this.getDeclRule());
    defineDeclRuleEClass.getESuperTypes().add(this.getDeclRule());
    instanceDeclEClass.getESuperTypes().add(this.getDeclRule());
    axiomDeclRuleEClass.getESuperTypes().add(this.getDeclRule());
    specDeclRuleEClass.getESuperTypes().add(this.getDeclRule());
    initDeclRuleEClass.getESuperTypes().add(this.getDeclRule());
    nextDeclRuleEClass.getESuperTypes().add(this.getDeclRule());
    callStatementEClass.getESuperTypes().add(this.getStatement());
    assignmentRuleEClass.getESuperTypes().add(this.getStatement());
    varRefEClass.getESuperTypes().add(this.getE13Rule());
    exprRuleEClass.getESuperTypes().add(this.getParenthesisExpr());
    e1RuleEClass.getESuperTypes().add(this.getExprRule());
    e2RuleEClass.getESuperTypes().add(this.getE1Rule());
    e12RuleEClass.getESuperTypes().add(this.getE11Rule());
    enumRefEClass.getESuperTypes().add(this.getE13Rule());
    tupleExprEClass.getESuperTypes().add(this.getE13Rule());
    ifPrimaryExprEClass.getESuperTypes().add(this.getE13Rule());
    parenthesisExprEClass.getESuperTypes().add(this.getE13Rule());
    constRuleEClass.getESuperTypes().add(this.getE13Rule());
    idListRuleEClass.getESuperTypes().add(this.getInputsDeclRule());
    idListRuleEClass.getESuperTypes().add(this.getOutputsDeclRule());
    idListRuleEClass.getESuperTypes().add(this.getSharedVarsDeclRule());
    topLevelEClass.getESuperTypes().add(this.getModelRule());
    moduleEClass.getESuperTypes().add(this.getModuleRule());
    constDeclEClass.getESuperTypes().add(this.getVarDecl());
    functionDeclEClass.getESuperTypes().add(this.getVarDecl());
    procedureDeclEClass.getESuperTypes().add(this.getVarDecl());
    statementRuleEClass.getESuperTypes().add(this.getStatement());
    assignmentEClass.getESuperTypes().add(this.getAssignmentRule());
    enumTypeRuleEClass.getESuperTypes().add(this.getType());
    enumValueEClass.getESuperTypes().add(this.getVarDecl());
    tupleTypeRuleEClass.getESuperTypes().add(this.getType());
    recordTypeRuleEClass.getESuperTypes().add(this.getType());
    arrayTypeRuleEClass.getESuperTypes().add(this.getType());
    synonymTypeRuleEClass.getESuperTypes().add(this.getType());

    // Initialize classes and features; add operations and parameters
    initEClass(modelRuleEClass, ModelRule.class, "ModelRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(moduleRuleEClass, ModuleRule.class, "ModuleRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(declRuleEClass, DeclRule.class, "DeclRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(typeDeclEClass, TypeDecl.class, "TypeDecl", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTypeDecl_Name(), ecorePackage.getEString(), "name", null, 0, 1, TypeDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTypeDecl_T(), this.getType(), null, "t", null, 0, 1, TypeDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(inputsDeclRuleEClass, InputsDeclRule.class, "InputsDeclRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputsDeclRuleEClass, OutputsDeclRule.class, "OutputsDeclRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(varsDeclRuleEClass, VarsDeclRule.class, "VarsDeclRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVarsDeclRule_Vars(), this.getVarDecl(), null, "vars", null, 0, -1, VarsDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVarsDeclRule_T(), this.getType(), null, "t", null, 0, 1, VarsDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(varDeclEClass, VarDecl.class, "VarDecl", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVarDecl_Name(), ecorePackage.getEString(), "name", null, 0, 1, VarDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(constsDeclRuleEClass, ConstsDeclRule.class, "ConstsDeclRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConstsDeclRule_Constants(), this.getVarDecl(), null, "constants", null, 0, -1, ConstsDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConstsDeclRule_T(), this.getType(), null, "t", null, 0, 1, ConstsDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sharedVarsDeclRuleEClass, SharedVarsDeclRule.class, "SharedVarsDeclRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(defineDeclRuleEClass, DefineDeclRule.class, "DefineDeclRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDefineDeclRule_Name(), ecorePackage.getEString(), "name", null, 0, 1, DefineDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDefineDeclRule_L(), this.getIdTypeListRule(), null, "l", null, 0, 1, DefineDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDefineDeclRule_T(), this.getType(), null, "t", null, 0, 1, DefineDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDefineDeclRule_E(), this.getExprRule(), null, "e", null, 0, 1, DefineDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(procReturnArgRuleEClass, ProcReturnArgRule.class, "ProcReturnArgRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getProcReturnArgRule_L(), this.getIdTypeListRule(), null, "l", null, 0, 1, ProcReturnArgRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(requireExprsRuleEClass, RequireExprsRule.class, "RequireExprsRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRequireExprsRule_E(), this.getExprRule(), null, "e", null, 0, 1, RequireExprsRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ensureExprsRuleEClass, EnsureExprsRule.class, "EnsureExprsRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEnsureExprsRule_E(), this.getExprRule(), null, "e", null, 0, 1, EnsureExprsRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(modifiesExprsRuleEClass, ModifiesExprsRule.class, "ModifiesExprsRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModifiesExprsRule_L(), this.getIdListRule(), null, "l", null, 0, 1, ModifiesExprsRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(instanceDeclEClass, InstanceDecl.class, "InstanceDecl", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInstanceDecl_Name(), ecorePackage.getEString(), "name", null, 0, 1, InstanceDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInstanceDecl_Module(), this.getModule(), null, "module", null, 0, 1, InstanceDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInstanceDecl_Args(), this.getArgMapListRule(), null, "args", null, 0, -1, InstanceDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(argMapListRuleEClass, ArgMapListRule.class, "ArgMapListRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getArgMapListRule_Arg(), this.getArgMapRule(), null, "arg", null, 0, -1, ArgMapListRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(argMapRuleEClass, ArgMapRule.class, "ArgMapRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getArgMapRule_Name(), ecorePackage.getEString(), "name", null, 0, 1, ArgMapRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getArgMapRule_E(), this.getExprRule(), null, "e", null, 0, -1, ArgMapRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(axiomDeclRuleEClass, AxiomDeclRule.class, "AxiomDeclRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAxiomDeclRule_N(), ecorePackage.getEString(), "n", null, 0, 1, AxiomDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAxiomDeclRule_E(), this.getExprRule(), null, "e", null, 0, 1, AxiomDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAxiomDeclRule_H(), this.getExprRule(), null, "h", null, 0, 1, AxiomDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(specDeclRuleEClass, SpecDeclRule.class, "SpecDeclRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSpecDeclRule_Prop(), ecorePackage.getEString(), "prop", null, 0, 1, SpecDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSpecDeclRule_Name(), ecorePackage.getEString(), "name", null, 0, 1, SpecDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSpecDeclRule_E(), this.getExprRule(), null, "e", null, 0, 1, SpecDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(initDeclRuleEClass, InitDeclRule.class, "InitDeclRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInitDeclRule_Body(), this.getCompoundStatement(), null, "body", null, 0, 1, InitDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nextDeclRuleEClass, NextDeclRule.class, "NextDeclRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNextDeclRule_Body(), this.getCompoundStatement(), null, "body", null, 0, 1, NextDeclRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementEClass, Statement.class, "Statement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStatement_D(), this.getExprRule(), null, "d", null, 0, 1, Statement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStatement_Name(), ecorePackage.getEString(), "name", null, 0, 1, Statement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStatement_S(), ecorePackage.getEObject(), null, "s", null, 0, 1, Statement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(callStatementEClass, CallStatement.class, "CallStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCallStatement_Lhs(), this.getLhs(), null, "lhs", null, 0, -1, CallStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCallStatement_Target(), this.getProcedureDecl(), null, "target", null, 0, 1, CallStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCallStatement_Exprs(), this.getExprRule(), null, "exprs", null, 0, -1, CallStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(assignmentRuleEClass, AssignmentRule.class, "AssignmentRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(compoundStatementEClass, CompoundStatement.class, "CompoundStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCompoundStatement_Dec(), this.getVarsDeclRule(), null, "dec", null, 0, -1, CompoundStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCompoundStatement_Stmt(), this.getStatement(), null, "stmt", null, 0, -1, CompoundStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lhsEClass, Lhs.class, "Lhs", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLhs_Target(), this.getVarRef(), null, "target", null, 0, 1, Lhs.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLhs_Index(), this.getExprRule(), null, "index", null, 0, -1, Lhs.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(varRefEClass, VarRef.class, "VarRef", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVarRef_Var(), this.getVarDecl(), null, "var", null, 0, 1, VarRef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVarRef_Prime(), ecorePackage.getEString(), "prime", null, 0, 1, VarRef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ifStmtRuleEClass, IfStmtRule.class, "IfStmtRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIfStmtRule_C(), this.getExprRule(), null, "c", null, 0, 1, IfStmtRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfStmtRule_Then(), this.getCompoundStatement(), null, "then", null, 0, 1, IfStmtRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfStmtRule_Else(), this.getCompoundStatement(), null, "else", null, 0, 1, IfStmtRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(caseStmtRuleEClass, CaseStmtRule.class, "CaseStmtRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCaseStmtRule_Cases(), ecorePackage.getEObject(), null, "cases", null, 0, -1, CaseStmtRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(defaultCaseBlockRuleEClass, DefaultCaseBlockRule.class, "DefaultCaseBlockRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDefaultCaseBlockRule_Body(), this.getCompoundStatement(), null, "body", null, 0, 1, DefaultCaseBlockRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(caseBlockRuleEClass, CaseBlockRule.class, "CaseBlockRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCaseBlockRule_E(), this.getExprRule(), null, "e", null, 0, 1, CaseBlockRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseBlockRule_Body(), this.getCompoundStatement(), null, "body", null, 0, 1, CaseBlockRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(forLoopRuleEClass, ForLoopRule.class, "ForLoopRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getForLoopRule_Iterator(), this.getVarDecl(), null, "iterator", null, 0, 1, ForLoopRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getForLoopRule_Lb(), ecorePackage.getEInt(), "lb", null, 0, 1, ForLoopRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getForLoopRule_Ub(), ecorePackage.getEInt(), "ub", null, 0, 1, ForLoopRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForLoopRule_Body(), this.getCompoundStatement(), null, "body", null, 0, 1, ForLoopRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(whileLoopRuleEClass, WhileLoopRule.class, "WhileLoopRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getWhileLoopRule_C(), this.getExprRule(), null, "c", null, 0, 1, WhileLoopRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhileLoopRule_Inv(), this.getInvariantClauseRule(), null, "inv", null, 0, -1, WhileLoopRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhileLoopRule_Stmt(), this.getCompoundStatement(), null, "stmt", null, 0, 1, WhileLoopRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(invariantClauseRuleEClass, InvariantClauseRule.class, "InvariantClauseRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInvariantClauseRule_E(), this.getExprRule(), null, "e", null, 0, 1, InvariantClauseRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(exprRuleEClass, ExprRule.class, "ExprRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(e1RuleEClass, E1Rule.class, "E1Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getE1Rule_Pred(), ecorePackage.getEString(), "pred", null, 0, 1, E1Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getE1Rule_L(), this.getIdTypeListRule(), null, "l", null, 0, 1, E1Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getE1Rule_A(), this.getE1Rule(), null, "a", null, 0, 1, E1Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(e2RuleEClass, E2Rule.class, "E2Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getE2Rule_Z(), this.getE3Rule(), null, "z", null, 0, -1, E2Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getE2Rule_Q(), ecorePackage.getEObject(), null, "q", null, 0, -1, E2Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(e3RuleEClass, E3Rule.class, "E3Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getE3Rule_E(), ecorePackage.getEObject(), null, "e", null, 0, -1, E3Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(e4RuleEClass, E4Rule.class, "E4Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getE4Rule_E(), ecorePackage.getEObject(), null, "e", null, 0, -1, E4Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(e5RuleEClass, E5Rule.class, "E5Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getE5Rule_E(), this.getE6Rule(), null, "e", null, 0, -1, E5Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getE5Rule_Op(), ecorePackage.getEString(), "op", null, 0, 1, E5Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(e6RuleEClass, E6Rule.class, "E6Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getE6Rule_E(), ecorePackage.getEObject(), null, "e", null, 0, -1, E6Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(e7RuleEClass, E7Rule.class, "E7Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getE7Rule_E(), ecorePackage.getEObject(), null, "e", null, 0, -1, E7Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(e8RuleEClass, E8Rule.class, "E8Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getE8Rule_E(), this.getE9Rule(), null, "e", null, 0, -1, E8Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(e9RuleEClass, E9Rule.class, "E9Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getE9Rule_E(), this.getE10Rule(), null, "e", null, 0, -1, E9Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(e10RuleEClass, E10Rule.class, "E10Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getE10Rule_Op(), ecorePackage.getEString(), "op", null, 0, 1, E10Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getE10Rule_E(), this.getE11Rule(), null, "e", null, 0, 1, E10Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(e11RuleEClass, E11Rule.class, "E11Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(e12RuleEClass, E12Rule.class, "E12Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getE12Rule_L(), this.getExprListRule(), null, "l", null, 0, -1, E12Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getE12Rule_E(), this.getExprRule(), null, "e", null, 0, -1, E12Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getE12Rule_J(), this.getE13Rule(), null, "j", null, 0, 1, E12Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getE12Rule_V(), this.getExprListRule(), null, "v", null, 0, 1, E12Rule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(enumRefEClass, EnumRef.class, "EnumRef", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEnumRef__enum(), this.getEnumValue(), null, "_enum", null, 0, 1, EnumRef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(e13RuleEClass, E13Rule.class, "E13Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(tupleExprEClass, TupleExpr.class, "TupleExpr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTupleExpr_E(), this.getExprRule(), null, "e", null, 0, -1, TupleExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ifPrimaryExprEClass, IfPrimaryExpr.class, "IfPrimaryExpr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIfPrimaryExpr_C(), this.getExprRule(), null, "c", null, 0, 1, IfPrimaryExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfPrimaryExpr_E(), this.getExprRule(), null, "e", null, 0, -1, IfPrimaryExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parenthesisExprEClass, ParenthesisExpr.class, "ParenthesisExpr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(constRuleEClass, ConstRule.class, "ConstRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConstRule_V(), ecorePackage.getEString(), "v", null, 0, 1, ConstRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConstRule_D(), ecorePackage.getEInt(), "d", null, 0, 1, ConstRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConstRule_W(), ecorePackage.getEString(), "w", null, 0, 1, ConstRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(typeEClass, Type.class, "Type", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getType_T(), ecorePackage.getEString(), "t", null, 0, 1, Type.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(controlBlockRuleEClass, ControlBlockRule.class, "ControlBlockRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getControlBlockRule_Cmd(), this.getCmdRule(), null, "cmd", null, 0, -1, ControlBlockRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cmdRuleEClass, CmdRule.class, "CmdRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCmdRule_Lhs(), this.getVarDecl(), null, "lhs", null, 0, 1, CmdRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCmdRule_C(), ecorePackage.getEString(), "c", null, 0, 1, CmdRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCmdRule_Lid(), this.getIdListRule(), null, "lid", null, 0, 1, CmdRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCmdRule_Lex(), this.getExprListRule(), null, "lex", null, 0, 1, CmdRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(idListRuleEClass, IdListRule.class, "IdListRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIdListRule_T(), this.getType(), null, "t", null, 0, 1, IdListRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIdListRule_Name(), ecorePackage.getEString(), "name", null, 0, -1, IdListRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIdListRule_L(), this.getIdListRule(), null, "l", null, 0, 1, IdListRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(idTypeListRuleEClass, IdTypeListRule.class, "IdTypeListRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIdTypeListRule_K(), ecorePackage.getEString(), "k", null, 0, -1, IdTypeListRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIdTypeListRule_Z(), ecorePackage.getEString(), "z", null, 0, -1, IdTypeListRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIdTypeListRule_T(), this.getType(), null, "t", null, 0, 1, IdTypeListRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIdTypeListRule_L(), this.getIdTypeListRule(), null, "l", null, 0, 1, IdTypeListRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(exprListRuleEClass, ExprListRule.class, "ExprListRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExprListRule_Exprs(), this.getExprRule(), null, "exprs", null, 0, -1, ExprListRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(topLevelEClass, TopLevel.class, "TopLevel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTopLevel_Rules(), this.getModuleRule(), null, "rules", null, 0, -1, TopLevel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(moduleEClass, uclid.xtext.uclid.Module.class, "Module", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getModule_Name(), ecorePackage.getEString(), "name", null, 0, 1, uclid.xtext.uclid.Module.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModule_D(), this.getDeclRule(), null, "d", null, 0, -1, uclid.xtext.uclid.Module.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModule_E(), this.getControlBlockRule(), null, "e", null, 0, 1, uclid.xtext.uclid.Module.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(constDeclEClass, ConstDecl.class, "ConstDecl", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(functionDeclEClass, FunctionDecl.class, "FunctionDecl", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFunctionDecl_L(), this.getIdTypeListRule(), null, "l", null, 0, 1, FunctionDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunctionDecl_T(), this.getType(), null, "t", null, 0, 1, FunctionDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(procedureDeclEClass, ProcedureDecl.class, "ProcedureDecl", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getProcedureDecl_L(), this.getIdTypeListRule(), null, "l", null, 0, 1, ProcedureDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProcedureDecl_Ret(), this.getProcReturnArgRule(), null, "ret", null, 0, 1, ProcedureDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProcedureDecl_Req(), this.getRequireExprsRule(), null, "req", null, 0, -1, ProcedureDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProcedureDecl_Ensure(), this.getEnsureExprsRule(), null, "ensure", null, 0, -1, ProcedureDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProcedureDecl_Modifies(), this.getModifiesExprsRule(), null, "modifies", null, 0, -1, ProcedureDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProcedureDecl_Body(), this.getCompoundStatement(), null, "body", null, 0, 1, ProcedureDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementRuleEClass, StatementRule.class, "StatementRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(assignmentEClass, Assignment.class, "Assignment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAssignment_Lhs(), this.getLhs(), null, "lhs", null, 0, -1, Assignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAssignment_Exprs(), this.getExprRule(), null, "exprs", null, 0, -1, Assignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(enumTypeRuleEClass, EnumTypeRule.class, "EnumTypeRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEnumTypeRule_Enums(), this.getVarDecl(), null, "enums", null, 0, -1, EnumTypeRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(enumValueEClass, EnumValue.class, "EnumValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(tupleTypeRuleEClass, TupleTypeRule.class, "TupleTypeRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTupleTypeRule_Tuple(), this.getType(), null, "tuple", null, 0, -1, TupleTypeRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(recordTypeRuleEClass, RecordTypeRule.class, "RecordTypeRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRecordTypeRule_Fields(), this.getIdTypeListRule(), null, "fields", null, 0, -1, RecordTypeRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arrayTypeRuleEClass, ArrayTypeRule.class, "ArrayTypeRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getArrayTypeRule_B(), this.getType(), null, "b", null, 0, -1, ArrayTypeRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getArrayTypeRule_Base(), this.getType(), null, "base", null, 0, -1, ArrayTypeRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(synonymTypeRuleEClass, SynonymTypeRule.class, "SynonymTypeRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSynonymTypeRule_Decl(), this.getTypeDecl(), null, "decl", null, 0, 1, SynonymTypeRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //UclidPackageImpl

/**
 * generated by Xtext 2.22.0
 */
package uclid.xtext.uclid.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uclid.xtext.uclid.CompoundStatement;
import uclid.xtext.uclid.EnsureExprsRule;
import uclid.xtext.uclid.IdTypeListRule;
import uclid.xtext.uclid.ModifiesExprsRule;
import uclid.xtext.uclid.ProcReturnArgRule;
import uclid.xtext.uclid.ProcedureDecl;
import uclid.xtext.uclid.RequireExprsRule;
import uclid.xtext.uclid.UclidPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Procedure Decl</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uclid.xtext.uclid.impl.ProcedureDeclImpl#getL <em>L</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.ProcedureDeclImpl#getRet <em>Ret</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.ProcedureDeclImpl#getReq <em>Req</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.ProcedureDeclImpl#getEnsure <em>Ensure</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.ProcedureDeclImpl#getModifies <em>Modifies</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.ProcedureDeclImpl#getBody <em>Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProcedureDeclImpl extends VarDeclImpl implements ProcedureDecl
{
  /**
   * The cached value of the '{@link #getL() <em>L</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getL()
   * @generated
   * @ordered
   */
  protected IdTypeListRule l;

  /**
   * The cached value of the '{@link #getRet() <em>Ret</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRet()
   * @generated
   * @ordered
   */
  protected ProcReturnArgRule ret;

  /**
   * The cached value of the '{@link #getReq() <em>Req</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReq()
   * @generated
   * @ordered
   */
  protected EList<RequireExprsRule> req;

  /**
   * The cached value of the '{@link #getEnsure() <em>Ensure</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnsure()
   * @generated
   * @ordered
   */
  protected EList<EnsureExprsRule> ensure;

  /**
   * The cached value of the '{@link #getModifies() <em>Modifies</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModifies()
   * @generated
   * @ordered
   */
  protected EList<ModifiesExprsRule> modifies;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected CompoundStatement body;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcedureDeclImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UclidPackage.Literals.PROCEDURE_DECL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IdTypeListRule getL()
  {
    return l;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetL(IdTypeListRule newL, NotificationChain msgs)
  {
    IdTypeListRule oldL = l;
    l = newL;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UclidPackage.PROCEDURE_DECL__L, oldL, newL);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setL(IdTypeListRule newL)
  {
    if (newL != l)
    {
      NotificationChain msgs = null;
      if (l != null)
        msgs = ((InternalEObject)l).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UclidPackage.PROCEDURE_DECL__L, null, msgs);
      if (newL != null)
        msgs = ((InternalEObject)newL).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UclidPackage.PROCEDURE_DECL__L, null, msgs);
      msgs = basicSetL(newL, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UclidPackage.PROCEDURE_DECL__L, newL, newL));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcReturnArgRule getRet()
  {
    return ret;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRet(ProcReturnArgRule newRet, NotificationChain msgs)
  {
    ProcReturnArgRule oldRet = ret;
    ret = newRet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UclidPackage.PROCEDURE_DECL__RET, oldRet, newRet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRet(ProcReturnArgRule newRet)
  {
    if (newRet != ret)
    {
      NotificationChain msgs = null;
      if (ret != null)
        msgs = ((InternalEObject)ret).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UclidPackage.PROCEDURE_DECL__RET, null, msgs);
      if (newRet != null)
        msgs = ((InternalEObject)newRet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UclidPackage.PROCEDURE_DECL__RET, null, msgs);
      msgs = basicSetRet(newRet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UclidPackage.PROCEDURE_DECL__RET, newRet, newRet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RequireExprsRule> getReq()
  {
    if (req == null)
    {
      req = new EObjectContainmentEList<RequireExprsRule>(RequireExprsRule.class, this, UclidPackage.PROCEDURE_DECL__REQ);
    }
    return req;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EnsureExprsRule> getEnsure()
  {
    if (ensure == null)
    {
      ensure = new EObjectContainmentEList<EnsureExprsRule>(EnsureExprsRule.class, this, UclidPackage.PROCEDURE_DECL__ENSURE);
    }
    return ensure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ModifiesExprsRule> getModifies()
  {
    if (modifies == null)
    {
      modifies = new EObjectContainmentEList<ModifiesExprsRule>(ModifiesExprsRule.class, this, UclidPackage.PROCEDURE_DECL__MODIFIES);
    }
    return modifies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompoundStatement getBody()
  {
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBody(CompoundStatement newBody, NotificationChain msgs)
  {
    CompoundStatement oldBody = body;
    body = newBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UclidPackage.PROCEDURE_DECL__BODY, oldBody, newBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBody(CompoundStatement newBody)
  {
    if (newBody != body)
    {
      NotificationChain msgs = null;
      if (body != null)
        msgs = ((InternalEObject)body).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UclidPackage.PROCEDURE_DECL__BODY, null, msgs);
      if (newBody != null)
        msgs = ((InternalEObject)newBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UclidPackage.PROCEDURE_DECL__BODY, null, msgs);
      msgs = basicSetBody(newBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UclidPackage.PROCEDURE_DECL__BODY, newBody, newBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UclidPackage.PROCEDURE_DECL__L:
        return basicSetL(null, msgs);
      case UclidPackage.PROCEDURE_DECL__RET:
        return basicSetRet(null, msgs);
      case UclidPackage.PROCEDURE_DECL__REQ:
        return ((InternalEList<?>)getReq()).basicRemove(otherEnd, msgs);
      case UclidPackage.PROCEDURE_DECL__ENSURE:
        return ((InternalEList<?>)getEnsure()).basicRemove(otherEnd, msgs);
      case UclidPackage.PROCEDURE_DECL__MODIFIES:
        return ((InternalEList<?>)getModifies()).basicRemove(otherEnd, msgs);
      case UclidPackage.PROCEDURE_DECL__BODY:
        return basicSetBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UclidPackage.PROCEDURE_DECL__L:
        return getL();
      case UclidPackage.PROCEDURE_DECL__RET:
        return getRet();
      case UclidPackage.PROCEDURE_DECL__REQ:
        return getReq();
      case UclidPackage.PROCEDURE_DECL__ENSURE:
        return getEnsure();
      case UclidPackage.PROCEDURE_DECL__MODIFIES:
        return getModifies();
      case UclidPackage.PROCEDURE_DECL__BODY:
        return getBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UclidPackage.PROCEDURE_DECL__L:
        setL((IdTypeListRule)newValue);
        return;
      case UclidPackage.PROCEDURE_DECL__RET:
        setRet((ProcReturnArgRule)newValue);
        return;
      case UclidPackage.PROCEDURE_DECL__REQ:
        getReq().clear();
        getReq().addAll((Collection<? extends RequireExprsRule>)newValue);
        return;
      case UclidPackage.PROCEDURE_DECL__ENSURE:
        getEnsure().clear();
        getEnsure().addAll((Collection<? extends EnsureExprsRule>)newValue);
        return;
      case UclidPackage.PROCEDURE_DECL__MODIFIES:
        getModifies().clear();
        getModifies().addAll((Collection<? extends ModifiesExprsRule>)newValue);
        return;
      case UclidPackage.PROCEDURE_DECL__BODY:
        setBody((CompoundStatement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UclidPackage.PROCEDURE_DECL__L:
        setL((IdTypeListRule)null);
        return;
      case UclidPackage.PROCEDURE_DECL__RET:
        setRet((ProcReturnArgRule)null);
        return;
      case UclidPackage.PROCEDURE_DECL__REQ:
        getReq().clear();
        return;
      case UclidPackage.PROCEDURE_DECL__ENSURE:
        getEnsure().clear();
        return;
      case UclidPackage.PROCEDURE_DECL__MODIFIES:
        getModifies().clear();
        return;
      case UclidPackage.PROCEDURE_DECL__BODY:
        setBody((CompoundStatement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UclidPackage.PROCEDURE_DECL__L:
        return l != null;
      case UclidPackage.PROCEDURE_DECL__RET:
        return ret != null;
      case UclidPackage.PROCEDURE_DECL__REQ:
        return req != null && !req.isEmpty();
      case UclidPackage.PROCEDURE_DECL__ENSURE:
        return ensure != null && !ensure.isEmpty();
      case UclidPackage.PROCEDURE_DECL__MODIFIES:
        return modifies != null && !modifies.isEmpty();
      case UclidPackage.PROCEDURE_DECL__BODY:
        return body != null;
    }
    return super.eIsSet(featureID);
  }

} //ProcedureDeclImpl

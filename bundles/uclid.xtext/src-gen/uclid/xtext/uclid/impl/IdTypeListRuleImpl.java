/**
 * generated by Xtext 2.22.0
 */
package uclid.xtext.uclid.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import uclid.xtext.uclid.IdTypeListRule;
import uclid.xtext.uclid.Type;
import uclid.xtext.uclid.UclidPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Id Type List Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uclid.xtext.uclid.impl.IdTypeListRuleImpl#getK <em>K</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.IdTypeListRuleImpl#getZ <em>Z</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.IdTypeListRuleImpl#getT <em>T</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.IdTypeListRuleImpl#getL <em>L</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IdTypeListRuleImpl extends MinimalEObjectImpl.Container implements IdTypeListRule
{
  /**
   * The cached value of the '{@link #getK() <em>K</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getK()
   * @generated
   * @ordered
   */
  protected EList<String> k;

  /**
   * The cached value of the '{@link #getZ() <em>Z</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getZ()
   * @generated
   * @ordered
   */
  protected EList<String> z;

  /**
   * The cached value of the '{@link #getT() <em>T</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getT()
   * @generated
   * @ordered
   */
  protected Type t;

  /**
   * The cached value of the '{@link #getL() <em>L</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getL()
   * @generated
   * @ordered
   */
  protected IdTypeListRule l;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IdTypeListRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UclidPackage.Literals.ID_TYPE_LIST_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getK()
  {
    if (k == null)
    {
      k = new EDataTypeEList<String>(String.class, this, UclidPackage.ID_TYPE_LIST_RULE__K);
    }
    return k;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getZ()
  {
    if (z == null)
    {
      z = new EDataTypeEList<String>(String.class, this, UclidPackage.ID_TYPE_LIST_RULE__Z);
    }
    return z;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type getT()
  {
    return t;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetT(Type newT, NotificationChain msgs)
  {
    Type oldT = t;
    t = newT;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UclidPackage.ID_TYPE_LIST_RULE__T, oldT, newT);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setT(Type newT)
  {
    if (newT != t)
    {
      NotificationChain msgs = null;
      if (t != null)
        msgs = ((InternalEObject)t).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UclidPackage.ID_TYPE_LIST_RULE__T, null, msgs);
      if (newT != null)
        msgs = ((InternalEObject)newT).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UclidPackage.ID_TYPE_LIST_RULE__T, null, msgs);
      msgs = basicSetT(newT, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UclidPackage.ID_TYPE_LIST_RULE__T, newT, newT));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IdTypeListRule getL()
  {
    return l;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetL(IdTypeListRule newL, NotificationChain msgs)
  {
    IdTypeListRule oldL = l;
    l = newL;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UclidPackage.ID_TYPE_LIST_RULE__L, oldL, newL);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setL(IdTypeListRule newL)
  {
    if (newL != l)
    {
      NotificationChain msgs = null;
      if (l != null)
        msgs = ((InternalEObject)l).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UclidPackage.ID_TYPE_LIST_RULE__L, null, msgs);
      if (newL != null)
        msgs = ((InternalEObject)newL).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UclidPackage.ID_TYPE_LIST_RULE__L, null, msgs);
      msgs = basicSetL(newL, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UclidPackage.ID_TYPE_LIST_RULE__L, newL, newL));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UclidPackage.ID_TYPE_LIST_RULE__T:
        return basicSetT(null, msgs);
      case UclidPackage.ID_TYPE_LIST_RULE__L:
        return basicSetL(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UclidPackage.ID_TYPE_LIST_RULE__K:
        return getK();
      case UclidPackage.ID_TYPE_LIST_RULE__Z:
        return getZ();
      case UclidPackage.ID_TYPE_LIST_RULE__T:
        return getT();
      case UclidPackage.ID_TYPE_LIST_RULE__L:
        return getL();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UclidPackage.ID_TYPE_LIST_RULE__K:
        getK().clear();
        getK().addAll((Collection<? extends String>)newValue);
        return;
      case UclidPackage.ID_TYPE_LIST_RULE__Z:
        getZ().clear();
        getZ().addAll((Collection<? extends String>)newValue);
        return;
      case UclidPackage.ID_TYPE_LIST_RULE__T:
        setT((Type)newValue);
        return;
      case UclidPackage.ID_TYPE_LIST_RULE__L:
        setL((IdTypeListRule)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UclidPackage.ID_TYPE_LIST_RULE__K:
        getK().clear();
        return;
      case UclidPackage.ID_TYPE_LIST_RULE__Z:
        getZ().clear();
        return;
      case UclidPackage.ID_TYPE_LIST_RULE__T:
        setT((Type)null);
        return;
      case UclidPackage.ID_TYPE_LIST_RULE__L:
        setL((IdTypeListRule)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UclidPackage.ID_TYPE_LIST_RULE__K:
        return k != null && !k.isEmpty();
      case UclidPackage.ID_TYPE_LIST_RULE__Z:
        return z != null && !z.isEmpty();
      case UclidPackage.ID_TYPE_LIST_RULE__T:
        return t != null;
      case UclidPackage.ID_TYPE_LIST_RULE__L:
        return l != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (k: ");
    result.append(k);
    result.append(", z: ");
    result.append(z);
    result.append(')');
    return result.toString();
  }

} //IdTypeListRuleImpl

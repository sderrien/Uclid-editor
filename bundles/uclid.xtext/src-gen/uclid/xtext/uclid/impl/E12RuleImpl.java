/**
 * generated by Xtext 2.24.0
 */
package uclid.xtext.uclid.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uclid.xtext.uclid.E12Rule;
import uclid.xtext.uclid.E13Rule;
import uclid.xtext.uclid.ExprListRule;
import uclid.xtext.uclid.ExprRule;
import uclid.xtext.uclid.UclidPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>E12 Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uclid.xtext.uclid.impl.E12RuleImpl#getL <em>L</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.E12RuleImpl#getE <em>E</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.E12RuleImpl#getJ <em>J</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.E12RuleImpl#getV <em>V</em>}</li>
 * </ul>
 *
 * @generated
 */
public class E12RuleImpl extends E11RuleImpl implements E12Rule
{
  /**
   * The cached value of the '{@link #getL() <em>L</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getL()
   * @generated
   * @ordered
   */
  protected EList<ExprListRule> l;

  /**
   * The cached value of the '{@link #getE() <em>E</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getE()
   * @generated
   * @ordered
   */
  protected EList<ExprRule> e;

  /**
   * The cached value of the '{@link #getJ() <em>J</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJ()
   * @generated
   * @ordered
   */
  protected E13Rule j;

  /**
   * The cached value of the '{@link #getV() <em>V</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getV()
   * @generated
   * @ordered
   */
  protected ExprListRule v;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected E12RuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UclidPackage.Literals.E12_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExprListRule> getL()
  {
    if (l == null)
    {
      l = new EObjectContainmentEList<ExprListRule>(ExprListRule.class, this, UclidPackage.E12_RULE__L);
    }
    return l;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExprRule> getE()
  {
    if (e == null)
    {
      e = new EObjectContainmentEList<ExprRule>(ExprRule.class, this, UclidPackage.E12_RULE__E);
    }
    return e;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public E13Rule getJ()
  {
    return j;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetJ(E13Rule newJ, NotificationChain msgs)
  {
    E13Rule oldJ = j;
    j = newJ;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UclidPackage.E12_RULE__J, oldJ, newJ);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJ(E13Rule newJ)
  {
    if (newJ != j)
    {
      NotificationChain msgs = null;
      if (j != null)
        msgs = ((InternalEObject)j).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UclidPackage.E12_RULE__J, null, msgs);
      if (newJ != null)
        msgs = ((InternalEObject)newJ).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UclidPackage.E12_RULE__J, null, msgs);
      msgs = basicSetJ(newJ, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UclidPackage.E12_RULE__J, newJ, newJ));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprListRule getV()
  {
    return v;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetV(ExprListRule newV, NotificationChain msgs)
  {
    ExprListRule oldV = v;
    v = newV;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UclidPackage.E12_RULE__V, oldV, newV);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setV(ExprListRule newV)
  {
    if (newV != v)
    {
      NotificationChain msgs = null;
      if (v != null)
        msgs = ((InternalEObject)v).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UclidPackage.E12_RULE__V, null, msgs);
      if (newV != null)
        msgs = ((InternalEObject)newV).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UclidPackage.E12_RULE__V, null, msgs);
      msgs = basicSetV(newV, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UclidPackage.E12_RULE__V, newV, newV));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UclidPackage.E12_RULE__L:
        return ((InternalEList<?>)getL()).basicRemove(otherEnd, msgs);
      case UclidPackage.E12_RULE__E:
        return ((InternalEList<?>)getE()).basicRemove(otherEnd, msgs);
      case UclidPackage.E12_RULE__J:
        return basicSetJ(null, msgs);
      case UclidPackage.E12_RULE__V:
        return basicSetV(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UclidPackage.E12_RULE__L:
        return getL();
      case UclidPackage.E12_RULE__E:
        return getE();
      case UclidPackage.E12_RULE__J:
        return getJ();
      case UclidPackage.E12_RULE__V:
        return getV();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UclidPackage.E12_RULE__L:
        getL().clear();
        getL().addAll((Collection<? extends ExprListRule>)newValue);
        return;
      case UclidPackage.E12_RULE__E:
        getE().clear();
        getE().addAll((Collection<? extends ExprRule>)newValue);
        return;
      case UclidPackage.E12_RULE__J:
        setJ((E13Rule)newValue);
        return;
      case UclidPackage.E12_RULE__V:
        setV((ExprListRule)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UclidPackage.E12_RULE__L:
        getL().clear();
        return;
      case UclidPackage.E12_RULE__E:
        getE().clear();
        return;
      case UclidPackage.E12_RULE__J:
        setJ((E13Rule)null);
        return;
      case UclidPackage.E12_RULE__V:
        setV((ExprListRule)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UclidPackage.E12_RULE__L:
        return l != null && !l.isEmpty();
      case UclidPackage.E12_RULE__E:
        return e != null && !e.isEmpty();
      case UclidPackage.E12_RULE__J:
        return j != null;
      case UclidPackage.E12_RULE__V:
        return v != null;
    }
    return super.eIsSet(featureID);
  }

} //E12RuleImpl

/**
 * generated by Xtext 2.22.0
 */
package uclid.xtext.uclid.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uclid.xtext.uclid.CompoundStatement;
import uclid.xtext.uclid.ForLoopRule;
import uclid.xtext.uclid.UclidPackage;
import uclid.xtext.uclid.VarDecl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Loop Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uclid.xtext.uclid.impl.ForLoopRuleImpl#getIterator <em>Iterator</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.ForLoopRuleImpl#getLb <em>Lb</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.ForLoopRuleImpl#getUb <em>Ub</em>}</li>
 *   <li>{@link uclid.xtext.uclid.impl.ForLoopRuleImpl#getBody <em>Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForLoopRuleImpl extends MinimalEObjectImpl.Container implements ForLoopRule
{
  /**
   * The cached value of the '{@link #getIterator() <em>Iterator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIterator()
   * @generated
   * @ordered
   */
  protected VarDecl iterator;

  /**
   * The default value of the '{@link #getLb() <em>Lb</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLb()
   * @generated
   * @ordered
   */
  protected static final int LB_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getLb() <em>Lb</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLb()
   * @generated
   * @ordered
   */
  protected int lb = LB_EDEFAULT;

  /**
   * The default value of the '{@link #getUb() <em>Ub</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUb()
   * @generated
   * @ordered
   */
  protected static final int UB_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getUb() <em>Ub</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUb()
   * @generated
   * @ordered
   */
  protected int ub = UB_EDEFAULT;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected CompoundStatement body;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForLoopRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UclidPackage.Literals.FOR_LOOP_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDecl getIterator()
  {
    return iterator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIterator(VarDecl newIterator, NotificationChain msgs)
  {
    VarDecl oldIterator = iterator;
    iterator = newIterator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UclidPackage.FOR_LOOP_RULE__ITERATOR, oldIterator, newIterator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIterator(VarDecl newIterator)
  {
    if (newIterator != iterator)
    {
      NotificationChain msgs = null;
      if (iterator != null)
        msgs = ((InternalEObject)iterator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UclidPackage.FOR_LOOP_RULE__ITERATOR, null, msgs);
      if (newIterator != null)
        msgs = ((InternalEObject)newIterator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UclidPackage.FOR_LOOP_RULE__ITERATOR, null, msgs);
      msgs = basicSetIterator(newIterator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UclidPackage.FOR_LOOP_RULE__ITERATOR, newIterator, newIterator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getLb()
  {
    return lb;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLb(int newLb)
  {
    int oldLb = lb;
    lb = newLb;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UclidPackage.FOR_LOOP_RULE__LB, oldLb, lb));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getUb()
  {
    return ub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUb(int newUb)
  {
    int oldUb = ub;
    ub = newUb;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UclidPackage.FOR_LOOP_RULE__UB, oldUb, ub));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompoundStatement getBody()
  {
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBody(CompoundStatement newBody, NotificationChain msgs)
  {
    CompoundStatement oldBody = body;
    body = newBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UclidPackage.FOR_LOOP_RULE__BODY, oldBody, newBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBody(CompoundStatement newBody)
  {
    if (newBody != body)
    {
      NotificationChain msgs = null;
      if (body != null)
        msgs = ((InternalEObject)body).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UclidPackage.FOR_LOOP_RULE__BODY, null, msgs);
      if (newBody != null)
        msgs = ((InternalEObject)newBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UclidPackage.FOR_LOOP_RULE__BODY, null, msgs);
      msgs = basicSetBody(newBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UclidPackage.FOR_LOOP_RULE__BODY, newBody, newBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UclidPackage.FOR_LOOP_RULE__ITERATOR:
        return basicSetIterator(null, msgs);
      case UclidPackage.FOR_LOOP_RULE__BODY:
        return basicSetBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UclidPackage.FOR_LOOP_RULE__ITERATOR:
        return getIterator();
      case UclidPackage.FOR_LOOP_RULE__LB:
        return getLb();
      case UclidPackage.FOR_LOOP_RULE__UB:
        return getUb();
      case UclidPackage.FOR_LOOP_RULE__BODY:
        return getBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UclidPackage.FOR_LOOP_RULE__ITERATOR:
        setIterator((VarDecl)newValue);
        return;
      case UclidPackage.FOR_LOOP_RULE__LB:
        setLb((Integer)newValue);
        return;
      case UclidPackage.FOR_LOOP_RULE__UB:
        setUb((Integer)newValue);
        return;
      case UclidPackage.FOR_LOOP_RULE__BODY:
        setBody((CompoundStatement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UclidPackage.FOR_LOOP_RULE__ITERATOR:
        setIterator((VarDecl)null);
        return;
      case UclidPackage.FOR_LOOP_RULE__LB:
        setLb(LB_EDEFAULT);
        return;
      case UclidPackage.FOR_LOOP_RULE__UB:
        setUb(UB_EDEFAULT);
        return;
      case UclidPackage.FOR_LOOP_RULE__BODY:
        setBody((CompoundStatement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UclidPackage.FOR_LOOP_RULE__ITERATOR:
        return iterator != null;
      case UclidPackage.FOR_LOOP_RULE__LB:
        return lb != LB_EDEFAULT;
      case UclidPackage.FOR_LOOP_RULE__UB:
        return ub != UB_EDEFAULT;
      case UclidPackage.FOR_LOOP_RULE__BODY:
        return body != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (lb: ");
    result.append(lb);
    result.append(", ub: ");
    result.append(ub);
    result.append(')');
    return result.toString();
  }

} //ForLoopRuleImpl

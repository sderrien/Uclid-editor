/**
 * generated by Xtext 2.22.0
 */
package uclid.xtext.uclid.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import uclid.xtext.uclid.ArgMapListRule;
import uclid.xtext.uclid.ArgMapRule;
import uclid.xtext.uclid.ArrayTypeRule;
import uclid.xtext.uclid.Assignment;
import uclid.xtext.uclid.AssignmentRule;
import uclid.xtext.uclid.AxiomDeclRule;
import uclid.xtext.uclid.CallStatement;
import uclid.xtext.uclid.CaseBlockRule;
import uclid.xtext.uclid.CaseStmtRule;
import uclid.xtext.uclid.CmdRule;
import uclid.xtext.uclid.CompoundStatement;
import uclid.xtext.uclid.ConstDecl;
import uclid.xtext.uclid.ConstRule;
import uclid.xtext.uclid.ConstsDeclRule;
import uclid.xtext.uclid.ControlBlockRule;
import uclid.xtext.uclid.DeclRule;
import uclid.xtext.uclid.DefaultCaseBlockRule;
import uclid.xtext.uclid.DefineDeclRule;
import uclid.xtext.uclid.E10Rule;
import uclid.xtext.uclid.E11Rule;
import uclid.xtext.uclid.E12Rule;
import uclid.xtext.uclid.E13Rule;
import uclid.xtext.uclid.E1Rule;
import uclid.xtext.uclid.E2Rule;
import uclid.xtext.uclid.E3Rule;
import uclid.xtext.uclid.E4Rule;
import uclid.xtext.uclid.E5Rule;
import uclid.xtext.uclid.E6Rule;
import uclid.xtext.uclid.E7Rule;
import uclid.xtext.uclid.E8Rule;
import uclid.xtext.uclid.E9Rule;
import uclid.xtext.uclid.EnsureExprsRule;
import uclid.xtext.uclid.EnumRef;
import uclid.xtext.uclid.EnumTypeRule;
import uclid.xtext.uclid.EnumValue;
import uclid.xtext.uclid.ExprListRule;
import uclid.xtext.uclid.ExprRule;
import uclid.xtext.uclid.ForLoopRule;
import uclid.xtext.uclid.FunctionDecl;
import uclid.xtext.uclid.IdListRule;
import uclid.xtext.uclid.IdTypeListRule;
import uclid.xtext.uclid.IfPrimaryExpr;
import uclid.xtext.uclid.IfStmtRule;
import uclid.xtext.uclid.InitDeclRule;
import uclid.xtext.uclid.InputsDeclRule;
import uclid.xtext.uclid.InstanceDecl;
import uclid.xtext.uclid.InvariantClauseRule;
import uclid.xtext.uclid.Lhs;
import uclid.xtext.uclid.ModelRule;
import uclid.xtext.uclid.ModifiesExprsRule;
import uclid.xtext.uclid.ModuleRule;
import uclid.xtext.uclid.NextDeclRule;
import uclid.xtext.uclid.OutputsDeclRule;
import uclid.xtext.uclid.ParenthesisExpr;
import uclid.xtext.uclid.ProcReturnArgRule;
import uclid.xtext.uclid.ProcedureDecl;
import uclid.xtext.uclid.RecordTypeRule;
import uclid.xtext.uclid.RequireExprsRule;
import uclid.xtext.uclid.SharedVarsDeclRule;
import uclid.xtext.uclid.SpecDeclRule;
import uclid.xtext.uclid.Statement;
import uclid.xtext.uclid.StatementRule;
import uclid.xtext.uclid.SynonymTypeRule;
import uclid.xtext.uclid.TopLevel;
import uclid.xtext.uclid.TupleExpr;
import uclid.xtext.uclid.TupleTypeRule;
import uclid.xtext.uclid.Type;
import uclid.xtext.uclid.TypeDecl;
import uclid.xtext.uclid.UclidPackage;
import uclid.xtext.uclid.VarDecl;
import uclid.xtext.uclid.VarRef;
import uclid.xtext.uclid.VarsDeclRule;
import uclid.xtext.uclid.WhileLoopRule;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see uclid.xtext.uclid.UclidPackage
 * @generated
 */
public class UclidSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static UclidPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UclidSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = UclidPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case UclidPackage.MODEL_RULE:
      {
        ModelRule modelRule = (ModelRule)theEObject;
        T result = caseModelRule(modelRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.MODULE_RULE:
      {
        ModuleRule moduleRule = (ModuleRule)theEObject;
        T result = caseModuleRule(moduleRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.DECL_RULE:
      {
        DeclRule declRule = (DeclRule)theEObject;
        T result = caseDeclRule(declRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.TYPE_DECL:
      {
        TypeDecl typeDecl = (TypeDecl)theEObject;
        T result = caseTypeDecl(typeDecl);
        if (result == null) result = caseDeclRule(typeDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.INPUTS_DECL_RULE:
      {
        InputsDeclRule inputsDeclRule = (InputsDeclRule)theEObject;
        T result = caseInputsDeclRule(inputsDeclRule);
        if (result == null) result = caseDeclRule(inputsDeclRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.OUTPUTS_DECL_RULE:
      {
        OutputsDeclRule outputsDeclRule = (OutputsDeclRule)theEObject;
        T result = caseOutputsDeclRule(outputsDeclRule);
        if (result == null) result = caseDeclRule(outputsDeclRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.VARS_DECL_RULE:
      {
        VarsDeclRule varsDeclRule = (VarsDeclRule)theEObject;
        T result = caseVarsDeclRule(varsDeclRule);
        if (result == null) result = caseDeclRule(varsDeclRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.VAR_DECL:
      {
        VarDecl varDecl = (VarDecl)theEObject;
        T result = caseVarDecl(varDecl);
        if (result == null) result = caseDeclRule(varDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.CONSTS_DECL_RULE:
      {
        ConstsDeclRule constsDeclRule = (ConstsDeclRule)theEObject;
        T result = caseConstsDeclRule(constsDeclRule);
        if (result == null) result = caseDeclRule(constsDeclRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.SHARED_VARS_DECL_RULE:
      {
        SharedVarsDeclRule sharedVarsDeclRule = (SharedVarsDeclRule)theEObject;
        T result = caseSharedVarsDeclRule(sharedVarsDeclRule);
        if (result == null) result = caseDeclRule(sharedVarsDeclRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.DEFINE_DECL_RULE:
      {
        DefineDeclRule defineDeclRule = (DefineDeclRule)theEObject;
        T result = caseDefineDeclRule(defineDeclRule);
        if (result == null) result = caseDeclRule(defineDeclRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.PROC_RETURN_ARG_RULE:
      {
        ProcReturnArgRule procReturnArgRule = (ProcReturnArgRule)theEObject;
        T result = caseProcReturnArgRule(procReturnArgRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.REQUIRE_EXPRS_RULE:
      {
        RequireExprsRule requireExprsRule = (RequireExprsRule)theEObject;
        T result = caseRequireExprsRule(requireExprsRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.ENSURE_EXPRS_RULE:
      {
        EnsureExprsRule ensureExprsRule = (EnsureExprsRule)theEObject;
        T result = caseEnsureExprsRule(ensureExprsRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.MODIFIES_EXPRS_RULE:
      {
        ModifiesExprsRule modifiesExprsRule = (ModifiesExprsRule)theEObject;
        T result = caseModifiesExprsRule(modifiesExprsRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.INSTANCE_DECL:
      {
        InstanceDecl instanceDecl = (InstanceDecl)theEObject;
        T result = caseInstanceDecl(instanceDecl);
        if (result == null) result = caseDeclRule(instanceDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.ARG_MAP_LIST_RULE:
      {
        ArgMapListRule argMapListRule = (ArgMapListRule)theEObject;
        T result = caseArgMapListRule(argMapListRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.ARG_MAP_RULE:
      {
        ArgMapRule argMapRule = (ArgMapRule)theEObject;
        T result = caseArgMapRule(argMapRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.AXIOM_DECL_RULE:
      {
        AxiomDeclRule axiomDeclRule = (AxiomDeclRule)theEObject;
        T result = caseAxiomDeclRule(axiomDeclRule);
        if (result == null) result = caseDeclRule(axiomDeclRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.SPEC_DECL_RULE:
      {
        SpecDeclRule specDeclRule = (SpecDeclRule)theEObject;
        T result = caseSpecDeclRule(specDeclRule);
        if (result == null) result = caseDeclRule(specDeclRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.INIT_DECL_RULE:
      {
        InitDeclRule initDeclRule = (InitDeclRule)theEObject;
        T result = caseInitDeclRule(initDeclRule);
        if (result == null) result = caseDeclRule(initDeclRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.NEXT_DECL_RULE:
      {
        NextDeclRule nextDeclRule = (NextDeclRule)theEObject;
        T result = caseNextDeclRule(nextDeclRule);
        if (result == null) result = caseDeclRule(nextDeclRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.CALL_STATEMENT:
      {
        CallStatement callStatement = (CallStatement)theEObject;
        T result = caseCallStatement(callStatement);
        if (result == null) result = caseStatement(callStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.ASSIGNMENT_RULE:
      {
        AssignmentRule assignmentRule = (AssignmentRule)theEObject;
        T result = caseAssignmentRule(assignmentRule);
        if (result == null) result = caseStatement(assignmentRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.COMPOUND_STATEMENT:
      {
        CompoundStatement compoundStatement = (CompoundStatement)theEObject;
        T result = caseCompoundStatement(compoundStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.LHS:
      {
        Lhs lhs = (Lhs)theEObject;
        T result = caseLhs(lhs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.VAR_REF:
      {
        VarRef varRef = (VarRef)theEObject;
        T result = caseVarRef(varRef);
        if (result == null) result = caseE13Rule(varRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.IF_STMT_RULE:
      {
        IfStmtRule ifStmtRule = (IfStmtRule)theEObject;
        T result = caseIfStmtRule(ifStmtRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.CASE_STMT_RULE:
      {
        CaseStmtRule caseStmtRule = (CaseStmtRule)theEObject;
        T result = caseCaseStmtRule(caseStmtRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.DEFAULT_CASE_BLOCK_RULE:
      {
        DefaultCaseBlockRule defaultCaseBlockRule = (DefaultCaseBlockRule)theEObject;
        T result = caseDefaultCaseBlockRule(defaultCaseBlockRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.CASE_BLOCK_RULE:
      {
        CaseBlockRule caseBlockRule = (CaseBlockRule)theEObject;
        T result = caseCaseBlockRule(caseBlockRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.FOR_LOOP_RULE:
      {
        ForLoopRule forLoopRule = (ForLoopRule)theEObject;
        T result = caseForLoopRule(forLoopRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.WHILE_LOOP_RULE:
      {
        WhileLoopRule whileLoopRule = (WhileLoopRule)theEObject;
        T result = caseWhileLoopRule(whileLoopRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.INVARIANT_CLAUSE_RULE:
      {
        InvariantClauseRule invariantClauseRule = (InvariantClauseRule)theEObject;
        T result = caseInvariantClauseRule(invariantClauseRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.EXPR_RULE:
      {
        ExprRule exprRule = (ExprRule)theEObject;
        T result = caseExprRule(exprRule);
        if (result == null) result = caseParenthesisExpr(exprRule);
        if (result == null) result = caseE13Rule(exprRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E1_RULE:
      {
        E1Rule e1Rule = (E1Rule)theEObject;
        T result = caseE1Rule(e1Rule);
        if (result == null) result = caseExprRule(e1Rule);
        if (result == null) result = caseParenthesisExpr(e1Rule);
        if (result == null) result = caseE13Rule(e1Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E2_RULE:
      {
        E2Rule e2Rule = (E2Rule)theEObject;
        T result = caseE2Rule(e2Rule);
        if (result == null) result = caseE1Rule(e2Rule);
        if (result == null) result = caseExprRule(e2Rule);
        if (result == null) result = caseParenthesisExpr(e2Rule);
        if (result == null) result = caseE13Rule(e2Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E3_RULE:
      {
        E3Rule e3Rule = (E3Rule)theEObject;
        T result = caseE3Rule(e3Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E4_RULE:
      {
        E4Rule e4Rule = (E4Rule)theEObject;
        T result = caseE4Rule(e4Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E5_RULE:
      {
        E5Rule e5Rule = (E5Rule)theEObject;
        T result = caseE5Rule(e5Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E6_RULE:
      {
        E6Rule e6Rule = (E6Rule)theEObject;
        T result = caseE6Rule(e6Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E7_RULE:
      {
        E7Rule e7Rule = (E7Rule)theEObject;
        T result = caseE7Rule(e7Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E8_RULE:
      {
        E8Rule e8Rule = (E8Rule)theEObject;
        T result = caseE8Rule(e8Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E9_RULE:
      {
        E9Rule e9Rule = (E9Rule)theEObject;
        T result = caseE9Rule(e9Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E10_RULE:
      {
        E10Rule e10Rule = (E10Rule)theEObject;
        T result = caseE10Rule(e10Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E11_RULE:
      {
        E11Rule e11Rule = (E11Rule)theEObject;
        T result = caseE11Rule(e11Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E12_RULE:
      {
        E12Rule e12Rule = (E12Rule)theEObject;
        T result = caseE12Rule(e12Rule);
        if (result == null) result = caseE11Rule(e12Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.ENUM_REF:
      {
        EnumRef enumRef = (EnumRef)theEObject;
        T result = caseEnumRef(enumRef);
        if (result == null) result = caseE13Rule(enumRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.E13_RULE:
      {
        E13Rule e13Rule = (E13Rule)theEObject;
        T result = caseE13Rule(e13Rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.TUPLE_EXPR:
      {
        TupleExpr tupleExpr = (TupleExpr)theEObject;
        T result = caseTupleExpr(tupleExpr);
        if (result == null) result = caseE13Rule(tupleExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.IF_PRIMARY_EXPR:
      {
        IfPrimaryExpr ifPrimaryExpr = (IfPrimaryExpr)theEObject;
        T result = caseIfPrimaryExpr(ifPrimaryExpr);
        if (result == null) result = caseE13Rule(ifPrimaryExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.PARENTHESIS_EXPR:
      {
        ParenthesisExpr parenthesisExpr = (ParenthesisExpr)theEObject;
        T result = caseParenthesisExpr(parenthesisExpr);
        if (result == null) result = caseE13Rule(parenthesisExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.CONST_RULE:
      {
        ConstRule constRule = (ConstRule)theEObject;
        T result = caseConstRule(constRule);
        if (result == null) result = caseE13Rule(constRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.CONTROL_BLOCK_RULE:
      {
        ControlBlockRule controlBlockRule = (ControlBlockRule)theEObject;
        T result = caseControlBlockRule(controlBlockRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.CMD_RULE:
      {
        CmdRule cmdRule = (CmdRule)theEObject;
        T result = caseCmdRule(cmdRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.ID_LIST_RULE:
      {
        IdListRule idListRule = (IdListRule)theEObject;
        T result = caseIdListRule(idListRule);
        if (result == null) result = caseInputsDeclRule(idListRule);
        if (result == null) result = caseOutputsDeclRule(idListRule);
        if (result == null) result = caseSharedVarsDeclRule(idListRule);
        if (result == null) result = caseDeclRule(idListRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.ID_TYPE_LIST_RULE:
      {
        IdTypeListRule idTypeListRule = (IdTypeListRule)theEObject;
        T result = caseIdTypeListRule(idTypeListRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.EXPR_LIST_RULE:
      {
        ExprListRule exprListRule = (ExprListRule)theEObject;
        T result = caseExprListRule(exprListRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.TOP_LEVEL:
      {
        TopLevel topLevel = (TopLevel)theEObject;
        T result = caseTopLevel(topLevel);
        if (result == null) result = caseModelRule(topLevel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.MODULE:
      {
        uclid.xtext.uclid.Module module = (uclid.xtext.uclid.Module)theEObject;
        T result = caseModule(module);
        if (result == null) result = caseModuleRule(module);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.CONST_DECL:
      {
        ConstDecl constDecl = (ConstDecl)theEObject;
        T result = caseConstDecl(constDecl);
        if (result == null) result = caseVarDecl(constDecl);
        if (result == null) result = caseDeclRule(constDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.FUNCTION_DECL:
      {
        FunctionDecl functionDecl = (FunctionDecl)theEObject;
        T result = caseFunctionDecl(functionDecl);
        if (result == null) result = caseVarDecl(functionDecl);
        if (result == null) result = caseDeclRule(functionDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.PROCEDURE_DECL:
      {
        ProcedureDecl procedureDecl = (ProcedureDecl)theEObject;
        T result = caseProcedureDecl(procedureDecl);
        if (result == null) result = caseVarDecl(procedureDecl);
        if (result == null) result = caseDeclRule(procedureDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.STATEMENT_RULE:
      {
        StatementRule statementRule = (StatementRule)theEObject;
        T result = caseStatementRule(statementRule);
        if (result == null) result = caseStatement(statementRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseAssignmentRule(assignment);
        if (result == null) result = caseStatement(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.ENUM_TYPE_RULE:
      {
        EnumTypeRule enumTypeRule = (EnumTypeRule)theEObject;
        T result = caseEnumTypeRule(enumTypeRule);
        if (result == null) result = caseType(enumTypeRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.ENUM_VALUE:
      {
        EnumValue enumValue = (EnumValue)theEObject;
        T result = caseEnumValue(enumValue);
        if (result == null) result = caseVarDecl(enumValue);
        if (result == null) result = caseDeclRule(enumValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.TUPLE_TYPE_RULE:
      {
        TupleTypeRule tupleTypeRule = (TupleTypeRule)theEObject;
        T result = caseTupleTypeRule(tupleTypeRule);
        if (result == null) result = caseType(tupleTypeRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.RECORD_TYPE_RULE:
      {
        RecordTypeRule recordTypeRule = (RecordTypeRule)theEObject;
        T result = caseRecordTypeRule(recordTypeRule);
        if (result == null) result = caseType(recordTypeRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.ARRAY_TYPE_RULE:
      {
        ArrayTypeRule arrayTypeRule = (ArrayTypeRule)theEObject;
        T result = caseArrayTypeRule(arrayTypeRule);
        if (result == null) result = caseType(arrayTypeRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UclidPackage.SYNONYM_TYPE_RULE:
      {
        SynonymTypeRule synonymTypeRule = (SynonymTypeRule)theEObject;
        T result = caseSynonymTypeRule(synonymTypeRule);
        if (result == null) result = caseType(synonymTypeRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelRule(ModelRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModuleRule(ModuleRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Decl Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Decl Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclRule(DeclRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeDecl(TypeDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inputs Decl Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inputs Decl Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputsDeclRule(InputsDeclRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Outputs Decl Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Outputs Decl Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputsDeclRule(OutputsDeclRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vars Decl Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vars Decl Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarsDeclRule(VarsDeclRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDecl(VarDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Consts Decl Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Consts Decl Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstsDeclRule(ConstsDeclRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shared Vars Decl Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shared Vars Decl Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSharedVarsDeclRule(SharedVarsDeclRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Define Decl Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Define Decl Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefineDeclRule(DefineDeclRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Proc Return Arg Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Proc Return Arg Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcReturnArgRule(ProcReturnArgRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Require Exprs Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Require Exprs Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequireExprsRule(RequireExprsRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ensure Exprs Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ensure Exprs Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnsureExprsRule(EnsureExprsRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modifies Exprs Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modifies Exprs Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModifiesExprsRule(ModifiesExprsRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instance Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instance Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstanceDecl(InstanceDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arg Map List Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arg Map List Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgMapListRule(ArgMapListRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arg Map Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arg Map Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgMapRule(ArgMapRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Axiom Decl Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Axiom Decl Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAxiomDeclRule(AxiomDeclRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spec Decl Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spec Decl Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecDeclRule(SpecDeclRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Init Decl Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Init Decl Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitDeclRule(InitDeclRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Next Decl Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Next Decl Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNextDeclRule(NextDeclRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallStatement(CallStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignmentRule(AssignmentRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compound Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compound Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompoundStatement(CompoundStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Lhs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Lhs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLhs(Lhs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarRef(VarRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Stmt Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Stmt Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfStmtRule(IfStmtRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Stmt Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Stmt Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseStmtRule(CaseStmtRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Default Case Block Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Default Case Block Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefaultCaseBlockRule(DefaultCaseBlockRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Block Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Block Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseBlockRule(CaseBlockRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Loop Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Loop Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForLoopRule(ForLoopRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>While Loop Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>While Loop Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhileLoopRule(WhileLoopRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant Clause Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant Clause Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariantClauseRule(InvariantClauseRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expr Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expr Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExprRule(ExprRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E1 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E1 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE1Rule(E1Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E2 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E2 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE2Rule(E2Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E3 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E3 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE3Rule(E3Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E4 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E4 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE4Rule(E4Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E5 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E5 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE5Rule(E5Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E6 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E6 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE6Rule(E6Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E7 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E7 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE7Rule(E7Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E8 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E8 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE8Rule(E8Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E9 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E9 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE9Rule(E9Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E10 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E10 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE10Rule(E10Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E11 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E11 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE11Rule(E11Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E12 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E12 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE12Rule(E12Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumRef(EnumRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E13 Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E13 Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE13Rule(E13Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleExpr(TupleExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Primary Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Primary Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfPrimaryExpr(IfPrimaryExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parenthesis Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parenthesis Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParenthesisExpr(ParenthesisExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstRule(ConstRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Control Block Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Control Block Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseControlBlockRule(ControlBlockRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cmd Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cmd Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCmdRule(CmdRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Id List Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Id List Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdListRule(IdListRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Id Type List Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Id Type List Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdTypeListRule(IdTypeListRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expr List Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expr List Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExprListRule(ExprListRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Top Level</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Top Level</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTopLevel(TopLevel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModule(uclid.xtext.uclid.Module object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstDecl(ConstDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionDecl(FunctionDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Procedure Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Procedure Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcedureDecl(ProcedureDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementRule(StatementRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Type Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Type Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumTypeRule(EnumTypeRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumValue(EnumValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Type Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Type Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleTypeRule(TupleTypeRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Record Type Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Record Type Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRecordTypeRule(RecordTypeRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Type Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Type Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayTypeRule(ArrayTypeRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Synonym Type Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Synonym Type Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSynonymTypeRule(SynonymTypeRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //UclidSwitch

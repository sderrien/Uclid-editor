/**
 * generated by Xtext 2.24.0
 */
package uclid.xtext.uclid.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import uclid.xtext.uclid.ArgList;
import uclid.xtext.uclid.ArgMapListRule;
import uclid.xtext.uclid.ArgMapRule;
import uclid.xtext.uclid.ArrayTypeRule;
import uclid.xtext.uclid.Assignment;
import uclid.xtext.uclid.AssignmentRule;
import uclid.xtext.uclid.AxiomDeclRule;
import uclid.xtext.uclid.CallStatement;
import uclid.xtext.uclid.CaseBlockRule;
import uclid.xtext.uclid.CaseStmtRule;
import uclid.xtext.uclid.CmdRule;
import uclid.xtext.uclid.CompoundStatement;
import uclid.xtext.uclid.ConstDecl;
import uclid.xtext.uclid.ConstRule;
import uclid.xtext.uclid.ConstsDeclRule;
import uclid.xtext.uclid.ControlBlockRule;
import uclid.xtext.uclid.DeclRule;
import uclid.xtext.uclid.DefaultCaseBlockRule;
import uclid.xtext.uclid.E10Rule;
import uclid.xtext.uclid.E11Rule;
import uclid.xtext.uclid.E12Rule;
import uclid.xtext.uclid.E13Rule;
import uclid.xtext.uclid.E1Rule;
import uclid.xtext.uclid.E2Rule;
import uclid.xtext.uclid.E3Rule;
import uclid.xtext.uclid.E4Rule;
import uclid.xtext.uclid.E5Rule;
import uclid.xtext.uclid.E6Rule;
import uclid.xtext.uclid.E7Rule;
import uclid.xtext.uclid.E8Rule;
import uclid.xtext.uclid.E9Rule;
import uclid.xtext.uclid.EnsureExprsRule;
import uclid.xtext.uclid.EnumRef;
import uclid.xtext.uclid.EnumTypeRule;
import uclid.xtext.uclid.EnumValue;
import uclid.xtext.uclid.ExprListRule;
import uclid.xtext.uclid.ExprRule;
import uclid.xtext.uclid.ForLoopRule;
import uclid.xtext.uclid.FuncDecl;
import uclid.xtext.uclid.FunctionDecl;
import uclid.xtext.uclid.IdListRule;
import uclid.xtext.uclid.IfPrimaryExpr;
import uclid.xtext.uclid.IfStmtRule;
import uclid.xtext.uclid.InitDeclRule;
import uclid.xtext.uclid.InputDecl;
import uclid.xtext.uclid.InputsDeclRule;
import uclid.xtext.uclid.InstanceDecl;
import uclid.xtext.uclid.InvariantRule;
import uclid.xtext.uclid.ModelRule;
import uclid.xtext.uclid.ModifiesExprsRule;
import uclid.xtext.uclid.ModuleRule;
import uclid.xtext.uclid.NextDeclRule;
import uclid.xtext.uclid.OutputDecl;
import uclid.xtext.uclid.OutputsDeclRule;
import uclid.xtext.uclid.ParenthesisExpr;
import uclid.xtext.uclid.ProcReturnArgRule;
import uclid.xtext.uclid.ProcedureDecl;
import uclid.xtext.uclid.PropertyRule;
import uclid.xtext.uclid.RecordTypeRule;
import uclid.xtext.uclid.RequireExprsRule;
import uclid.xtext.uclid.SharedVarsDeclRule;
import uclid.xtext.uclid.SpecDeclRule;
import uclid.xtext.uclid.Statement;
import uclid.xtext.uclid.StatementRule;
import uclid.xtext.uclid.TopLevel;
import uclid.xtext.uclid.TupleExpr;
import uclid.xtext.uclid.TupleTypeRule;
import uclid.xtext.uclid.Type;
import uclid.xtext.uclid.TypeDecl;
import uclid.xtext.uclid.TypedObjectDecl;
import uclid.xtext.uclid.UclidPackage;
import uclid.xtext.uclid.VarDecl;
import uclid.xtext.uclid.VarReference;
import uclid.xtext.uclid.VarsDeclRule;
import uclid.xtext.uclid.WhileLoopRule;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see uclid.xtext.uclid.UclidPackage
 * @generated
 */
public class UclidAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static UclidPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UclidAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = UclidPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UclidSwitch<Adapter> modelSwitch =
    new UclidSwitch<Adapter>()
    {
      @Override
      public Adapter caseModelRule(ModelRule object)
      {
        return createModelRuleAdapter();
      }
      @Override
      public Adapter caseModuleRule(ModuleRule object)
      {
        return createModuleRuleAdapter();
      }
      @Override
      public Adapter caseDeclRule(DeclRule object)
      {
        return createDeclRuleAdapter();
      }
      @Override
      public Adapter caseTypeDecl(TypeDecl object)
      {
        return createTypeDeclAdapter();
      }
      @Override
      public Adapter caseInputsDeclRule(InputsDeclRule object)
      {
        return createInputsDeclRuleAdapter();
      }
      @Override
      public Adapter caseOutputsDeclRule(OutputsDeclRule object)
      {
        return createOutputsDeclRuleAdapter();
      }
      @Override
      public Adapter caseTypedObjectDecl(TypedObjectDecl object)
      {
        return createTypedObjectDeclAdapter();
      }
      @Override
      public Adapter caseInputDecl(InputDecl object)
      {
        return createInputDeclAdapter();
      }
      @Override
      public Adapter caseOutputDecl(OutputDecl object)
      {
        return createOutputDeclAdapter();
      }
      @Override
      public Adapter caseVarDecl(VarDecl object)
      {
        return createVarDeclAdapter();
      }
      @Override
      public Adapter caseFuncDecl(FuncDecl object)
      {
        return createFuncDeclAdapter();
      }
      @Override
      public Adapter caseVarsDeclRule(VarsDeclRule object)
      {
        return createVarsDeclRuleAdapter();
      }
      @Override
      public Adapter caseConstsDeclRule(ConstsDeclRule object)
      {
        return createConstsDeclRuleAdapter();
      }
      @Override
      public Adapter caseConstDecl(ConstDecl object)
      {
        return createConstDeclAdapter();
      }
      @Override
      public Adapter caseSharedVarsDeclRule(SharedVarsDeclRule object)
      {
        return createSharedVarsDeclRuleAdapter();
      }
      @Override
      public Adapter caseArgList(ArgList object)
      {
        return createArgListAdapter();
      }
      @Override
      public Adapter caseProcReturnArgRule(ProcReturnArgRule object)
      {
        return createProcReturnArgRuleAdapter();
      }
      @Override
      public Adapter caseRequireExprsRule(RequireExprsRule object)
      {
        return createRequireExprsRuleAdapter();
      }
      @Override
      public Adapter caseEnsureExprsRule(EnsureExprsRule object)
      {
        return createEnsureExprsRuleAdapter();
      }
      @Override
      public Adapter caseModifiesExprsRule(ModifiesExprsRule object)
      {
        return createModifiesExprsRuleAdapter();
      }
      @Override
      public Adapter caseInstanceDecl(InstanceDecl object)
      {
        return createInstanceDeclAdapter();
      }
      @Override
      public Adapter caseArgMapListRule(ArgMapListRule object)
      {
        return createArgMapListRuleAdapter();
      }
      @Override
      public Adapter caseArgMapRule(ArgMapRule object)
      {
        return createArgMapRuleAdapter();
      }
      @Override
      public Adapter caseAxiomDeclRule(AxiomDeclRule object)
      {
        return createAxiomDeclRuleAdapter();
      }
      @Override
      public Adapter caseSpecDeclRule(SpecDeclRule object)
      {
        return createSpecDeclRuleAdapter();
      }
      @Override
      public Adapter casePropertyRule(PropertyRule object)
      {
        return createPropertyRuleAdapter();
      }
      @Override
      public Adapter caseInvariantRule(InvariantRule object)
      {
        return createInvariantRuleAdapter();
      }
      @Override
      public Adapter caseInitDeclRule(InitDeclRule object)
      {
        return createInitDeclRuleAdapter();
      }
      @Override
      public Adapter caseNextDeclRule(NextDeclRule object)
      {
        return createNextDeclRuleAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseCallStatement(CallStatement object)
      {
        return createCallStatementAdapter();
      }
      @Override
      public Adapter caseAssignmentRule(AssignmentRule object)
      {
        return createAssignmentRuleAdapter();
      }
      @Override
      public Adapter caseCompoundStatement(CompoundStatement object)
      {
        return createCompoundStatementAdapter();
      }
      @Override
      public Adapter caseIfStmtRule(IfStmtRule object)
      {
        return createIfStmtRuleAdapter();
      }
      @Override
      public Adapter caseCaseStmtRule(CaseStmtRule object)
      {
        return createCaseStmtRuleAdapter();
      }
      @Override
      public Adapter caseDefaultCaseBlockRule(DefaultCaseBlockRule object)
      {
        return createDefaultCaseBlockRuleAdapter();
      }
      @Override
      public Adapter caseCaseBlockRule(CaseBlockRule object)
      {
        return createCaseBlockRuleAdapter();
      }
      @Override
      public Adapter caseForLoopRule(ForLoopRule object)
      {
        return createForLoopRuleAdapter();
      }
      @Override
      public Adapter caseWhileLoopRule(WhileLoopRule object)
      {
        return createWhileLoopRuleAdapter();
      }
      @Override
      public Adapter caseExprRule(ExprRule object)
      {
        return createExprRuleAdapter();
      }
      @Override
      public Adapter caseE1Rule(E1Rule object)
      {
        return createE1RuleAdapter();
      }
      @Override
      public Adapter caseE2Rule(E2Rule object)
      {
        return createE2RuleAdapter();
      }
      @Override
      public Adapter caseE3Rule(E3Rule object)
      {
        return createE3RuleAdapter();
      }
      @Override
      public Adapter caseE4Rule(E4Rule object)
      {
        return createE4RuleAdapter();
      }
      @Override
      public Adapter caseE5Rule(E5Rule object)
      {
        return createE5RuleAdapter();
      }
      @Override
      public Adapter caseE6Rule(E6Rule object)
      {
        return createE6RuleAdapter();
      }
      @Override
      public Adapter caseE7Rule(E7Rule object)
      {
        return createE7RuleAdapter();
      }
      @Override
      public Adapter caseE8Rule(E8Rule object)
      {
        return createE8RuleAdapter();
      }
      @Override
      public Adapter caseE9Rule(E9Rule object)
      {
        return createE9RuleAdapter();
      }
      @Override
      public Adapter caseE10Rule(E10Rule object)
      {
        return createE10RuleAdapter();
      }
      @Override
      public Adapter caseE11Rule(E11Rule object)
      {
        return createE11RuleAdapter();
      }
      @Override
      public Adapter caseE12Rule(E12Rule object)
      {
        return createE12RuleAdapter();
      }
      @Override
      public Adapter caseVarReference(VarReference object)
      {
        return createVarReferenceAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseE13Rule(E13Rule object)
      {
        return createE13RuleAdapter();
      }
      @Override
      public Adapter caseEnumRef(EnumRef object)
      {
        return createEnumRefAdapter();
      }
      @Override
      public Adapter caseTupleExpr(TupleExpr object)
      {
        return createTupleExprAdapter();
      }
      @Override
      public Adapter caseIfPrimaryExpr(IfPrimaryExpr object)
      {
        return createIfPrimaryExprAdapter();
      }
      @Override
      public Adapter caseParenthesisExpr(ParenthesisExpr object)
      {
        return createParenthesisExprAdapter();
      }
      @Override
      public Adapter caseConstRule(ConstRule object)
      {
        return createConstRuleAdapter();
      }
      @Override
      public Adapter caseControlBlockRule(ControlBlockRule object)
      {
        return createControlBlockRuleAdapter();
      }
      @Override
      public Adapter caseCmdRule(CmdRule object)
      {
        return createCmdRuleAdapter();
      }
      @Override
      public Adapter caseIdListRule(IdListRule object)
      {
        return createIdListRuleAdapter();
      }
      @Override
      public Adapter caseExprListRule(ExprListRule object)
      {
        return createExprListRuleAdapter();
      }
      @Override
      public Adapter caseTopLevel(TopLevel object)
      {
        return createTopLevelAdapter();
      }
      @Override
      public Adapter caseModule(uclid.xtext.uclid.Module object)
      {
        return createModuleAdapter();
      }
      @Override
      public Adapter caseFunctionDecl(FunctionDecl object)
      {
        return createFunctionDeclAdapter();
      }
      @Override
      public Adapter caseProcedureDecl(ProcedureDecl object)
      {
        return createProcedureDeclAdapter();
      }
      @Override
      public Adapter caseStatementRule(StatementRule object)
      {
        return createStatementRuleAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseEnumTypeRule(EnumTypeRule object)
      {
        return createEnumTypeRuleAdapter();
      }
      @Override
      public Adapter caseEnumValue(EnumValue object)
      {
        return createEnumValueAdapter();
      }
      @Override
      public Adapter caseTupleTypeRule(TupleTypeRule object)
      {
        return createTupleTypeRuleAdapter();
      }
      @Override
      public Adapter caseRecordTypeRule(RecordTypeRule object)
      {
        return createRecordTypeRuleAdapter();
      }
      @Override
      public Adapter caseArrayTypeRule(ArrayTypeRule object)
      {
        return createArrayTypeRuleAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ModelRule <em>Model Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ModelRule
   * @generated
   */
  public Adapter createModelRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ModuleRule <em>Module Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ModuleRule
   * @generated
   */
  public Adapter createModuleRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.DeclRule <em>Decl Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.DeclRule
   * @generated
   */
  public Adapter createDeclRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.TypeDecl <em>Type Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.TypeDecl
   * @generated
   */
  public Adapter createTypeDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.InputsDeclRule <em>Inputs Decl Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.InputsDeclRule
   * @generated
   */
  public Adapter createInputsDeclRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.OutputsDeclRule <em>Outputs Decl Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.OutputsDeclRule
   * @generated
   */
  public Adapter createOutputsDeclRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.TypedObjectDecl <em>Typed Object Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.TypedObjectDecl
   * @generated
   */
  public Adapter createTypedObjectDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.InputDecl <em>Input Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.InputDecl
   * @generated
   */
  public Adapter createInputDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.OutputDecl <em>Output Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.OutputDecl
   * @generated
   */
  public Adapter createOutputDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.VarDecl <em>Var Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.VarDecl
   * @generated
   */
  public Adapter createVarDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.FuncDecl <em>Func Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.FuncDecl
   * @generated
   */
  public Adapter createFuncDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.VarsDeclRule <em>Vars Decl Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.VarsDeclRule
   * @generated
   */
  public Adapter createVarsDeclRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ConstsDeclRule <em>Consts Decl Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ConstsDeclRule
   * @generated
   */
  public Adapter createConstsDeclRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ConstDecl <em>Const Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ConstDecl
   * @generated
   */
  public Adapter createConstDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.SharedVarsDeclRule <em>Shared Vars Decl Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.SharedVarsDeclRule
   * @generated
   */
  public Adapter createSharedVarsDeclRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ArgList <em>Arg List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ArgList
   * @generated
   */
  public Adapter createArgListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ProcReturnArgRule <em>Proc Return Arg Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ProcReturnArgRule
   * @generated
   */
  public Adapter createProcReturnArgRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.RequireExprsRule <em>Require Exprs Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.RequireExprsRule
   * @generated
   */
  public Adapter createRequireExprsRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.EnsureExprsRule <em>Ensure Exprs Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.EnsureExprsRule
   * @generated
   */
  public Adapter createEnsureExprsRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ModifiesExprsRule <em>Modifies Exprs Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ModifiesExprsRule
   * @generated
   */
  public Adapter createModifiesExprsRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.InstanceDecl <em>Instance Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.InstanceDecl
   * @generated
   */
  public Adapter createInstanceDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ArgMapListRule <em>Arg Map List Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ArgMapListRule
   * @generated
   */
  public Adapter createArgMapListRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ArgMapRule <em>Arg Map Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ArgMapRule
   * @generated
   */
  public Adapter createArgMapRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.AxiomDeclRule <em>Axiom Decl Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.AxiomDeclRule
   * @generated
   */
  public Adapter createAxiomDeclRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.SpecDeclRule <em>Spec Decl Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.SpecDeclRule
   * @generated
   */
  public Adapter createSpecDeclRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.PropertyRule <em>Property Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.PropertyRule
   * @generated
   */
  public Adapter createPropertyRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.InvariantRule <em>Invariant Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.InvariantRule
   * @generated
   */
  public Adapter createInvariantRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.InitDeclRule <em>Init Decl Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.InitDeclRule
   * @generated
   */
  public Adapter createInitDeclRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.NextDeclRule <em>Next Decl Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.NextDeclRule
   * @generated
   */
  public Adapter createNextDeclRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.CallStatement <em>Call Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.CallStatement
   * @generated
   */
  public Adapter createCallStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.AssignmentRule <em>Assignment Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.AssignmentRule
   * @generated
   */
  public Adapter createAssignmentRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.CompoundStatement <em>Compound Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.CompoundStatement
   * @generated
   */
  public Adapter createCompoundStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.IfStmtRule <em>If Stmt Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.IfStmtRule
   * @generated
   */
  public Adapter createIfStmtRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.CaseStmtRule <em>Case Stmt Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.CaseStmtRule
   * @generated
   */
  public Adapter createCaseStmtRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.DefaultCaseBlockRule <em>Default Case Block Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.DefaultCaseBlockRule
   * @generated
   */
  public Adapter createDefaultCaseBlockRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.CaseBlockRule <em>Case Block Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.CaseBlockRule
   * @generated
   */
  public Adapter createCaseBlockRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ForLoopRule <em>For Loop Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ForLoopRule
   * @generated
   */
  public Adapter createForLoopRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.WhileLoopRule <em>While Loop Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.WhileLoopRule
   * @generated
   */
  public Adapter createWhileLoopRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ExprRule <em>Expr Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ExprRule
   * @generated
   */
  public Adapter createExprRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E1Rule <em>E1 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E1Rule
   * @generated
   */
  public Adapter createE1RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E2Rule <em>E2 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E2Rule
   * @generated
   */
  public Adapter createE2RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E3Rule <em>E3 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E3Rule
   * @generated
   */
  public Adapter createE3RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E4Rule <em>E4 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E4Rule
   * @generated
   */
  public Adapter createE4RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E5Rule <em>E5 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E5Rule
   * @generated
   */
  public Adapter createE5RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E6Rule <em>E6 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E6Rule
   * @generated
   */
  public Adapter createE6RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E7Rule <em>E7 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E7Rule
   * @generated
   */
  public Adapter createE7RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E8Rule <em>E8 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E8Rule
   * @generated
   */
  public Adapter createE8RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E9Rule <em>E9 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E9Rule
   * @generated
   */
  public Adapter createE9RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E10Rule <em>E10 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E10Rule
   * @generated
   */
  public Adapter createE10RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E11Rule <em>E11 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E11Rule
   * @generated
   */
  public Adapter createE11RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E12Rule <em>E12 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E12Rule
   * @generated
   */
  public Adapter createE12RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.VarReference <em>Var Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.VarReference
   * @generated
   */
  public Adapter createVarReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.E13Rule <em>E13 Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.E13Rule
   * @generated
   */
  public Adapter createE13RuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.EnumRef <em>Enum Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.EnumRef
   * @generated
   */
  public Adapter createEnumRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.TupleExpr <em>Tuple Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.TupleExpr
   * @generated
   */
  public Adapter createTupleExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.IfPrimaryExpr <em>If Primary Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.IfPrimaryExpr
   * @generated
   */
  public Adapter createIfPrimaryExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ParenthesisExpr <em>Parenthesis Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ParenthesisExpr
   * @generated
   */
  public Adapter createParenthesisExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ConstRule <em>Const Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ConstRule
   * @generated
   */
  public Adapter createConstRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ControlBlockRule <em>Control Block Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ControlBlockRule
   * @generated
   */
  public Adapter createControlBlockRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.CmdRule <em>Cmd Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.CmdRule
   * @generated
   */
  public Adapter createCmdRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.IdListRule <em>Id List Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.IdListRule
   * @generated
   */
  public Adapter createIdListRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ExprListRule <em>Expr List Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ExprListRule
   * @generated
   */
  public Adapter createExprListRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.TopLevel <em>Top Level</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.TopLevel
   * @generated
   */
  public Adapter createTopLevelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.Module <em>Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.Module
   * @generated
   */
  public Adapter createModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.FunctionDecl <em>Function Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.FunctionDecl
   * @generated
   */
  public Adapter createFunctionDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ProcedureDecl <em>Procedure Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ProcedureDecl
   * @generated
   */
  public Adapter createProcedureDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.StatementRule <em>Statement Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.StatementRule
   * @generated
   */
  public Adapter createStatementRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.EnumTypeRule <em>Enum Type Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.EnumTypeRule
   * @generated
   */
  public Adapter createEnumTypeRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.EnumValue <em>Enum Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.EnumValue
   * @generated
   */
  public Adapter createEnumValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.TupleTypeRule <em>Tuple Type Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.TupleTypeRule
   * @generated
   */
  public Adapter createTupleTypeRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.RecordTypeRule <em>Record Type Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.RecordTypeRule
   * @generated
   */
  public Adapter createRecordTypeRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uclid.xtext.uclid.ArrayTypeRule <em>Array Type Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uclid.xtext.uclid.ArrayTypeRule
   * @generated
   */
  public Adapter createArrayTypeRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //UclidAdapterFactory

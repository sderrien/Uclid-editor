/*
 * generated by Xtext 2.22.0
 */
package uclid.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UclidGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ModelRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTopLevelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesModuleRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//ModelRule:
		//	{TopLevel} rules+=ModuleRule*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TopLevel} rules+=ModuleRule*
		public Group getGroup() { return cGroup; }
		
		//{TopLevel}
		public Action getTopLevelAction_0() { return cTopLevelAction_0; }
		
		//rules+=ModuleRule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }
		
		//ModuleRule
		public RuleCall getRulesModuleRuleParserRuleCall_1_0() { return cRulesModuleRuleParserRuleCall_1_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ModuleRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ModuleRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDDeclRuleParserRuleCall_4_0 = (RuleCall)cDAssignment_4.eContents().get(0);
		private final Assignment cEAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEControlBlockRuleParserRuleCall_5_0 = (RuleCall)cEAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ModuleRule:
		//	{Module} 'module' name=ID '{' d+=DeclRule* e=ControlBlockRule? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Module} 'module' name=ID '{' d+=DeclRule* e=ControlBlockRule? '}'
		public Group getGroup() { return cGroup; }
		
		//{Module}
		public Action getModuleAction_0() { return cModuleAction_0; }
		
		//'module'
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//d+=DeclRule*
		public Assignment getDAssignment_4() { return cDAssignment_4; }
		
		//DeclRule
		public RuleCall getDDeclRuleParserRuleCall_4_0() { return cDDeclRuleParserRuleCall_4_0; }
		
		//e=ControlBlockRule?
		public Assignment getEAssignment_5() { return cEAssignment_5; }
		
		//ControlBlockRule
		public RuleCall getEControlBlockRuleParserRuleCall_5_0() { return cEControlBlockRuleParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.DeclRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDeclRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputsDeclRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOutputsDeclRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVarsDeclRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSharedVarsDeclRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDefineDeclRuleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConstsDeclRuleParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFunctionDeclParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cProcedureDeclParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cInstanceDeclRuleParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cInitDeclRuleParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cNextDeclRuleParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cAxiomDeclRuleParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSpecDeclRuleParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//DeclRule:
		//	TypeDeclRule
		//	| InputsDeclRule
		//	| OutputsDeclRule
		//	| VarsDeclRule
		//	| SharedVarsDeclRule
		//	| DefineDeclRule
		//	| ConstsDeclRule
		//	| FunctionDecl
		//	| ProcedureDecl
		//	| InstanceDeclRule
		//	| InitDeclRule
		//	| NextDeclRule
		//	| AxiomDeclRule
		//	| SpecDeclRule;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeDeclRule | InputsDeclRule | OutputsDeclRule | VarsDeclRule | SharedVarsDeclRule | DefineDeclRule | ConstsDeclRule |
		//FunctionDecl | ProcedureDecl | InstanceDeclRule | InitDeclRule | NextDeclRule | AxiomDeclRule | SpecDeclRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeDeclRule
		public RuleCall getTypeDeclRuleParserRuleCall_0() { return cTypeDeclRuleParserRuleCall_0; }
		
		//InputsDeclRule
		public RuleCall getInputsDeclRuleParserRuleCall_1() { return cInputsDeclRuleParserRuleCall_1; }
		
		//OutputsDeclRule
		public RuleCall getOutputsDeclRuleParserRuleCall_2() { return cOutputsDeclRuleParserRuleCall_2; }
		
		//VarsDeclRule
		public RuleCall getVarsDeclRuleParserRuleCall_3() { return cVarsDeclRuleParserRuleCall_3; }
		
		//SharedVarsDeclRule
		public RuleCall getSharedVarsDeclRuleParserRuleCall_4() { return cSharedVarsDeclRuleParserRuleCall_4; }
		
		//DefineDeclRule
		public RuleCall getDefineDeclRuleParserRuleCall_5() { return cDefineDeclRuleParserRuleCall_5; }
		
		//ConstsDeclRule
		public RuleCall getConstsDeclRuleParserRuleCall_6() { return cConstsDeclRuleParserRuleCall_6; }
		
		//FunctionDecl
		public RuleCall getFunctionDeclParserRuleCall_7() { return cFunctionDeclParserRuleCall_7; }
		
		//ProcedureDecl
		public RuleCall getProcedureDeclParserRuleCall_8() { return cProcedureDeclParserRuleCall_8; }
		
		//InstanceDeclRule
		public RuleCall getInstanceDeclRuleParserRuleCall_9() { return cInstanceDeclRuleParserRuleCall_9; }
		
		//InitDeclRule
		public RuleCall getInitDeclRuleParserRuleCall_10() { return cInitDeclRuleParserRuleCall_10; }
		
		//NextDeclRule
		public RuleCall getNextDeclRuleParserRuleCall_11() { return cNextDeclRuleParserRuleCall_11; }
		
		//AxiomDeclRule
		public RuleCall getAxiomDeclRuleParserRuleCall_12() { return cAxiomDeclRuleParserRuleCall_12; }
		
		//SpecDeclRule
		public RuleCall getSpecDeclRuleParserRuleCall_13() { return cSpecDeclRuleParserRuleCall_13; }
	}
	public class TypeDeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.TypeDeclRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTypeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTTypeRuleParserRuleCall_0_3_0 = (RuleCall)cTAssignment_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTypeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TypeDeclRule TypeDecl:
		//	'type' (name=ID | '*') '=' t=TypeRule ';'
		//	| 'type' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'type' (name=ID | '*') '=' t=TypeRule ';' | 'type' name=ID ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'type' (name=ID | '*') '=' t=TypeRule ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'type'
		public Keyword getTypeKeyword_0_0() { return cTypeKeyword_0_0; }
		
		//(name=ID | '*')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0_0() { return cNameIDTerminalRuleCall_0_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1_1() { return cAsteriskKeyword_0_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }
		
		//t=TypeRule
		public Assignment getTAssignment_0_3() { return cTAssignment_0_3; }
		
		//TypeRule
		public RuleCall getTTypeRuleParserRuleCall_0_3_0() { return cTTypeRuleParserRuleCall_0_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//'type' name=ID ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'type'
		public Keyword getTypeKeyword_1_0() { return cTypeKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}
	public class InputsDeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.InputsDeclRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdListRuleParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTTypeRuleParserRuleCall_3_0 = (RuleCall)cTAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InputsDeclRule:
		//	'input' IdListRule ':' t=TypeRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'input' IdListRule ':' t=TypeRule ';'
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//IdListRule
		public RuleCall getIdListRuleParserRuleCall_1() { return cIdListRuleParserRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//t=TypeRule
		public Assignment getTAssignment_3() { return cTAssignment_3; }
		
		//TypeRule
		public RuleCall getTTypeRuleParserRuleCall_3_0() { return cTTypeRuleParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class OutputsDeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.OutputsDeclRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdListRuleParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTTypeRuleParserRuleCall_3_0 = (RuleCall)cTAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OutputsDeclRule:
		//	'output' IdListRule ':' t=TypeRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'output' IdListRule ':' t=TypeRule ';'
		public Group getGroup() { return cGroup; }
		
		//'output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//IdListRule
		public RuleCall getIdListRuleParserRuleCall_1() { return cIdListRuleParserRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//t=TypeRule
		public Assignment getTAssignment_3() { return cTAssignment_3; }
		
		//TypeRule
		public RuleCall getTTypeRuleParserRuleCall_3_0() { return cTTypeRuleParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class VarsDeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.VarsDeclRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVarsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVarsVarDeclParserRuleCall_1_0_0 = (RuleCall)cVarsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cVarsVarDeclParserRuleCall_1_1_1_0 = (RuleCall)cVarsAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTTypeRuleParserRuleCall_3_0 = (RuleCall)cTAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarsDeclRule:
		//	'var' (vars+=VarDecl (',' vars+=VarDecl)*) ':' t=TypeRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'var' (vars+=VarDecl (',' vars+=VarDecl)*) ':' t=TypeRule ';'
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//(vars+=VarDecl (',' vars+=VarDecl)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//vars+=VarDecl
		public Assignment getVarsAssignment_1_0() { return cVarsAssignment_1_0; }
		
		//VarDecl
		public RuleCall getVarsVarDeclParserRuleCall_1_0_0() { return cVarsVarDeclParserRuleCall_1_0_0; }
		
		//(',' vars+=VarDecl)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//vars+=VarDecl
		public Assignment getVarsAssignment_1_1_1() { return cVarsAssignment_1_1_1; }
		
		//VarDecl
		public RuleCall getVarsVarDeclParserRuleCall_1_1_1_0() { return cVarsVarDeclParserRuleCall_1_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//t=TypeRule
		public Assignment getTAssignment_3() { return cTAssignment_3; }
		
		//TypeRule
		public RuleCall getTTypeRuleParserRuleCall_3_0() { return cTTypeRuleParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.VarDecl");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VarDecl:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ConstsDeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ConstsDeclRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstantsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstantsConstDeclParserRuleCall_1_0 = (RuleCall)cConstantsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstantsConstDeclParserRuleCall_2_1_0 = (RuleCall)cConstantsAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTTypeRuleParserRuleCall_4_0 = (RuleCall)cTAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ConstsDeclRule:
		//	'const' constants+=ConstDecl (',' constants+=ConstDecl)* ':' t=TypeRule ('=' INT)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'const' constants+=ConstDecl (',' constants+=ConstDecl)* ':' t=TypeRule ('=' INT)? ';'
		public Group getGroup() { return cGroup; }
		
		//'const'
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//constants+=ConstDecl
		public Assignment getConstantsAssignment_1() { return cConstantsAssignment_1; }
		
		//ConstDecl
		public RuleCall getConstantsConstDeclParserRuleCall_1_0() { return cConstantsConstDeclParserRuleCall_1_0; }
		
		//(',' constants+=ConstDecl)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//constants+=ConstDecl
		public Assignment getConstantsAssignment_2_1() { return cConstantsAssignment_2_1; }
		
		//ConstDecl
		public RuleCall getConstantsConstDeclParserRuleCall_2_1_0() { return cConstantsConstDeclParserRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//t=TypeRule
		public Assignment getTAssignment_4() { return cTAssignment_4; }
		
		//TypeRule
		public RuleCall getTTypeRuleParserRuleCall_4_0() { return cTTypeRuleParserRuleCall_4_0; }
		
		//('=' INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5_1() { return cINTTerminalRuleCall_5_1; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ConstDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ConstDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ConstDecl VarDecl:
		//	{ConstDecl} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstDecl} name=ID
		public Group getGroup() { return cGroup; }
		
		//{ConstDecl}
		public Action getConstDeclAction_0() { return cConstDeclAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SharedVarsDeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.SharedVarsDeclRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSharedvarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdListRuleParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTTypeRuleParserRuleCall_3_0 = (RuleCall)cTAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SharedVarsDeclRule:
		//	'sharedvar' IdListRule ':' t=TypeRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'sharedvar' IdListRule ':' t=TypeRule ';'
		public Group getGroup() { return cGroup; }
		
		//'sharedvar'
		public Keyword getSharedvarKeyword_0() { return cSharedvarKeyword_0; }
		
		//IdListRule
		public RuleCall getIdListRuleParserRuleCall_1() { return cIdListRuleParserRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//t=TypeRule
		public Assignment getTAssignment_3() { return cTAssignment_3; }
		
		//TypeRule
		public RuleCall getTTypeRuleParserRuleCall_3_0() { return cTTypeRuleParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DefineDeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.DefineDeclRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLIdTypeListRuleParserRuleCall_3_0 = (RuleCall)cLAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTTypeRuleParserRuleCall_6_0 = (RuleCall)cTAssignment_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cEAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEExprRuleParserRuleCall_8_0 = (RuleCall)cEAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DefineDeclRule:
		//	'define' name=ID '(' l=IdTypeListRule? ')' ':' t=TypeRule '=' e=ExprRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'define' name=ID '(' l=IdTypeListRule? ')' ':' t=TypeRule '=' e=ExprRule ';'
		public Group getGroup() { return cGroup; }
		
		//'define'
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//l=IdTypeListRule?
		public Assignment getLAssignment_3() { return cLAssignment_3; }
		
		//IdTypeListRule
		public RuleCall getLIdTypeListRuleParserRuleCall_3_0() { return cLIdTypeListRuleParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//t=TypeRule
		public Assignment getTAssignment_6() { return cTAssignment_6; }
		
		//TypeRule
		public RuleCall getTTypeRuleParserRuleCall_6_0() { return cTTypeRuleParserRuleCall_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//e=ExprRule
		public Assignment getEAssignment_8() { return cEAssignment_8; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_8_0() { return cEExprRuleParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class FunctionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.FunctionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLIdTypeListRuleParserRuleCall_4_0 = (RuleCall)cLAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTTypeRuleParserRuleCall_7_0 = (RuleCall)cTAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FunctionDecl VarDecl:
		//	{FunctionDecl} 'function' name=ID '(' l=IdTypeListRule? ')' ':' t=TypeRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDecl} 'function' name=ID '(' l=IdTypeListRule? ')' ':' t=TypeRule ';'
		public Group getGroup() { return cGroup; }
		
		//{FunctionDecl}
		public Action getFunctionDeclAction_0() { return cFunctionDeclAction_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//l=IdTypeListRule?
		public Assignment getLAssignment_4() { return cLAssignment_4; }
		
		//IdTypeListRule
		public RuleCall getLIdTypeListRuleParserRuleCall_4_0() { return cLIdTypeListRuleParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//t=TypeRule
		public Assignment getTAssignment_7() { return cTAssignment_7; }
		
		//TypeRule
		public RuleCall getTTypeRuleParserRuleCall_7_0() { return cTTypeRuleParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class ProcedureDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ProcedureDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcedureDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProcedureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLIdTypeListRuleParserRuleCall_4_0 = (RuleCall)cLAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRetProcReturnArgRuleParserRuleCall_6_0 = (RuleCall)cRetAssignment_6.eContents().get(0);
		private final Assignment cReqAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReqRequireExprsRuleParserRuleCall_7_0 = (RuleCall)cReqAssignment_7.eContents().get(0);
		private final Assignment cEnsureAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEnsureEnsureExprsRuleParserRuleCall_8_0 = (RuleCall)cEnsureAssignment_8.eContents().get(0);
		private final Assignment cModifiesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cModifiesModifiesExprsRuleParserRuleCall_9_0 = (RuleCall)cModifiesAssignment_9.eContents().get(0);
		private final Assignment cBodyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cBodyBlkStmtRuleParserRuleCall_10_0 = (RuleCall)cBodyAssignment_10.eContents().get(0);
		
		//ProcedureDecl VarDecl:
		//	{ProcedureDecl} 'procedure' name=ID '(' l=IdTypeListRule? ')'
		//	ret=ProcReturnArgRule?
		//	req+=RequireExprsRule*
		//	ensure+=EnsureExprsRule*
		//	modifies+=ModifiesExprsRule*
		//	body=BlkStmtRule;
		@Override public ParserRule getRule() { return rule; }
		
		//{ProcedureDecl} 'procedure' name=ID '(' l=IdTypeListRule? ')' ret=ProcReturnArgRule? req+=RequireExprsRule*
		//ensure+=EnsureExprsRule* modifies+=ModifiesExprsRule* body=BlkStmtRule
		public Group getGroup() { return cGroup; }
		
		//{ProcedureDecl}
		public Action getProcedureDeclAction_0() { return cProcedureDeclAction_0; }
		
		//'procedure'
		public Keyword getProcedureKeyword_1() { return cProcedureKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//l=IdTypeListRule?
		public Assignment getLAssignment_4() { return cLAssignment_4; }
		
		//IdTypeListRule
		public RuleCall getLIdTypeListRuleParserRuleCall_4_0() { return cLIdTypeListRuleParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//ret=ProcReturnArgRule?
		public Assignment getRetAssignment_6() { return cRetAssignment_6; }
		
		//ProcReturnArgRule
		public RuleCall getRetProcReturnArgRuleParserRuleCall_6_0() { return cRetProcReturnArgRuleParserRuleCall_6_0; }
		
		//req+=RequireExprsRule*
		public Assignment getReqAssignment_7() { return cReqAssignment_7; }
		
		//RequireExprsRule
		public RuleCall getReqRequireExprsRuleParserRuleCall_7_0() { return cReqRequireExprsRuleParserRuleCall_7_0; }
		
		//ensure+=EnsureExprsRule*
		public Assignment getEnsureAssignment_8() { return cEnsureAssignment_8; }
		
		//EnsureExprsRule
		public RuleCall getEnsureEnsureExprsRuleParserRuleCall_8_0() { return cEnsureEnsureExprsRuleParserRuleCall_8_0; }
		
		//modifies+=ModifiesExprsRule*
		public Assignment getModifiesAssignment_9() { return cModifiesAssignment_9; }
		
		//ModifiesExprsRule
		public RuleCall getModifiesModifiesExprsRuleParserRuleCall_9_0() { return cModifiesModifiesExprsRuleParserRuleCall_9_0; }
		
		//body=BlkStmtRule
		public Assignment getBodyAssignment_10() { return cBodyAssignment_10; }
		
		//BlkStmtRule
		public RuleCall getBodyBlkStmtRuleParserRuleCall_10_0() { return cBodyBlkStmtRuleParserRuleCall_10_0; }
	}
	public class ProcReturnArgRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ProcReturnArgRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLIdTypeListRuleParserRuleCall_2_0 = (RuleCall)cLAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcReturnArgRule:
		//	'returns' '(' l=IdTypeListRule? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'returns' '(' l=IdTypeListRule? ')'
		public Group getGroup() { return cGroup; }
		
		//'returns'
		public Keyword getReturnsKeyword_0() { return cReturnsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//l=IdTypeListRule?
		public Assignment getLAssignment_2() { return cLAssignment_2; }
		
		//IdTypeListRule
		public RuleCall getLIdTypeListRuleParserRuleCall_2_0() { return cLIdTypeListRuleParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RequireExprsRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.RequireExprsRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExprRuleParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RequireExprsRule:
		//	'requires' e=ExprRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'requires' e=ExprRule ';'
		public Group getGroup() { return cGroup; }
		
		//'requires'
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }
		
		//e=ExprRule
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_1_0() { return cEExprRuleParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class EnsureExprsRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.EnsureExprsRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnsuresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExprRuleParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EnsureExprsRule:
		//	'ensures' e=ExprRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ensures' e=ExprRule ';'
		public Group getGroup() { return cGroup; }
		
		//'ensures'
		public Keyword getEnsuresKeyword_0() { return cEnsuresKeyword_0; }
		
		//e=ExprRule
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_1_0() { return cEExprRuleParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ModifiesExprsRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ModifiesExprsRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLIdListRuleParserRuleCall_1_0 = (RuleCall)cLAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ModifiesExprsRule:
		//	'modifies' l=IdListRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'modifies' l=IdListRule ';'
		public Group getGroup() { return cGroup; }
		
		//'modifies'
		public Keyword getModifiesKeyword_0() { return cModifiesKeyword_0; }
		
		//l=IdListRule
		public Assignment getLAssignment_1() { return cLAssignment_1; }
		
		//IdListRule
		public RuleCall getLIdListRuleParserRuleCall_1_0() { return cLIdListRuleParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class InstanceDeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.InstanceDeclRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cModuleModuleCrossReference_3_0 = (CrossReference)cModuleAssignment_3.eContents().get(0);
		private final RuleCall cModuleModuleFQNParserRuleCall_3_0_1 = (RuleCall)cModuleModuleCrossReference_3_0.eContents().get(1);
		private final Assignment cArgsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgsArgMapListRuleParserRuleCall_4_0 = (RuleCall)cArgsAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InstanceDeclRule InstanceDecl:
		//	'instance' name=ID ':' module=[Module|FQN] args+=ArgMapListRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'instance' name=ID ':' module=[Module|FQN] args+=ArgMapListRule ';'
		public Group getGroup() { return cGroup; }
		
		//'instance'
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//module=[Module|FQN]
		public Assignment getModuleAssignment_3() { return cModuleAssignment_3; }
		
		//[Module|FQN]
		public CrossReference getModuleModuleCrossReference_3_0() { return cModuleModuleCrossReference_3_0; }
		
		//FQN
		public RuleCall getModuleModuleFQNParserRuleCall_3_0_1() { return cModuleModuleFQNParserRuleCall_3_0_1; }
		
		//args+=ArgMapListRule
		public Assignment getArgsAssignment_4() { return cArgsAssignment_4; }
		
		//ArgMapListRule
		public RuleCall getArgsArgMapListRuleParserRuleCall_4_0() { return cArgsArgMapListRuleParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ArgMapListRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ArgMapListRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgMapListRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgArgMapRuleParserRuleCall_2_0_0 = (RuleCall)cArgAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgArgMapRuleParserRuleCall_2_1_1_0 = (RuleCall)cArgAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArgMapListRule:
		//	{ArgMapListRule} '(' (arg+=ArgMapRule (',' arg+=ArgMapRule)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArgMapListRule} '(' (arg+=ArgMapRule (',' arg+=ArgMapRule)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{ArgMapListRule}
		public Action getArgMapListRuleAction_0() { return cArgMapListRuleAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(arg+=ArgMapRule (',' arg+=ArgMapRule)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//arg+=ArgMapRule
		public Assignment getArgAssignment_2_0() { return cArgAssignment_2_0; }
		
		//ArgMapRule
		public RuleCall getArgArgMapRuleParserRuleCall_2_0_0() { return cArgArgMapRuleParserRuleCall_2_0_0; }
		
		//(',' arg+=ArgMapRule)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//arg+=ArgMapRule
		public Assignment getArgAssignment_2_1_1() { return cArgAssignment_2_1_1; }
		
		//ArgMapRule
		public RuleCall getArgArgMapRuleParserRuleCall_2_1_1_0() { return cArgArgMapRuleParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArgMapRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ArgMapRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgMapRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEExprRuleParserRuleCall_4_0 = (RuleCall)cEAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ArgMapRule:
		//	{ArgMapRule} name=ID ':' '(' e+=ExprRule? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArgMapRule} name=ID ':' '(' e+=ExprRule? ')'
		public Group getGroup() { return cGroup; }
		
		//{ArgMapRule}
		public Action getArgMapRuleAction_0() { return cArgMapRuleAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//e+=ExprRule?
		public Assignment getEAssignment_4() { return cEAssignment_4; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_4_0() { return cEExprRuleParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AxiomDeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.AxiomDeclRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cAxiomKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cAssumeKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cNAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNIDTerminalRuleCall_0_1_0 = (RuleCall)cNAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cEAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEExprRuleParserRuleCall_0_3_0 = (RuleCall)cEAssignment_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAxiomKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAssumeKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cHAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHExprRuleParserRuleCall_1_1_0 = (RuleCall)cHAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//AxiomDeclRule:
		//	('axiom' | 'assume') n=ID ':' e=ExprRule ';'
		//	| ('axiom' | 'assume') h=ExprRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//('axiom' | 'assume') n=ID ':' e=ExprRule ';' | ('axiom' | 'assume') h=ExprRule ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('axiom' | 'assume') n=ID ':' e=ExprRule ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//('axiom' | 'assume')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'axiom'
		public Keyword getAxiomKeyword_0_0_0() { return cAxiomKeyword_0_0_0; }
		
		//'assume'
		public Keyword getAssumeKeyword_0_0_1() { return cAssumeKeyword_0_0_1; }
		
		//n=ID
		public Assignment getNAssignment_0_1() { return cNAssignment_0_1; }
		
		//ID
		public RuleCall getNIDTerminalRuleCall_0_1_0() { return cNIDTerminalRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//e=ExprRule
		public Assignment getEAssignment_0_3() { return cEAssignment_0_3; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_0_3_0() { return cEExprRuleParserRuleCall_0_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//('axiom' | 'assume') h=ExprRule ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//('axiom' | 'assume')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'axiom'
		public Keyword getAxiomKeyword_1_0_0() { return cAxiomKeyword_1_0_0; }
		
		//'assume'
		public Keyword getAssumeKeyword_1_0_1() { return cAssumeKeyword_1_0_1; }
		
		//h=ExprRule
		public Assignment getHAssignment_1_1() { return cHAssignment_1_1; }
		
		//ExprRule
		public RuleCall getHExprRuleParserRuleCall_1_1_0() { return cHExprRuleParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}
	public class SpecDeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.SpecDeclRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPropAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cPropAlternatives_0_0_0 = (Alternatives)cPropAssignment_0_0.eContents().get(0);
		private final Keyword cPropPropertyKeyword_0_0_0_0 = (Keyword)cPropAlternatives_0_0_0.eContents().get(0);
		private final Keyword cPropInvariantKeyword_0_0_0_1 = (Keyword)cPropAlternatives_0_0_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cEAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEExprRuleParserRuleCall_0_3_0 = (RuleCall)cEAssignment_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPropAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cPropAlternatives_1_0_0 = (Alternatives)cPropAssignment_1_0.eContents().get(0);
		private final Keyword cPropPropertyKeyword_1_0_0_0 = (Keyword)cPropAlternatives_1_0_0.eContents().get(0);
		private final Keyword cPropInvariantKeyword_1_0_0_1 = (Keyword)cPropAlternatives_1_0_0.eContents().get(1);
		private final Assignment cEAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEExprRuleParserRuleCall_1_1_0 = (RuleCall)cEAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SpecDeclRule:
		//	prop=('property' | 'invariant') name=ID ':' e=ExprRule ';'
		//	| prop=('property' | 'invariant') e=ExprRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//prop=('property' | 'invariant') name=ID ':' e=ExprRule ';' | prop=('property' | 'invariant') e=ExprRule ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//prop=('property' | 'invariant') name=ID ':' e=ExprRule ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//prop=('property' | 'invariant')
		public Assignment getPropAssignment_0_0() { return cPropAssignment_0_0; }
		
		//('property' | 'invariant')
		public Alternatives getPropAlternatives_0_0_0() { return cPropAlternatives_0_0_0; }
		
		//'property'
		public Keyword getPropPropertyKeyword_0_0_0_0() { return cPropPropertyKeyword_0_0_0_0; }
		
		//'invariant'
		public Keyword getPropInvariantKeyword_0_0_0_1() { return cPropInvariantKeyword_0_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//e=ExprRule
		public Assignment getEAssignment_0_3() { return cEAssignment_0_3; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_0_3_0() { return cEExprRuleParserRuleCall_0_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//prop=('property' | 'invariant') e=ExprRule ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//prop=('property' | 'invariant')
		public Assignment getPropAssignment_1_0() { return cPropAssignment_1_0; }
		
		//('property' | 'invariant')
		public Alternatives getPropAlternatives_1_0_0() { return cPropAlternatives_1_0_0; }
		
		//'property'
		public Keyword getPropPropertyKeyword_1_0_0_0() { return cPropPropertyKeyword_1_0_0_0; }
		
		//'invariant'
		public Keyword getPropInvariantKeyword_1_0_0_1() { return cPropInvariantKeyword_1_0_0_1; }
		
		//e=ExprRule
		public Assignment getEAssignment_1_1() { return cEAssignment_1_1; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_1_1_0() { return cEExprRuleParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}
	public class InitDeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.InitDeclRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlkStmtRuleParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//InitDeclRule:
		//	'init' body=BlkStmtRule;
		@Override public ParserRule getRule() { return rule; }
		
		//'init' body=BlkStmtRule
		public Group getGroup() { return cGroup; }
		
		//'init'
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//body=BlkStmtRule
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//BlkStmtRule
		public RuleCall getBodyBlkStmtRuleParserRuleCall_1_0() { return cBodyBlkStmtRuleParserRuleCall_1_0; }
	}
	public class NextDeclRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.NextDeclRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlkStmtRuleParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//NextDeclRule:
		//	'next' body=BlkStmtRule;
		@Override public ParserRule getRule() { return rule; }
		
		//'next' body=BlkStmtRule
		public Group getGroup() { return cGroup; }
		
		//'next'
		public Keyword getNextKeyword_0() { return cNextKeyword_0; }
		
		//body=BlkStmtRule
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//BlkStmtRule
		public RuleCall getBodyBlkStmtRuleParserRuleCall_1_0() { return cBodyBlkStmtRuleParserRuleCall_1_0; }
	}
	public class StatementRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.StatementRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStatementRuleAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cSkipKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAssertKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDExprRuleParserRuleCall_1_1_0 = (RuleCall)cDAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cAssumeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDExprRuleParserRuleCall_2_1_0 = (RuleCall)cDAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHavocKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cAssignmentRuleParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cCallStatementParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cNextKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cNameAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_6_2_0 = (RuleCall)cNameAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cSemicolonKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cSAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cSIfStmtRuleParserRuleCall_7_0_0 = (RuleCall)cSAssignment_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cSAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cSCaseStmtRuleParserRuleCall_8_0_0 = (RuleCall)cSAssignment_8_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cSAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cSForLoopRuleParserRuleCall_9_0_0 = (RuleCall)cSAssignment_9_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cSAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cSWhileLoopRuleParserRuleCall_10_0_0 = (RuleCall)cSAssignment_10_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cSAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final RuleCall cSBlkStmtRuleParserRuleCall_11_0_0 = (RuleCall)cSAssignment_11_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		
		//StatementRule Statement:
		//	{StatementRule} 'skip' ';' | 'assert' d=ExprRule ';' | 'assume' d=ExprRule ';' | 'havoc' name=ID ';' | AssignmentRule
		//	';' | CallStatement ';' | 'next' '(' name=ID ')' ';' | s=IfStmtRule ';'? | s=CaseStmtRule ';'? | s=ForLoopRule ';'? |
		//	s=WhileLoopRule ';'? | s=BlkStmtRule ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementRule} 'skip' ';' | 'assert' d=ExprRule ';' | 'assume' d=ExprRule ';' | 'havoc' name=ID ';' | AssignmentRule
		//';' | CallStatement ';' | 'next' '(' name=ID ')' ';' | s=IfStmtRule ';'? | s=CaseStmtRule ';'? | s=ForLoopRule ';'? |
		//s=WhileLoopRule ';'? | s=BlkStmtRule ';'?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StatementRule} 'skip' ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//{StatementRule}
		public Action getStatementRuleAction_0_0() { return cStatementRuleAction_0_0; }
		
		//'skip'
		public Keyword getSkipKeyword_0_1() { return cSkipKeyword_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//'assert' d=ExprRule ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'assert'
		public Keyword getAssertKeyword_1_0() { return cAssertKeyword_1_0; }
		
		//d=ExprRule
		public Assignment getDAssignment_1_1() { return cDAssignment_1_1; }
		
		//ExprRule
		public RuleCall getDExprRuleParserRuleCall_1_1_0() { return cDExprRuleParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
		
		//'assume' d=ExprRule ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//'assume'
		public Keyword getAssumeKeyword_2_0() { return cAssumeKeyword_2_0; }
		
		//d=ExprRule
		public Assignment getDAssignment_2_1() { return cDAssignment_2_1; }
		
		//ExprRule
		public RuleCall getDExprRuleParserRuleCall_2_1_0() { return cDExprRuleParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }
		
		//'havoc' name=ID ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//'havoc'
		public Keyword getHavocKeyword_3_0() { return cHavocKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }
		
		//AssignmentRule ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//AssignmentRule
		public RuleCall getAssignmentRuleParserRuleCall_4_0() { return cAssignmentRuleParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//CallStatement ';'
		public Group getGroup_5() { return cGroup_5; }
		
		//CallStatement
		public RuleCall getCallStatementParserRuleCall_5_0() { return cCallStatementParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
		
		//'next' '(' name=ID ')' ';'
		public Group getGroup_6() { return cGroup_6; }
		
		//'next'
		public Keyword getNextKeyword_6_0() { return cNextKeyword_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//name=ID
		public Assignment getNameAssignment_6_2() { return cNameAssignment_6_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_2_0() { return cNameIDTerminalRuleCall_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
		
		//';'
		public Keyword getSemicolonKeyword_6_4() { return cSemicolonKeyword_6_4; }
		
		//s=IfStmtRule ';'?
		public Group getGroup_7() { return cGroup_7; }
		
		//s=IfStmtRule
		public Assignment getSAssignment_7_0() { return cSAssignment_7_0; }
		
		//IfStmtRule
		public RuleCall getSIfStmtRuleParserRuleCall_7_0_0() { return cSIfStmtRuleParserRuleCall_7_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
		
		//s=CaseStmtRule ';'?
		public Group getGroup_8() { return cGroup_8; }
		
		//s=CaseStmtRule
		public Assignment getSAssignment_8_0() { return cSAssignment_8_0; }
		
		//CaseStmtRule
		public RuleCall getSCaseStmtRuleParserRuleCall_8_0_0() { return cSCaseStmtRuleParserRuleCall_8_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }
		
		//s=ForLoopRule ';'?
		public Group getGroup_9() { return cGroup_9; }
		
		//s=ForLoopRule
		public Assignment getSAssignment_9_0() { return cSAssignment_9_0; }
		
		//ForLoopRule
		public RuleCall getSForLoopRuleParserRuleCall_9_0_0() { return cSForLoopRuleParserRuleCall_9_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_9_1() { return cSemicolonKeyword_9_1; }
		
		//s=WhileLoopRule ';'?
		public Group getGroup_10() { return cGroup_10; }
		
		//s=WhileLoopRule
		public Assignment getSAssignment_10_0() { return cSAssignment_10_0; }
		
		//WhileLoopRule
		public RuleCall getSWhileLoopRuleParserRuleCall_10_0_0() { return cSWhileLoopRuleParserRuleCall_10_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_10_1() { return cSemicolonKeyword_10_1; }
		
		//s=BlkStmtRule ';'?
		public Group getGroup_11() { return cGroup_11; }
		
		//s=BlkStmtRule
		public Assignment getSAssignment_11_0() { return cSAssignment_11_0; }
		
		//BlkStmtRule
		public RuleCall getSBlkStmtRuleParserRuleCall_11_0_0() { return cSBlkStmtRuleParserRuleCall_11_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_11_1() { return cSemicolonKeyword_11_1; }
	}
	public class CallStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.CallStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCallStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCallKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Assignment cLhsAssignment_0_1_2_0 = (Assignment)cGroup_0_1_2.eContents().get(0);
		private final RuleCall cLhsLhsParserRuleCall_0_1_2_0_0 = (RuleCall)cLhsAssignment_0_1_2_0.eContents().get(0);
		private final Group cGroup_0_1_2_1 = (Group)cGroup_0_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_2_1_0 = (Keyword)cGroup_0_1_2_1.eContents().get(0);
		private final Assignment cLhsAssignment_0_1_2_1_1 = (Assignment)cGroup_0_1_2_1.eContents().get(1);
		private final RuleCall cLhsLhsParserRuleCall_0_1_2_1_1_0 = (RuleCall)cLhsAssignment_0_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_0_1_4 = (Keyword)cGroup_0_1.eContents().get(4);
		private final Assignment cTargetAssignment_0_1_5 = (Assignment)cGroup_0_1.eContents().get(5);
		private final CrossReference cTargetProcedureDeclCrossReference_0_1_5_0 = (CrossReference)cTargetAssignment_0_1_5.eContents().get(0);
		private final RuleCall cTargetProcedureDeclFQNParserRuleCall_0_1_5_0_1 = (RuleCall)cTargetProcedureDeclCrossReference_0_1_5_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_6 = (Keyword)cGroup_0_1.eContents().get(6);
		private final Assignment cExprsAssignment_0_1_7 = (Assignment)cGroup_0_1.eContents().get(7);
		private final RuleCall cExprsExprRuleParserRuleCall_0_1_7_0 = (RuleCall)cExprsAssignment_0_1_7.eContents().get(0);
		private final Group cGroup_0_1_8 = (Group)cGroup_0_1.eContents().get(8);
		private final Keyword cCommaKeyword_0_1_8_0 = (Keyword)cGroup_0_1_8.eContents().get(0);
		private final Assignment cExprsAssignment_0_1_8_1 = (Assignment)cGroup_0_1_8.eContents().get(1);
		private final RuleCall cExprsExprRuleParserRuleCall_0_1_8_1_0 = (RuleCall)cExprsAssignment_0_1_8_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_9 = (Keyword)cGroup_0_1.eContents().get(9);
		private final Keyword cSemicolonKeyword_0_1_10 = (Keyword)cGroup_0_1.eContents().get(10);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCallKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTargetProcedureDeclCrossReference_1_1_0 = (CrossReference)cTargetAssignment_1_1.eContents().get(0);
		private final RuleCall cTargetProcedureDeclFQNParserRuleCall_1_1_0_1 = (RuleCall)cTargetProcedureDeclCrossReference_1_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExprsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExprsExprRuleParserRuleCall_1_3_0 = (RuleCall)cExprsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cExprsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cExprsExprRuleParserRuleCall_1_4_1_0 = (RuleCall)cExprsAssignment_1_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//CallStatement:
		//	{CallStatement} ('call' '(' (lhs+=Lhs (',' lhs+=Lhs)*)? ')' '=' target=[ProcedureDecl|FQN] '(' exprs+=ExprRule (','
		//	exprs+=ExprRule)* ')' ';') | 'call' target=[ProcedureDecl|FQN] '(' exprs+=ExprRule (',' exprs+=ExprRule)* ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{CallStatement} ('call' '(' (lhs+=Lhs (',' lhs+=Lhs)*)? ')' '=' target=[ProcedureDecl|FQN] '(' exprs+=ExprRule (','
		//exprs+=ExprRule)* ')' ';') | 'call' target=[ProcedureDecl|FQN] '(' exprs+=ExprRule (',' exprs+=ExprRule)* ')' ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CallStatement} ('call' '(' (lhs+=Lhs (',' lhs+=Lhs)*)? ')' '=' target=[ProcedureDecl|FQN] '(' exprs+=ExprRule (','
		//exprs+=ExprRule)* ')' ';')
		public Group getGroup_0() { return cGroup_0; }
		
		//{CallStatement}
		public Action getCallStatementAction_0_0() { return cCallStatementAction_0_0; }
		
		//('call' '(' (lhs+=Lhs (',' lhs+=Lhs)*)? ')' '=' target=[ProcedureDecl|FQN] '(' exprs+=ExprRule (',' exprs+=ExprRule)*
		//')' ';')
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'call'
		public Keyword getCallKeyword_0_1_0() { return cCallKeyword_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_1() { return cLeftParenthesisKeyword_0_1_1; }
		
		//(lhs+=Lhs (',' lhs+=Lhs)*)?
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//lhs+=Lhs
		public Assignment getLhsAssignment_0_1_2_0() { return cLhsAssignment_0_1_2_0; }
		
		//Lhs
		public RuleCall getLhsLhsParserRuleCall_0_1_2_0_0() { return cLhsLhsParserRuleCall_0_1_2_0_0; }
		
		//(',' lhs+=Lhs)*
		public Group getGroup_0_1_2_1() { return cGroup_0_1_2_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_2_1_0() { return cCommaKeyword_0_1_2_1_0; }
		
		//lhs+=Lhs
		public Assignment getLhsAssignment_0_1_2_1_1() { return cLhsAssignment_0_1_2_1_1; }
		
		//Lhs
		public RuleCall getLhsLhsParserRuleCall_0_1_2_1_1_0() { return cLhsLhsParserRuleCall_0_1_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_3() { return cRightParenthesisKeyword_0_1_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_4() { return cEqualsSignKeyword_0_1_4; }
		
		//target=[ProcedureDecl|FQN]
		public Assignment getTargetAssignment_0_1_5() { return cTargetAssignment_0_1_5; }
		
		//[ProcedureDecl|FQN]
		public CrossReference getTargetProcedureDeclCrossReference_0_1_5_0() { return cTargetProcedureDeclCrossReference_0_1_5_0; }
		
		//FQN
		public RuleCall getTargetProcedureDeclFQNParserRuleCall_0_1_5_0_1() { return cTargetProcedureDeclFQNParserRuleCall_0_1_5_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_6() { return cLeftParenthesisKeyword_0_1_6; }
		
		//exprs+=ExprRule
		public Assignment getExprsAssignment_0_1_7() { return cExprsAssignment_0_1_7; }
		
		//ExprRule
		public RuleCall getExprsExprRuleParserRuleCall_0_1_7_0() { return cExprsExprRuleParserRuleCall_0_1_7_0; }
		
		//(',' exprs+=ExprRule)*
		public Group getGroup_0_1_8() { return cGroup_0_1_8; }
		
		//','
		public Keyword getCommaKeyword_0_1_8_0() { return cCommaKeyword_0_1_8_0; }
		
		//exprs+=ExprRule
		public Assignment getExprsAssignment_0_1_8_1() { return cExprsAssignment_0_1_8_1; }
		
		//ExprRule
		public RuleCall getExprsExprRuleParserRuleCall_0_1_8_1_0() { return cExprsExprRuleParserRuleCall_0_1_8_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_9() { return cRightParenthesisKeyword_0_1_9; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1_10() { return cSemicolonKeyword_0_1_10; }
		
		//'call' target=[ProcedureDecl|FQN] '(' exprs+=ExprRule (',' exprs+=ExprRule)* ')' ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'call'
		public Keyword getCallKeyword_1_0() { return cCallKeyword_1_0; }
		
		//target=[ProcedureDecl|FQN]
		public Assignment getTargetAssignment_1_1() { return cTargetAssignment_1_1; }
		
		//[ProcedureDecl|FQN]
		public CrossReference getTargetProcedureDeclCrossReference_1_1_0() { return cTargetProcedureDeclCrossReference_1_1_0; }
		
		//FQN
		public RuleCall getTargetProcedureDeclFQNParserRuleCall_1_1_0_1() { return cTargetProcedureDeclFQNParserRuleCall_1_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//exprs+=ExprRule
		public Assignment getExprsAssignment_1_3() { return cExprsAssignment_1_3; }
		
		//ExprRule
		public RuleCall getExprsExprRuleParserRuleCall_1_3_0() { return cExprsExprRuleParserRuleCall_1_3_0; }
		
		//(',' exprs+=ExprRule)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//','
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }
		
		//exprs+=ExprRule
		public Assignment getExprsAssignment_1_4_1() { return cExprsAssignment_1_4_1; }
		
		//ExprRule
		public RuleCall getExprsExprRuleParserRuleCall_1_4_1_0() { return cExprsExprRuleParserRuleCall_1_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}
	public class AssignmentRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.AssignmentRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLhsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLhsLhsParserRuleCall_1_0_0 = (RuleCall)cLhsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLhsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLhsLhsParserRuleCall_1_1_1_0 = (RuleCall)cLhsAssignment_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprsExprRuleParserRuleCall_3_0 = (RuleCall)cExprsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExprsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExprsExprRuleParserRuleCall_4_1_0 = (RuleCall)cExprsAssignment_4_1.eContents().get(0);
		
		//AssignmentRule:
		//	{Assignment} (lhs+=Lhs (',' lhs+=Lhs*)?) '=' exprs+=ExprRule (',' exprs+=ExprRule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Assignment} (lhs+=Lhs (',' lhs+=Lhs*)?) '=' exprs+=ExprRule (',' exprs+=ExprRule)*
		public Group getGroup() { return cGroup; }
		
		//{Assignment}
		public Action getAssignmentAction_0() { return cAssignmentAction_0; }
		
		//(lhs+=Lhs (',' lhs+=Lhs*)?)
		public Group getGroup_1() { return cGroup_1; }
		
		//lhs+=Lhs
		public Assignment getLhsAssignment_1_0() { return cLhsAssignment_1_0; }
		
		//Lhs
		public RuleCall getLhsLhsParserRuleCall_1_0_0() { return cLhsLhsParserRuleCall_1_0_0; }
		
		//(',' lhs+=Lhs*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//lhs+=Lhs*
		public Assignment getLhsAssignment_1_1_1() { return cLhsAssignment_1_1_1; }
		
		//Lhs
		public RuleCall getLhsLhsParserRuleCall_1_1_1_0() { return cLhsLhsParserRuleCall_1_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//exprs+=ExprRule
		public Assignment getExprsAssignment_3() { return cExprsAssignment_3; }
		
		//ExprRule
		public RuleCall getExprsExprRuleParserRuleCall_3_0() { return cExprsExprRuleParserRuleCall_3_0; }
		
		//(',' exprs+=ExprRule)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//exprs+=ExprRule
		public Assignment getExprsAssignment_4_1() { return cExprsAssignment_4_1; }
		
		//ExprRule
		public RuleCall getExprsExprRuleParserRuleCall_4_1_0() { return cExprsExprRuleParserRuleCall_4_1_0; }
	}
	public class BlkStmtRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.BlkStmtRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cCompoundStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cDecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDecVarsDeclRuleParserRuleCall_2_0 = (RuleCall)cDecAssignment_2.eContents().get(0);
		private final Assignment cStmtAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtStatementRuleParserRuleCall_3_0 = (RuleCall)cStmtAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BlkStmtRule CompoundStatement:
		//	'{' {CompoundStatement} dec+=VarsDeclRule* stmt+=StatementRule* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {CompoundStatement} dec+=VarsDeclRule* stmt+=StatementRule* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{CompoundStatement}
		public Action getCompoundStatementAction_1() { return cCompoundStatementAction_1; }
		
		//dec+=VarsDeclRule*
		public Assignment getDecAssignment_2() { return cDecAssignment_2; }
		
		//VarsDeclRule
		public RuleCall getDecVarsDeclRuleParserRuleCall_2_0() { return cDecVarsDeclRuleParserRuleCall_2_0; }
		
		//stmt+=StatementRule*
		public Assignment getStmtAssignment_3() { return cStmtAssignment_3; }
		
		//StatementRule
		public RuleCall getStmtStatementRuleParserRuleCall_3_0() { return cStmtStatementRuleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LhsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.Lhs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLhsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetLhsVarRefParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexExprRuleParserRuleCall_2_1_0 = (RuleCall)cIndexAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cIndexExprRuleParserRuleCall_2_2_1_0 = (RuleCall)cIndexAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cApostropheKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////BlockVarDeclRule :  'var' l=IdListRule ':' t=TypeRule ';';
		//Lhs:
		//	{Lhs} target=LhsVarRef ('[' index+=ExprRule (',' index+=ExprRule)* ']')? "'"?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Lhs} target=LhsVarRef ('[' index+=ExprRule (',' index+=ExprRule)* ']')? "'"?
		public Group getGroup() { return cGroup; }
		
		//{Lhs}
		public Action getLhsAction_0() { return cLhsAction_0; }
		
		//target=LhsVarRef
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//LhsVarRef
		public RuleCall getTargetLhsVarRefParserRuleCall_1_0() { return cTargetLhsVarRefParserRuleCall_1_0; }
		
		//('[' index+=ExprRule (',' index+=ExprRule)* ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//index+=ExprRule
		public Assignment getIndexAssignment_2_1() { return cIndexAssignment_2_1; }
		
		//ExprRule
		public RuleCall getIndexExprRuleParserRuleCall_2_1_0() { return cIndexExprRuleParserRuleCall_2_1_0; }
		
		//(',' index+=ExprRule)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//index+=ExprRule
		public Assignment getIndexAssignment_2_2_1() { return cIndexAssignment_2_2_1; }
		
		//ExprRule
		public RuleCall getIndexExprRuleParserRuleCall_2_2_1_0() { return cIndexExprRuleParserRuleCall_2_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
		
		//"'"?
		public Keyword getApostropheKeyword_3() { return cApostropheKeyword_3; }
	}
	public class LhsVarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.LhsVarRef");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVarDeclCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVarDeclFQNParserRuleCall_0_1 = (RuleCall)cVarVarDeclCrossReference_0.eContents().get(1);
		
		//LhsVarRef VarRef:
		//	var=[VarDecl|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//var=[VarDecl|FQN]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VarDecl|FQN]
		public CrossReference getVarVarDeclCrossReference_0() { return cVarVarDeclCrossReference_0; }
		
		//FQN
		public RuleCall getVarVarDeclFQNParserRuleCall_0_1() { return cVarVarDeclFQNParserRuleCall_0_1; }
	}
	public class IfStmtRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.IfStmtRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCExprRuleParserRuleCall_2_0 = (RuleCall)cCAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlkStmtRuleParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlkStmtRuleParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//IfStmtRule:
		//	'if' '(' c=ExprRule ')' then=BlkStmtRule ('else' else=BlkStmtRule)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' c=ExprRule ')' then=BlkStmtRule ('else' else=BlkStmtRule)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//c=ExprRule
		public Assignment getCAssignment_2() { return cCAssignment_2; }
		
		//ExprRule
		public RuleCall getCExprRuleParserRuleCall_2_0() { return cCExprRuleParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//then=BlkStmtRule
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//BlkStmtRule
		public RuleCall getThenBlkStmtRuleParserRuleCall_4_0() { return cThenBlkStmtRuleParserRuleCall_4_0; }
		
		//('else' else=BlkStmtRule)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else=BlkStmtRule
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//BlkStmtRule
		public RuleCall getElseBlkStmtRuleParserRuleCall_5_1_0() { return cElseBlkStmtRuleParserRuleCall_5_1_0; }
	}
	public class CaseStmtRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.CaseStmtRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCaseStmtRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCasesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cCasesAlternatives_2_0 = (Alternatives)cCasesAssignment_2.eContents().get(0);
		private final RuleCall cCasesCaseBlockRuleParserRuleCall_2_0_0 = (RuleCall)cCasesAlternatives_2_0.eContents().get(0);
		private final RuleCall cCasesDefaultCaseBlockRuleParserRuleCall_2_0_1 = (RuleCall)cCasesAlternatives_2_0.eContents().get(1);
		private final Keyword cEsacKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CaseStmtRule:
		//	{CaseStmtRule} 'case' cases+=(CaseBlockRule | DefaultCaseBlockRule)* 'esac';
		@Override public ParserRule getRule() { return rule; }
		
		//{CaseStmtRule} 'case' cases+=(CaseBlockRule | DefaultCaseBlockRule)* 'esac'
		public Group getGroup() { return cGroup; }
		
		//{CaseStmtRule}
		public Action getCaseStmtRuleAction_0() { return cCaseStmtRuleAction_0; }
		
		//'case'
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }
		
		//cases+=(CaseBlockRule | DefaultCaseBlockRule)*
		public Assignment getCasesAssignment_2() { return cCasesAssignment_2; }
		
		//(CaseBlockRule | DefaultCaseBlockRule)
		public Alternatives getCasesAlternatives_2_0() { return cCasesAlternatives_2_0; }
		
		//CaseBlockRule
		public RuleCall getCasesCaseBlockRuleParserRuleCall_2_0_0() { return cCasesCaseBlockRuleParserRuleCall_2_0_0; }
		
		//DefaultCaseBlockRule
		public RuleCall getCasesDefaultCaseBlockRuleParserRuleCall_2_0_1() { return cCasesDefaultCaseBlockRuleParserRuleCall_2_0_1; }
		
		//'esac'
		public Keyword getEsacKeyword_3() { return cEsacKeyword_3; }
	}
	public class DefaultCaseBlockRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.DefaultCaseBlockRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlkStmtRuleParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//DefaultCaseBlockRule:
		//	'default' ':' body=BlkStmtRule;
		@Override public ParserRule getRule() { return rule; }
		
		//'default' ':' body=BlkStmtRule
		public Group getGroup() { return cGroup; }
		
		//'default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//body=BlkStmtRule
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//BlkStmtRule
		public RuleCall getBodyBlkStmtRuleParserRuleCall_2_0() { return cBodyBlkStmtRuleParserRuleCall_2_0; }
	}
	public class CaseBlockRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.CaseBlockRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEExprRuleParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlkStmtRuleParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//CaseBlockRule:
		//	e=ExprRule ':' body=BlkStmtRule;
		@Override public ParserRule getRule() { return rule; }
		
		//e=ExprRule ':' body=BlkStmtRule
		public Group getGroup() { return cGroup; }
		
		//e=ExprRule
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_0_0() { return cEExprRuleParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//body=BlkStmtRule
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//BlkStmtRule
		public RuleCall getBodyBlkStmtRuleParserRuleCall_2_0() { return cBodyBlkStmtRuleParserRuleCall_2_0; }
	}
	public class ForLoopRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ForLoopRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIteratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIteratorVarDeclParserRuleCall_1_0 = (RuleCall)cIteratorAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRangeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLbAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLbINTTerminalRuleCall_5_0 = (RuleCall)cLbAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cUbAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cUbINTTerminalRuleCall_7_0 = (RuleCall)cUbAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodyBlkStmtRuleParserRuleCall_9_0 = (RuleCall)cBodyAssignment_9.eContents().get(0);
		
		//ForLoopRule:
		//	'for' iterator=VarDecl 'in' 'range' '(' lb=INT ',' ub=INT ')' body=BlkStmtRule;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' iterator=VarDecl 'in' 'range' '(' lb=INT ',' ub=INT ')' body=BlkStmtRule
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//iterator=VarDecl
		public Assignment getIteratorAssignment_1() { return cIteratorAssignment_1; }
		
		//VarDecl
		public RuleCall getIteratorVarDeclParserRuleCall_1_0() { return cIteratorVarDeclParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//'range'
		public Keyword getRangeKeyword_3() { return cRangeKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//lb=INT
		public Assignment getLbAssignment_5() { return cLbAssignment_5; }
		
		//INT
		public RuleCall getLbINTTerminalRuleCall_5_0() { return cLbINTTerminalRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//ub=INT
		public Assignment getUbAssignment_7() { return cUbAssignment_7; }
		
		//INT
		public RuleCall getUbINTTerminalRuleCall_7_0() { return cUbINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//body=BlkStmtRule
		public Assignment getBodyAssignment_9() { return cBodyAssignment_9; }
		
		//BlkStmtRule
		public RuleCall getBodyBlkStmtRuleParserRuleCall_9_0() { return cBodyBlkStmtRuleParserRuleCall_9_0; }
	}
	public class WhileLoopRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.WhileLoopRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCExprRuleParserRuleCall_2_0 = (RuleCall)cCAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInvAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInvInvariantClauseRuleParserRuleCall_4_0 = (RuleCall)cInvAssignment_4.eContents().get(0);
		private final Assignment cStmtAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStmtBlkStmtRuleParserRuleCall_5_0 = (RuleCall)cStmtAssignment_5.eContents().get(0);
		
		//WhileLoopRule:
		//	'while' '(' c=ExprRule ')' inv+=InvariantClauseRule* stmt=BlkStmtRule;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' c=ExprRule ')' inv+=InvariantClauseRule* stmt=BlkStmtRule
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//c=ExprRule
		public Assignment getCAssignment_2() { return cCAssignment_2; }
		
		//ExprRule
		public RuleCall getCExprRuleParserRuleCall_2_0() { return cCExprRuleParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//inv+=InvariantClauseRule*
		public Assignment getInvAssignment_4() { return cInvAssignment_4; }
		
		//InvariantClauseRule
		public RuleCall getInvInvariantClauseRuleParserRuleCall_4_0() { return cInvInvariantClauseRuleParserRuleCall_4_0; }
		
		//stmt=BlkStmtRule
		public Assignment getStmtAssignment_5() { return cStmtAssignment_5; }
		
		//BlkStmtRule
		public RuleCall getStmtBlkStmtRuleParserRuleCall_5_0() { return cStmtBlkStmtRuleParserRuleCall_5_0; }
	}
	public class InvariantClauseRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.InvariantClauseRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPropertyKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cInvariantKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLTLKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExprRuleParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InvariantClauseRule:
		//	('property' | 'invariant') ('[' 'LTL' ']')? e=ExprRule ';';
		@Override public ParserRule getRule() { return rule; }
		
		//('property' | 'invariant') ('[' 'LTL' ']')? e=ExprRule ';'
		public Group getGroup() { return cGroup; }
		
		//('property' | 'invariant')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'property'
		public Keyword getPropertyKeyword_0_0() { return cPropertyKeyword_0_0; }
		
		//'invariant'
		public Keyword getInvariantKeyword_0_1() { return cInvariantKeyword_0_1; }
		
		//('[' 'LTL' ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//'LTL'
		public Keyword getLTLKeyword_1_1() { return cLTLKeyword_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//e=ExprRule
		public Assignment getEAssignment_2() { return cEAssignment_2; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_2_0() { return cEExprRuleParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ExprRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ExprRule");
		private final RuleCall cE1RuleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExprRule:
		//	E1Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//E1Rule
		public RuleCall getE1RuleParserRuleCall() { return cE1RuleParserRuleCall; }
	}
	public class E1RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E1Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cE2RuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPredAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cPredAlternatives_1_1_0 = (Alternatives)cPredAssignment_1_1.eContents().get(0);
		private final Keyword cPredForallKeyword_1_1_0_0 = (Keyword)cPredAlternatives_1_1_0.eContents().get(0);
		private final Keyword cPredExistsKeyword_1_1_0_1 = (Keyword)cPredAlternatives_1_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cLIdTypeListRuleParserRuleCall_1_3_0 = (RuleCall)cLAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cColonColonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cAAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cAE1RuleParserRuleCall_1_6_0 = (RuleCall)cAAssignment_1_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//E1Rule:
		//	E2Rule | '(' pred=('forall' | 'exists') '(' l=IdTypeListRule? ')' '::' a=E1Rule ')';
		@Override public ParserRule getRule() { return rule; }
		
		//E2Rule | '(' pred=('forall' | 'exists') '(' l=IdTypeListRule? ')' '::' a=E1Rule ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//E2Rule
		public RuleCall getE2RuleParserRuleCall_0() { return cE2RuleParserRuleCall_0; }
		
		//'(' pred=('forall' | 'exists') '(' l=IdTypeListRule? ')' '::' a=E1Rule ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//pred=('forall' | 'exists')
		public Assignment getPredAssignment_1_1() { return cPredAssignment_1_1; }
		
		//('forall' | 'exists')
		public Alternatives getPredAlternatives_1_1_0() { return cPredAlternatives_1_1_0; }
		
		//'forall'
		public Keyword getPredForallKeyword_1_1_0_0() { return cPredForallKeyword_1_1_0_0; }
		
		//'exists'
		public Keyword getPredExistsKeyword_1_1_0_1() { return cPredExistsKeyword_1_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//l=IdTypeListRule?
		public Assignment getLAssignment_1_3() { return cLAssignment_1_3; }
		
		//IdTypeListRule
		public RuleCall getLIdTypeListRuleParserRuleCall_1_3_0() { return cLIdTypeListRuleParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//'::'
		public Keyword getColonColonKeyword_1_5() { return cColonColonKeyword_1_5; }
		
		//a=E1Rule
		public Assignment getAAssignment_1_6() { return cAAssignment_1_6; }
		
		//E1Rule
		public RuleCall getAE1RuleParserRuleCall_1_6_0() { return cAE1RuleParserRuleCall_1_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }
	}
	public class E2RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E2Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cZAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cZE3RuleParserRuleCall_0_0 = (RuleCall)cZAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cQAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cQAlternatives_1_1_0 = (Alternatives)cQAssignment_1_1.eContents().get(0);
		private final RuleCall cQE2RuleParserRuleCall_1_1_0_0 = (RuleCall)cQAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cQE3RuleParserRuleCall_1_1_0_1 = (RuleCall)cQAlternatives_1_1_0.eContents().get(1);
		
		//E2Rule:
		//	z+=E3Rule ('<==>' q+=(E2Rule | E3Rule))*;
		@Override public ParserRule getRule() { return rule; }
		
		//z+=E3Rule ('<==>' q+=(E2Rule | E3Rule))*
		public Group getGroup() { return cGroup; }
		
		//z+=E3Rule
		public Assignment getZAssignment_0() { return cZAssignment_0; }
		
		//E3Rule
		public RuleCall getZE3RuleParserRuleCall_0_0() { return cZE3RuleParserRuleCall_0_0; }
		
		//('<==>' q+=(E2Rule | E3Rule))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'<==>'
		public Keyword getLessThanSignEqualsSignEqualsSignGreaterThanSignKeyword_1_0() { return cLessThanSignEqualsSignEqualsSignGreaterThanSignKeyword_1_0; }
		
		//q+=(E2Rule | E3Rule)
		public Assignment getQAssignment_1_1() { return cQAssignment_1_1; }
		
		//(E2Rule | E3Rule)
		public Alternatives getQAlternatives_1_1_0() { return cQAlternatives_1_1_0; }
		
		//E2Rule
		public RuleCall getQE2RuleParserRuleCall_1_1_0_0() { return cQE2RuleParserRuleCall_1_1_0_0; }
		
		//E3Rule
		public RuleCall getQE3RuleParserRuleCall_1_1_0_1() { return cQE3RuleParserRuleCall_1_1_0_1; }
	}
	public class E3RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E3Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEE4RuleParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cEAlternatives_1_1_0 = (Alternatives)cEAssignment_1_1.eContents().get(0);
		private final RuleCall cEE3RuleParserRuleCall_1_1_0_0 = (RuleCall)cEAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cEE4RuleParserRuleCall_1_1_0_1 = (RuleCall)cEAlternatives_1_1_0.eContents().get(1);
		
		//E3Rule:
		//	e+=E4Rule ('==>' e+=(E3Rule | E4Rule))*;
		@Override public ParserRule getRule() { return rule; }
		
		//e+=E4Rule ('==>' e+=(E3Rule | E4Rule))*
		public Group getGroup() { return cGroup; }
		
		//e+=E4Rule
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//E4Rule
		public RuleCall getEE4RuleParserRuleCall_0_0() { return cEE4RuleParserRuleCall_0_0; }
		
		//('==>' e+=(E3Rule | E4Rule))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_1_0() { return cEqualsSignEqualsSignGreaterThanSignKeyword_1_0; }
		
		//e+=(E3Rule | E4Rule)
		public Assignment getEAssignment_1_1() { return cEAssignment_1_1; }
		
		//(E3Rule | E4Rule)
		public Alternatives getEAlternatives_1_1_0() { return cEAlternatives_1_1_0; }
		
		//E3Rule
		public RuleCall getEE3RuleParserRuleCall_1_1_0_0() { return cEE3RuleParserRuleCall_1_1_0_0; }
		
		//E4Rule
		public RuleCall getEE4RuleParserRuleCall_1_1_0_1() { return cEE4RuleParserRuleCall_1_1_0_1; }
	}
	public class E4RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E4Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cEAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cEE5RuleParserRuleCall_0_0_0 = (RuleCall)cEAssignment_0_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cEE4RuleParserRuleCall_0_2_0 = (RuleCall)cEAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cEAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cEE5RuleParserRuleCall_1_0_0 = (RuleCall)cEAssignment_1_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEE4RuleParserRuleCall_1_2_0 = (RuleCall)cEAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cEAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEE5RuleParserRuleCall_2_0_0 = (RuleCall)cEAssignment_2_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cEAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cEE4RuleParserRuleCall_2_2_0 = (RuleCall)cEAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cEAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEE5RuleParserRuleCall_3_0_0 = (RuleCall)cEAssignment_3_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cEAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cEE4RuleParserRuleCall_3_2_0 = (RuleCall)cEAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cEAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEE5RuleParserRuleCall_4_0_0 = (RuleCall)cEAssignment_4_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cEAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cEE4RuleParserRuleCall_4_2_0 = (RuleCall)cEAssignment_4_2.eContents().get(0);
		private final Assignment cEAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cEE5RuleParserRuleCall_5_0 = (RuleCall)cEAssignment_5.eContents().get(0);
		
		//E4Rule:
		//	e+=E5Rule '&&' e+=E4Rule | e+=E5Rule '||' e+=E4Rule | e+=E5Rule '&' e+=E4Rule | e+=E5Rule '|' e+=E4Rule | e+=E5Rule
		//	'^' e+=E4Rule | e+=E5Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//e+=E5Rule '&&' e+=E4Rule | e+=E5Rule '||' e+=E4Rule | e+=E5Rule '&' e+=E4Rule | e+=E5Rule '|' e+=E4Rule | e+=E5Rule '^'
		//e+=E4Rule | e+=E5Rule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//e+=E5Rule '&&' e+=E4Rule
		public Group getGroup_0() { return cGroup_0; }
		
		//e+=E5Rule
		public Assignment getEAssignment_0_0() { return cEAssignment_0_0; }
		
		//E5Rule
		public RuleCall getEE5RuleParserRuleCall_0_0_0() { return cEE5RuleParserRuleCall_0_0_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_0_1() { return cAmpersandAmpersandKeyword_0_1; }
		
		//e+=E4Rule
		public Assignment getEAssignment_0_2() { return cEAssignment_0_2; }
		
		//E4Rule
		public RuleCall getEE4RuleParserRuleCall_0_2_0() { return cEE4RuleParserRuleCall_0_2_0; }
		
		//e+=E5Rule '||' e+=E4Rule
		public Group getGroup_1() { return cGroup_1; }
		
		//e+=E5Rule
		public Assignment getEAssignment_1_0() { return cEAssignment_1_0; }
		
		//E5Rule
		public RuleCall getEE5RuleParserRuleCall_1_0_0() { return cEE5RuleParserRuleCall_1_0_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//e+=E4Rule
		public Assignment getEAssignment_1_2() { return cEAssignment_1_2; }
		
		//E4Rule
		public RuleCall getEE4RuleParserRuleCall_1_2_0() { return cEE4RuleParserRuleCall_1_2_0; }
		
		//e+=E5Rule '&' e+=E4Rule
		public Group getGroup_2() { return cGroup_2; }
		
		//e+=E5Rule
		public Assignment getEAssignment_2_0() { return cEAssignment_2_0; }
		
		//E5Rule
		public RuleCall getEE5RuleParserRuleCall_2_0_0() { return cEE5RuleParserRuleCall_2_0_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_2_1() { return cAmpersandKeyword_2_1; }
		
		//e+=E4Rule
		public Assignment getEAssignment_2_2() { return cEAssignment_2_2; }
		
		//E4Rule
		public RuleCall getEE4RuleParserRuleCall_2_2_0() { return cEE4RuleParserRuleCall_2_2_0; }
		
		//e+=E5Rule '|' e+=E4Rule
		public Group getGroup_3() { return cGroup_3; }
		
		//e+=E5Rule
		public Assignment getEAssignment_3_0() { return cEAssignment_3_0; }
		
		//E5Rule
		public RuleCall getEE5RuleParserRuleCall_3_0_0() { return cEE5RuleParserRuleCall_3_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3_1() { return cVerticalLineKeyword_3_1; }
		
		//e+=E4Rule
		public Assignment getEAssignment_3_2() { return cEAssignment_3_2; }
		
		//E4Rule
		public RuleCall getEE4RuleParserRuleCall_3_2_0() { return cEE4RuleParserRuleCall_3_2_0; }
		
		//e+=E5Rule '^' e+=E4Rule
		public Group getGroup_4() { return cGroup_4; }
		
		//e+=E5Rule
		public Assignment getEAssignment_4_0() { return cEAssignment_4_0; }
		
		//E5Rule
		public RuleCall getEE5RuleParserRuleCall_4_0_0() { return cEE5RuleParserRuleCall_4_0_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_4_1() { return cCircumflexAccentKeyword_4_1; }
		
		//e+=E4Rule
		public Assignment getEAssignment_4_2() { return cEAssignment_4_2; }
		
		//E4Rule
		public RuleCall getEE4RuleParserRuleCall_4_2_0() { return cEE4RuleParserRuleCall_4_2_0; }
		
		//e+=E5Rule
		public Assignment getEAssignment_5() { return cEAssignment_5; }
		
		//E5Rule
		public RuleCall getEE5RuleParserRuleCall_5_0() { return cEE5RuleParserRuleCall_5_0; }
	}
	public class E5RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E5Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEE6RuleParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpREL_OP_RULETerminalRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cEAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEE6RuleParserRuleCall_1_1_0 = (RuleCall)cEAssignment_1_1.eContents().get(0);
		
		//E5Rule:
		//	e+=E6Rule (op=REL_OP_RULE e+=E6Rule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//e+=E6Rule (op=REL_OP_RULE e+=E6Rule)*
		public Group getGroup() { return cGroup; }
		
		//e+=E6Rule
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//E6Rule
		public RuleCall getEE6RuleParserRuleCall_0_0() { return cEE6RuleParserRuleCall_0_0; }
		
		//(op=REL_OP_RULE e+=E6Rule)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op=REL_OP_RULE
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//REL_OP_RULE
		public RuleCall getOpREL_OP_RULETerminalRuleCall_1_0_0() { return cOpREL_OP_RULETerminalRuleCall_1_0_0; }
		
		//e+=E6Rule
		public Assignment getEAssignment_1_1() { return cEAssignment_1_1; }
		
		//E6Rule
		public RuleCall getEE6RuleParserRuleCall_1_1_0() { return cEE6RuleParserRuleCall_1_1_0; }
	}
	public class E6RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E6Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEE7RuleParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEE6RuleParserRuleCall_1_1_0 = (RuleCall)cEAssignment_1_1.eContents().get(0);
		
		//E6Rule:
		//	e+=E7Rule ('++' e+=E6Rule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//e+=E7Rule ('++' e+=E6Rule)*
		public Group getGroup() { return cGroup; }
		
		//e+=E7Rule
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//E7Rule
		public RuleCall getEE7RuleParserRuleCall_0_0() { return cEE7RuleParserRuleCall_0_0; }
		
		//('++' e+=E6Rule)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//e+=E6Rule
		public Assignment getEAssignment_1_1() { return cEAssignment_1_1; }
		
		//E6Rule
		public RuleCall getEE6RuleParserRuleCall_1_1_0() { return cEE6RuleParserRuleCall_1_1_0; }
	}
	public class E7RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E7Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEE8RuleParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEE7RuleParserRuleCall_1_1_0 = (RuleCall)cEAssignment_1_1.eContents().get(0);
		
		//E7Rule:
		//	e+=E8Rule ('+' e+=E7Rule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//e+=E8Rule ('+' e+=E7Rule)*
		public Group getGroup() { return cGroup; }
		
		//e+=E8Rule
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//E8Rule
		public RuleCall getEE8RuleParserRuleCall_0_0() { return cEE8RuleParserRuleCall_0_0; }
		
		//('+' e+=E7Rule)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//e+=E7Rule
		public Assignment getEAssignment_1_1() { return cEAssignment_1_1; }
		
		//E7Rule
		public RuleCall getEE7RuleParserRuleCall_1_1_0() { return cEE7RuleParserRuleCall_1_1_0; }
	}
	public class E8RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E8Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEE9RuleParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEE9RuleParserRuleCall_1_1_0 = (RuleCall)cEAssignment_1_1.eContents().get(0);
		
		//E8Rule:
		//	e+=E9Rule ('-' e+=E9Rule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//e+=E9Rule ('-' e+=E9Rule)*
		public Group getGroup() { return cGroup; }
		
		//e+=E9Rule
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//E9Rule
		public RuleCall getEE9RuleParserRuleCall_0_0() { return cEE9RuleParserRuleCall_0_0; }
		
		//('-' e+=E9Rule)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }
		
		//e+=E9Rule
		public Assignment getEAssignment_1_1() { return cEAssignment_1_1; }
		
		//E9Rule
		public RuleCall getEE9RuleParserRuleCall_1_1_0() { return cEE9RuleParserRuleCall_1_1_0; }
	}
	public class E9RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E9Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEE10RuleParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEE10RuleParserRuleCall_1_1_0 = (RuleCall)cEAssignment_1_1.eContents().get(0);
		
		//E9Rule:
		//	e+=E10Rule ('*' e+=E10Rule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//e+=E10Rule ('*' e+=E10Rule)*
		public Group getGroup() { return cGroup; }
		
		//e+=E10Rule
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//E10Rule
		public RuleCall getEE10RuleParserRuleCall_0_0() { return cEE10RuleParserRuleCall_0_0; }
		
		//('*' e+=E10Rule)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0() { return cAsteriskKeyword_1_0; }
		
		//e+=E10Rule
		public Assignment getEAssignment_1_1() { return cEAssignment_1_1; }
		
		//E10Rule
		public RuleCall getEE10RuleParserRuleCall_1_1_0() { return cEE10RuleParserRuleCall_1_1_0; }
	}
	public class E10RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E10Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOpAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0_0 = (Alternatives)cOpAssignment_0_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_0_0_0 = (Keyword)cOpAlternatives_0_0_0.eContents().get(0);
		private final Keyword cOpExclamationMarkKeyword_0_0_0_1 = (Keyword)cOpAlternatives_0_0_0.eContents().get(1);
		private final Keyword cOpTildeKeyword_0_0_0_2 = (Keyword)cOpAlternatives_0_0_0.eContents().get(2);
		private final Assignment cEAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cEE11RuleParserRuleCall_0_1_0 = (RuleCall)cEAssignment_0_1.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEE11RuleParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		
		//E10Rule:
		//	op=('-' | '!' | '~') e=E11Rule | e=E11Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//op=('-' | '!' | '~') e=E11Rule | e=E11Rule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//op=('-' | '!' | '~') e=E11Rule
		public Group getGroup_0() { return cGroup_0; }
		
		//op=('-' | '!' | '~')
		public Assignment getOpAssignment_0_0() { return cOpAssignment_0_0; }
		
		//('-' | '!' | '~')
		public Alternatives getOpAlternatives_0_0_0() { return cOpAlternatives_0_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_0_0_0_0() { return cOpHyphenMinusKeyword_0_0_0_0; }
		
		//'!'
		public Keyword getOpExclamationMarkKeyword_0_0_0_1() { return cOpExclamationMarkKeyword_0_0_0_1; }
		
		//'~'
		public Keyword getOpTildeKeyword_0_0_0_2() { return cOpTildeKeyword_0_0_0_2; }
		
		//e=E11Rule
		public Assignment getEAssignment_0_1() { return cEAssignment_0_1; }
		
		//E11Rule
		public RuleCall getEE11RuleParserRuleCall_0_1_0() { return cEE11RuleParserRuleCall_0_1_0; }
		
		//e=E11Rule
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//E11Rule
		public RuleCall getEE11RuleParserRuleCall_1_0() { return cEE11RuleParserRuleCall_1_0; }
	}
	public class E11RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E11Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cE12RuleParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cLAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLExprListRuleParserRuleCall_0_2_0 = (RuleCall)cLAssignment_0_2.eContents().get(0);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Group cGroup_0_3_0 = (Group)cAlternatives_0_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_3_0_0 = (Keyword)cGroup_0_3_0.eContents().get(0);
		private final Assignment cEAssignment_0_3_0_1 = (Assignment)cGroup_0_3_0.eContents().get(1);
		private final RuleCall cEExprRuleParserRuleCall_0_3_0_1_0 = (RuleCall)cEAssignment_0_3_0_1.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cAlternatives_0_3.eContents().get(1);
		private final Keyword cColonKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cEAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cEExprRuleParserRuleCall_0_3_1_1_0 = (RuleCall)cEAssignment_0_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cE12RuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//E11Rule:
		//	E12Rule '[' l+=ExprListRule ('->' e+=ExprRule | ':' e+=ExprRule)? ']'
		//	//		| E12Rule  '[' e+=ExprRule  (','e+=ExprRule )* '->'e+=ExprRule  ']'
		//	//		| E12Rule  '[' e+=ExprRule  ':'e+=ExprRule  ']'
		//	| E12Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//E12Rule '[' l+=ExprListRule ('->' e+=ExprRule | ':' e+=ExprRule)? ']' //		| E12Rule  '[' e+=ExprRule  (','e+=ExprRule )* '->'e+=ExprRule  ']'
		////		| E12Rule  '[' e+=ExprRule  ':'e+=ExprRule  ']'
		//| E12Rule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//E12Rule '[' l+=ExprListRule ('->' e+=ExprRule | ':' e+=ExprRule)? ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//E12Rule
		public RuleCall getE12RuleParserRuleCall_0_0() { return cE12RuleParserRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }
		
		//l+=ExprListRule
		public Assignment getLAssignment_0_2() { return cLAssignment_0_2; }
		
		//ExprListRule
		public RuleCall getLExprListRuleParserRuleCall_0_2_0() { return cLExprListRuleParserRuleCall_0_2_0; }
		
		//('->' e+=ExprRule | ':' e+=ExprRule)?
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }
		
		//'->' e+=ExprRule
		public Group getGroup_0_3_0() { return cGroup_0_3_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_3_0_0() { return cHyphenMinusGreaterThanSignKeyword_0_3_0_0; }
		
		//e+=ExprRule
		public Assignment getEAssignment_0_3_0_1() { return cEAssignment_0_3_0_1; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_0_3_0_1_0() { return cEExprRuleParserRuleCall_0_3_0_1_0; }
		
		//':' e+=ExprRule
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }
		
		//':'
		public Keyword getColonKeyword_0_3_1_0() { return cColonKeyword_0_3_1_0; }
		
		//e+=ExprRule
		public Assignment getEAssignment_0_3_1_1() { return cEAssignment_0_3_1_1; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_0_3_1_1_0() { return cEExprRuleParserRuleCall_0_3_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//E12Rule
		public RuleCall getE12RuleParserRuleCall_1() { return cE12RuleParserRuleCall_1; }
	}
	public class E12RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E12Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJE13RuleParserRuleCall_0_0 = (RuleCall)cJAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVExprListRuleParserRuleCall_1_1_0 = (RuleCall)cVAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//E12Rule:
		//	j=E13Rule ('(' v=ExprListRule? ')'
		//	//		| 
		//	//		(('.' name+=ID )+)
		//)?;
		@Override public ParserRule getRule() { return rule; }
		
		//j=E13Rule ('(' v=ExprListRule? ')' //		| 
		////		(('.' name+=ID )+)
		//)?
		public Group getGroup() { return cGroup; }
		
		//j=E13Rule
		public Assignment getJAssignment_0() { return cJAssignment_0; }
		
		//E13Rule
		public RuleCall getJE13RuleParserRuleCall_0_0() { return cJE13RuleParserRuleCall_0_0; }
		
		//('(' v=ExprListRule? ')' //		| 
		////		(('.' name+=ID )+)
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//v=ExprListRule?
		public Assignment getVAssignment_1_1() { return cVAssignment_1_1; }
		
		//ExprListRule
		public RuleCall getVExprListRuleParserRuleCall_1_1_0() { return cVExprListRuleParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class RHSVarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.RHSVarRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cVarVarDeclCrossReference_1_0_0 = (CrossReference)cVarAssignment_1_0.eContents().get(0);
		private final RuleCall cVarVarDeclFQNParserRuleCall_1_0_0_1 = (RuleCall)cVarVarDeclCrossReference_1_0_0.eContents().get(1);
		private final Assignment cPrimeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cPrimeApostropheKeyword_1_1_0 = (Keyword)cPrimeAssignment_1_1.eContents().get(0);
		
		//RHSVarRef VarRef:
		//	{VarRef} (var=[VarDecl|FQN] prime='\''?);
		@Override public ParserRule getRule() { return rule; }
		
		//{VarRef} (var=[VarDecl|FQN] prime='\''?)
		public Group getGroup() { return cGroup; }
		
		//{VarRef}
		public Action getVarRefAction_0() { return cVarRefAction_0; }
		
		//(var=[VarDecl|FQN] prime='\''?)
		public Group getGroup_1() { return cGroup_1; }
		
		//var=[VarDecl|FQN]
		public Assignment getVarAssignment_1_0() { return cVarAssignment_1_0; }
		
		//[VarDecl|FQN]
		public CrossReference getVarVarDeclCrossReference_1_0_0() { return cVarVarDeclCrossReference_1_0_0; }
		
		//FQN
		public RuleCall getVarVarDeclFQNParserRuleCall_1_0_0_1() { return cVarVarDeclFQNParserRuleCall_1_0_0_1; }
		
		//prime='\''?
		public Assignment getPrimeAssignment_1_1() { return cPrimeAssignment_1_1; }
		
		//'\''
		public Keyword getPrimeApostropheKeyword_1_1_0() { return cPrimeApostropheKeyword_1_1_0; }
	}
	public class EnumRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.EnumRef");
		private final Assignment c_enumAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference c_enumEnumValueCrossReference_0 = (CrossReference)c_enumAssignment.eContents().get(0);
		private final RuleCall c_enumEnumValueFQNParserRuleCall_0_1 = (RuleCall)c_enumEnumValueCrossReference_0.eContents().get(1);
		
		//EnumRef:
		//	_enum=[EnumValue|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//_enum=[EnumValue|FQN]
		public Assignment get_enumAssignment() { return c_enumAssignment; }
		
		//[EnumValue|FQN]
		public CrossReference get_enumEnumValueCrossReference_0() { return c_enumEnumValueCrossReference_0; }
		
		//FQN
		public RuleCall get_enumEnumValueFQNParserRuleCall_0_1() { return c_enumEnumValueFQNParserRuleCall_0_1; }
	}
	public class E13RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.E13Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRHSVarRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTupleExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIfPrimaryExprParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParenthesisExprParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//E13Rule:
		//	ConstRule
		//	| RHSVarRef
		//	| EnumRef
		//	| TupleExpr
		//	| IfPrimaryExpr
		//	| ParenthesisExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstRule | RHSVarRef | EnumRef | TupleExpr | IfPrimaryExpr | ParenthesisExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstRule
		public RuleCall getConstRuleParserRuleCall_0() { return cConstRuleParserRuleCall_0; }
		
		//RHSVarRef
		public RuleCall getRHSVarRefParserRuleCall_1() { return cRHSVarRefParserRuleCall_1; }
		
		//EnumRef
		public RuleCall getEnumRefParserRuleCall_2() { return cEnumRefParserRuleCall_2; }
		
		//TupleExpr
		public RuleCall getTupleExprParserRuleCall_3() { return cTupleExprParserRuleCall_3; }
		
		//IfPrimaryExpr
		public RuleCall getIfPrimaryExprParserRuleCall_4() { return cIfPrimaryExprParserRuleCall_4; }
		
		//ParenthesisExpr
		public RuleCall getParenthesisExprParserRuleCall_5() { return cParenthesisExprParserRuleCall_5; }
	}
	public class TupleExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.TupleExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExprRuleParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEExprRuleParserRuleCall_2_1_0 = (RuleCall)cEAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TupleExpr:
		//	'{' e+=ExprRule (',' e+=ExprRule)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' e+=ExprRule (',' e+=ExprRule)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//e+=ExprRule
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_1_0() { return cEExprRuleParserRuleCall_1_0; }
		
		//(',' e+=ExprRule)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//e+=ExprRule
		public Assignment getEAssignment_2_1() { return cEAssignment_2_1; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_2_1_0() { return cEExprRuleParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class IfPrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.IfPrimaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCExprRuleParserRuleCall_2_0 = (RuleCall)cCAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEExprRuleParserRuleCall_5_0 = (RuleCall)cEAssignment_5.eContents().get(0);
		private final Keyword cElseKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEExprRuleParserRuleCall_7_0 = (RuleCall)cEAssignment_7.eContents().get(0);
		
		//IfPrimaryExpr:
		//	'if' '(' c=ExprRule ')' 'then' e+=ExprRule 'else' e+=ExprRule;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' c=ExprRule ')' 'then' e+=ExprRule 'else' e+=ExprRule
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//c=ExprRule
		public Assignment getCAssignment_2() { return cCAssignment_2; }
		
		//ExprRule
		public RuleCall getCExprRuleParserRuleCall_2_0() { return cCExprRuleParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//e+=ExprRule
		public Assignment getEAssignment_5() { return cEAssignment_5; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_5_0() { return cEExprRuleParserRuleCall_5_0; }
		
		//'else'
		public Keyword getElseKeyword_6() { return cElseKeyword_6; }
		
		//e+=ExprRule
		public Assignment getEAssignment_7() { return cEAssignment_7; }
		
		//ExprRule
		public RuleCall getEExprRuleParserRuleCall_7_0() { return cEExprRuleParserRuleCall_7_0; }
	}
	public class ParenthesisExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ParenthesisExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExprRuleParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesisExpr:
		//	'(' ExprRule ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ExprRule ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//ExprRule
		public RuleCall getExprRuleParserRuleCall_1() { return cExprRuleParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ConstRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ConstRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cVFalseKeyword_0_0 = (Keyword)cVAssignment_0.eContents().get(0);
		private final Assignment cVAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cVTrueKeyword_1_0 = (Keyword)cVAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cDAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDINTTerminalRuleCall_2_0_0 = (RuleCall)cDAssignment_2_0.eContents().get(0);
		private final Assignment cWAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWBVTerminalRuleCall_2_1_0 = (RuleCall)cWAssignment_2_1.eContents().get(0);
		private final Assignment cVAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cVSTRINGTerminalRuleCall_3_0 = (RuleCall)cVAssignment_3.eContents().get(0);
		
		//ConstRule:
		//	v='false' | v='true' | d=INT w=BV? | v=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//v='false' | v='true' | d=INT w=BV? | v=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//v='false'
		public Assignment getVAssignment_0() { return cVAssignment_0; }
		
		//'false'
		public Keyword getVFalseKeyword_0_0() { return cVFalseKeyword_0_0; }
		
		//v='true'
		public Assignment getVAssignment_1() { return cVAssignment_1; }
		
		//'true'
		public Keyword getVTrueKeyword_1_0() { return cVTrueKeyword_1_0; }
		
		//d=INT w=BV?
		public Group getGroup_2() { return cGroup_2; }
		
		//d=INT
		public Assignment getDAssignment_2_0() { return cDAssignment_2_0; }
		
		//INT
		public RuleCall getDINTTerminalRuleCall_2_0_0() { return cDINTTerminalRuleCall_2_0_0; }
		
		//w=BV?
		public Assignment getWAssignment_2_1() { return cWAssignment_2_1; }
		
		//BV
		public RuleCall getWBVTerminalRuleCall_2_1_0() { return cWBVTerminalRuleCall_2_1_0; }
		
		//v=STRING
		public Assignment getVAssignment_3() { return cVAssignment_3; }
		
		//STRING
		public RuleCall getVSTRINGTerminalRuleCall_3_0() { return cVSTRINGTerminalRuleCall_3_0; }
	}
	public class TypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.TypeRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumTypeRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTupleTypeRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRecordTypeRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cArrayTypeRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSynonymTypeRuleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TypeRule Type:
		//	PrimitiveTypeRule
		//	| EnumTypeRule
		//	| TupleTypeRule
		//	| RecordTypeRule
		//	| ArrayTypeRule
		//	| SynonymTypeRule;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveTypeRule | EnumTypeRule | TupleTypeRule | RecordTypeRule | ArrayTypeRule | SynonymTypeRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveTypeRule
		public RuleCall getPrimitiveTypeRuleParserRuleCall_0() { return cPrimitiveTypeRuleParserRuleCall_0; }
		
		//EnumTypeRule
		public RuleCall getEnumTypeRuleParserRuleCall_1() { return cEnumTypeRuleParserRuleCall_1; }
		
		//TupleTypeRule
		public RuleCall getTupleTypeRuleParserRuleCall_2() { return cTupleTypeRuleParserRuleCall_2; }
		
		//RecordTypeRule
		public RuleCall getRecordTypeRuleParserRuleCall_3() { return cRecordTypeRuleParserRuleCall_3; }
		
		//ArrayTypeRule
		public RuleCall getArrayTypeRuleParserRuleCall_4() { return cArrayTypeRuleParserRuleCall_4; }
		
		//SynonymTypeRule
		public RuleCall getSynonymTypeRuleParserRuleCall_5() { return cSynonymTypeRuleParserRuleCall_5; }
	}
	public class PrimitiveTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.PrimitiveTypeRule");
		private final Assignment cTAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTAlternatives_0 = (Alternatives)cTAssignment.eContents().get(0);
		private final Keyword cTBooleanKeyword_0_0 = (Keyword)cTAlternatives_0.eContents().get(0);
		private final Keyword cTIntegerKeyword_0_1 = (Keyword)cTAlternatives_0.eContents().get(1);
		private final RuleCall cTBVTerminalRuleCall_0_2 = (RuleCall)cTAlternatives_0.eContents().get(2);
		
		////|ExternalTypeRule;
		//PrimitiveTypeRule Type:
		//	t=('boolean' | 'integer' | BV);
		@Override public ParserRule getRule() { return rule; }
		
		//t=('boolean' | 'integer' | BV)
		public Assignment getTAssignment() { return cTAssignment; }
		
		//('boolean' | 'integer' | BV)
		public Alternatives getTAlternatives_0() { return cTAlternatives_0; }
		
		//'boolean'
		public Keyword getTBooleanKeyword_0_0() { return cTBooleanKeyword_0_0; }
		
		//'integer'
		public Keyword getTIntegerKeyword_0_1() { return cTIntegerKeyword_0_1; }
		
		//BV
		public RuleCall getTBVTerminalRuleCall_0_2() { return cTBVTerminalRuleCall_0_2; }
	}
	public class EnumTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.EnumTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnumsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnumsEnumValueParserRuleCall_3_0 = (RuleCall)cEnumsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEnumsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEnumsEnumValueParserRuleCall_4_1_0 = (RuleCall)cEnumsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EnumTypeRule Type:
		//	{EnumTypeRule} 'enum' '{' enums+=EnumValue (',' enums+=EnumValue)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumTypeRule} 'enum' '{' enums+=EnumValue (',' enums+=EnumValue)* '}'
		public Group getGroup() { return cGroup; }
		
		//{EnumTypeRule}
		public Action getEnumTypeRuleAction_0() { return cEnumTypeRuleAction_0; }
		
		//'enum'
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//enums+=EnumValue
		public Assignment getEnumsAssignment_3() { return cEnumsAssignment_3; }
		
		//EnumValue
		public RuleCall getEnumsEnumValueParserRuleCall_3_0() { return cEnumsEnumValueParserRuleCall_3_0; }
		
		//(',' enums+=EnumValue)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//enums+=EnumValue
		public Assignment getEnumsAssignment_4_1() { return cEnumsAssignment_4_1; }
		
		//EnumValue
		public RuleCall getEnumsEnumValueParserRuleCall_4_1_0() { return cEnumsEnumValueParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.EnumValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumValue VarDecl:
		//	{EnumValue} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumValue} name=ID
		public Group getGroup() { return cGroup; }
		
		//{EnumValue}
		public Action getEnumValueAction_0() { return cEnumValueAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TupleTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.TupleTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTupleTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTupleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTupleTypeRuleParserRuleCall_2_0 = (RuleCall)cTupleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTupleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTupleTypeRuleParserRuleCall_3_1_0 = (RuleCall)cTupleAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TupleTypeRule Type:
		//	{TupleTypeRule} '{' tuple+=TypeRule (',' tuple+=TypeRule)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{TupleTypeRule} '{' tuple+=TypeRule (',' tuple+=TypeRule)* '}'
		public Group getGroup() { return cGroup; }
		
		//{TupleTypeRule}
		public Action getTupleTypeRuleAction_0() { return cTupleTypeRuleAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//tuple+=TypeRule
		public Assignment getTupleAssignment_2() { return cTupleAssignment_2; }
		
		//TypeRule
		public RuleCall getTupleTypeRuleParserRuleCall_2_0() { return cTupleTypeRuleParserRuleCall_2_0; }
		
		//(',' tuple+=TypeRule)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//tuple+=TypeRule
		public Assignment getTupleAssignment_3_1() { return cTupleAssignment_3_1; }
		
		//TypeRule
		public RuleCall getTupleTypeRuleParserRuleCall_3_1_0() { return cTupleTypeRuleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RecordTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.RecordTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRecordTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRecordKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsIdTypeListRuleParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RecordTypeRule Type:
		//	{RecordTypeRule} 'record' '{' fields+=IdTypeListRule '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{RecordTypeRule} 'record' '{' fields+=IdTypeListRule '}'
		public Group getGroup() { return cGroup; }
		
		//{RecordTypeRule}
		public Action getRecordTypeRuleAction_0() { return cRecordTypeRuleAction_0; }
		
		//'record'
		public Keyword getRecordKeyword_1() { return cRecordKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields+=IdTypeListRule
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//IdTypeListRule
		public RuleCall getFieldsIdTypeListRuleParserRuleCall_3_0() { return cFieldsIdTypeListRuleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ArrayTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ArrayTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBTypeRuleParserRuleCall_2_0 = (RuleCall)cBAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBTypeRuleParserRuleCall_3_1_0 = (RuleCall)cBAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBaseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBaseTypeRuleParserRuleCall_5_0 = (RuleCall)cBaseAssignment_5.eContents().get(0);
		
		//ArrayTypeRule Type:
		//	{ArrayTypeRule} '[' b+=TypeRule (',' b+=TypeRule)* ']' base+=TypeRule;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArrayTypeRule} '[' b+=TypeRule (',' b+=TypeRule)* ']' base+=TypeRule
		public Group getGroup() { return cGroup; }
		
		//{ArrayTypeRule}
		public Action getArrayTypeRuleAction_0() { return cArrayTypeRuleAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//b+=TypeRule
		public Assignment getBAssignment_2() { return cBAssignment_2; }
		
		//TypeRule
		public RuleCall getBTypeRuleParserRuleCall_2_0() { return cBTypeRuleParserRuleCall_2_0; }
		
		//(',' b+=TypeRule)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//b+=TypeRule
		public Assignment getBAssignment_3_1() { return cBAssignment_3_1; }
		
		//TypeRule
		public RuleCall getBTypeRuleParserRuleCall_3_1_0() { return cBTypeRuleParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//base+=TypeRule
		public Assignment getBaseAssignment_5() { return cBaseAssignment_5; }
		
		//TypeRule
		public RuleCall getBaseTypeRuleParserRuleCall_5_0() { return cBaseTypeRuleParserRuleCall_5_0; }
	}
	public class SynonymTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.SynonymTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSynonymTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeclTypeDeclCrossReference_1_0 = (CrossReference)cDeclAssignment_1.eContents().get(0);
		private final RuleCall cDeclTypeDeclIDTerminalRuleCall_1_0_1 = (RuleCall)cDeclTypeDeclCrossReference_1_0.eContents().get(1);
		
		//SynonymTypeRule Type:
		//	{SynonymTypeRule} decl=[TypeDecl];
		@Override public ParserRule getRule() { return rule; }
		
		//{SynonymTypeRule} decl=[TypeDecl]
		public Group getGroup() { return cGroup; }
		
		//{SynonymTypeRule}
		public Action getSynonymTypeRuleAction_0() { return cSynonymTypeRuleAction_0; }
		
		//decl=[TypeDecl]
		public Assignment getDeclAssignment_1() { return cDeclAssignment_1; }
		
		//[TypeDecl]
		public CrossReference getDeclTypeDeclCrossReference_1_0() { return cDeclTypeDeclCrossReference_1_0; }
		
		//ID
		public RuleCall getDeclTypeDeclIDTerminalRuleCall_1_0_1() { return cDeclTypeDeclIDTerminalRuleCall_1_0_1; }
	}
	public class ControlBlockRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ControlBlockRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlBlockRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cControlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCmdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmdCmdRuleParserRuleCall_3_0 = (RuleCall)cCmdAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ControlBlockRule:
		//	{ControlBlockRule} 'control' '{' cmd+=CmdRule* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ControlBlockRule} 'control' '{' cmd+=CmdRule* '}'
		public Group getGroup() { return cGroup; }
		
		//{ControlBlockRule}
		public Action getControlBlockRuleAction_0() { return cControlBlockRuleAction_0; }
		
		//'control'
		public Keyword getControlKeyword_1() { return cControlKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//cmd+=CmdRule*
		public Assignment getCmdAssignment_3() { return cCmdAssignment_3; }
		
		//CmdRule
		public RuleCall getCmdCmdRuleParserRuleCall_3_0() { return cCmdCmdRuleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CmdRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.CmdRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLhsVarDeclParserRuleCall_0_0_0 = (RuleCall)cLhsAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCCmdNameRuleParserRuleCall_2_0 = (RuleCall)cCAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLidAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLidIdListRuleParserRuleCall_3_1_0 = (RuleCall)cLidAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLexAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLexExprListRuleParserRuleCall_4_1_0 = (RuleCall)cLexAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CmdRule:
		//	(lhs=VarDecl '=')? (ID '.')? c=CmdNameRule ('[' lid=IdListRule ']')? ('(' lex=ExprListRule? ')')? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(lhs=VarDecl '=')? (ID '.')? c=CmdNameRule ('[' lid=IdListRule ']')? ('(' lex=ExprListRule? ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//(lhs=VarDecl '=')?
		public Group getGroup_0() { return cGroup_0; }
		
		//lhs=VarDecl
		public Assignment getLhsAssignment_0_0() { return cLhsAssignment_0_0; }
		
		//VarDecl
		public RuleCall getLhsVarDeclParserRuleCall_0_0_0() { return cLhsVarDeclParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//(ID '.')?
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//c=CmdNameRule
		public Assignment getCAssignment_2() { return cCAssignment_2; }
		
		//CmdNameRule
		public RuleCall getCCmdNameRuleParserRuleCall_2_0() { return cCCmdNameRuleParserRuleCall_2_0; }
		
		//('[' lid=IdListRule ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//lid=IdListRule
		public Assignment getLidAssignment_3_1() { return cLidAssignment_3_1; }
		
		//IdListRule
		public RuleCall getLidIdListRuleParserRuleCall_3_1_0() { return cLidIdListRuleParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//('(' lex=ExprListRule? ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//lex=ExprListRule?
		public Assignment getLexAssignment_4_1() { return cLexAssignment_4_1; }
		
		//ExprListRule
		public RuleCall getLexExprListRuleParserRuleCall_4_1_0() { return cLexExprListRuleParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class CmdNameRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.CmdNameRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBmcKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCheckKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cClear_contextKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInductionKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrintKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPrint_cexKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPrint_moduleKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPrint_resultsKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cPrint_smt2Keyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cSynthesize_invariantKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cUnrollKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cVerifyKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//CmdNameRule:
		//	'bmc'
		//	| 'check'
		//	| 'clear_context'
		//	| 'induction'
		//	| 'print'
		//	| 'print_cex'
		//	| 'print_module'
		//	| 'print_results'
		//	| 'print_smt2'
		//	| 'synthesize_invariant'
		//	| 'unroll'
		//	| 'verify';
		@Override public ParserRule getRule() { return rule; }
		
		//'bmc' | 'check' | 'clear_context' | 'induction' | 'print' | 'print_cex' | 'print_module' | 'print_results' |
		//'print_smt2' | 'synthesize_invariant' | 'unroll' | 'verify'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'bmc'
		public Keyword getBmcKeyword_0() { return cBmcKeyword_0; }
		
		//'check'
		public Keyword getCheckKeyword_1() { return cCheckKeyword_1; }
		
		//'clear_context'
		public Keyword getClear_contextKeyword_2() { return cClear_contextKeyword_2; }
		
		//'induction'
		public Keyword getInductionKeyword_3() { return cInductionKeyword_3; }
		
		//'print'
		public Keyword getPrintKeyword_4() { return cPrintKeyword_4; }
		
		//'print_cex'
		public Keyword getPrint_cexKeyword_5() { return cPrint_cexKeyword_5; }
		
		//'print_module'
		public Keyword getPrint_moduleKeyword_6() { return cPrint_moduleKeyword_6; }
		
		//'print_results'
		public Keyword getPrint_resultsKeyword_7() { return cPrint_resultsKeyword_7; }
		
		//'print_smt2'
		public Keyword getPrint_smt2Keyword_8() { return cPrint_smt2Keyword_8; }
		
		//'synthesize_invariant'
		public Keyword getSynthesize_invariantKeyword_9() { return cSynthesize_invariantKeyword_9; }
		
		//'unroll'
		public Keyword getUnrollKeyword_10() { return cUnrollKeyword_10; }
		
		//'verify'
		public Keyword getVerifyKeyword_11() { return cVerifyKeyword_11; }
	}
	public class IdListRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.IdListRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLIdListRuleParserRuleCall_1_2_0 = (RuleCall)cLAssignment_1_2.eContents().get(0);
		
		//IdListRule:
		//	name+=ID | name+=ID ',' l=IdListRule;
		@Override public ParserRule getRule() { return rule; }
		
		//name+=ID | name+=ID ',' l=IdListRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name+=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//name+=ID ',' l=IdListRule
		public Group getGroup_1() { return cGroup_1; }
		
		//name+=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//l=IdListRule
		public Assignment getLAssignment_1_2() { return cLAssignment_1_2; }
		
		//IdListRule
		public RuleCall getLIdListRuleParserRuleCall_1_2_0() { return cLIdListRuleParserRuleCall_1_2_0; }
	}
	public class IdTypeListRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.IdTypeListRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKIDTerminalRuleCall_0_0 = (RuleCall)cKAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cZAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cZIDTerminalRuleCall_1_1_0 = (RuleCall)cZAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTTypeRuleParserRuleCall_3_0 = (RuleCall)cTAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLIdTypeListRuleParserRuleCall_4_1_0 = (RuleCall)cLAssignment_4_1.eContents().get(0);
		
		//IdTypeListRule:
		//	k+=ID (',' z+=ID)* ':' t=TypeRule (',' l=IdTypeListRule)?;
		@Override public ParserRule getRule() { return rule; }
		
		//k+=ID (',' z+=ID)* ':' t=TypeRule (',' l=IdTypeListRule)?
		public Group getGroup() { return cGroup; }
		
		//k+=ID
		public Assignment getKAssignment_0() { return cKAssignment_0; }
		
		//ID
		public RuleCall getKIDTerminalRuleCall_0_0() { return cKIDTerminalRuleCall_0_0; }
		
		//(',' z+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//z+=ID
		public Assignment getZAssignment_1_1() { return cZAssignment_1_1; }
		
		//ID
		public RuleCall getZIDTerminalRuleCall_1_1_0() { return cZIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//t=TypeRule
		public Assignment getTAssignment_3() { return cTAssignment_3; }
		
		//TypeRule
		public RuleCall getTTypeRuleParserRuleCall_3_0() { return cTTypeRuleParserRuleCall_3_0; }
		
		//(',' l=IdTypeListRule)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//l=IdTypeListRule
		public Assignment getLAssignment_4_1() { return cLAssignment_4_1; }
		
		//IdTypeListRule
		public RuleCall getLIdTypeListRuleParserRuleCall_4_1_0() { return cLIdTypeListRuleParserRuleCall_4_1_0; }
	}
	public class ExprListRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.ExprListRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprListRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprsExprRuleParserRuleCall_1_0 = (RuleCall)cExprsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprsExprRuleParserRuleCall_2_1_0 = (RuleCall)cExprsAssignment_2_1.eContents().get(0);
		
		//ExprListRule:
		//	{ExprListRule} exprs+=ExprRule (',' exprs+=ExprRule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExprListRule} exprs+=ExprRule (',' exprs+=ExprRule)*
		public Group getGroup() { return cGroup; }
		
		//{ExprListRule}
		public Action getExprListRuleAction_0() { return cExprListRuleAction_0; }
		
		//exprs+=ExprRule
		public Assignment getExprsAssignment_1() { return cExprsAssignment_1; }
		
		//ExprRule
		public RuleCall getExprsExprRuleParserRuleCall_1_0() { return cExprsExprRuleParserRuleCall_1_0; }
		
		//(',' exprs+=ExprRule)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//exprs+=ExprRule
		public Assignment getExprsAssignment_2_1() { return cExprsAssignment_2_1; }
		
		//ExprRule
		public RuleCall getExprsExprRuleParserRuleCall_2_1_0() { return cExprsExprRuleParserRuleCall_2_1_0; }
	}
	
	
	private final ModelRuleElements pModelRule;
	private final FQNElements pFQN;
	private final TerminalRule tSTRING;
	private final ModuleRuleElements pModuleRule;
	private final DeclRuleElements pDeclRule;
	private final TypeDeclRuleElements pTypeDeclRule;
	private final InputsDeclRuleElements pInputsDeclRule;
	private final OutputsDeclRuleElements pOutputsDeclRule;
	private final VarsDeclRuleElements pVarsDeclRule;
	private final VarDeclElements pVarDecl;
	private final ConstsDeclRuleElements pConstsDeclRule;
	private final ConstDeclElements pConstDecl;
	private final SharedVarsDeclRuleElements pSharedVarsDeclRule;
	private final DefineDeclRuleElements pDefineDeclRule;
	private final FunctionDeclElements pFunctionDecl;
	private final ProcedureDeclElements pProcedureDecl;
	private final ProcReturnArgRuleElements pProcReturnArgRule;
	private final RequireExprsRuleElements pRequireExprsRule;
	private final EnsureExprsRuleElements pEnsureExprsRule;
	private final ModifiesExprsRuleElements pModifiesExprsRule;
	private final InstanceDeclRuleElements pInstanceDeclRule;
	private final ArgMapListRuleElements pArgMapListRule;
	private final ArgMapRuleElements pArgMapRule;
	private final AxiomDeclRuleElements pAxiomDeclRule;
	private final SpecDeclRuleElements pSpecDeclRule;
	private final InitDeclRuleElements pInitDeclRule;
	private final NextDeclRuleElements pNextDeclRule;
	private final StatementRuleElements pStatementRule;
	private final CallStatementElements pCallStatement;
	private final AssignmentRuleElements pAssignmentRule;
	private final BlkStmtRuleElements pBlkStmtRule;
	private final LhsElements pLhs;
	private final LhsVarRefElements pLhsVarRef;
	private final IfStmtRuleElements pIfStmtRule;
	private final CaseStmtRuleElements pCaseStmtRule;
	private final DefaultCaseBlockRuleElements pDefaultCaseBlockRule;
	private final CaseBlockRuleElements pCaseBlockRule;
	private final ForLoopRuleElements pForLoopRule;
	private final WhileLoopRuleElements pWhileLoopRule;
	private final InvariantClauseRuleElements pInvariantClauseRule;
	private final ExprRuleElements pExprRule;
	private final E1RuleElements pE1Rule;
	private final E2RuleElements pE2Rule;
	private final E3RuleElements pE3Rule;
	private final E4RuleElements pE4Rule;
	private final E5RuleElements pE5Rule;
	private final TerminalRule tREL_OP_RULE;
	private final E6RuleElements pE6Rule;
	private final E7RuleElements pE7Rule;
	private final E8RuleElements pE8Rule;
	private final E9RuleElements pE9Rule;
	private final E10RuleElements pE10Rule;
	private final E11RuleElements pE11Rule;
	private final E12RuleElements pE12Rule;
	private final RHSVarRefElements pRHSVarRef;
	private final EnumRefElements pEnumRef;
	private final E13RuleElements pE13Rule;
	private final TupleExprElements pTupleExpr;
	private final IfPrimaryExprElements pIfPrimaryExpr;
	private final ParenthesisExprElements pParenthesisExpr;
	private final ConstRuleElements pConstRule;
	private final TypeRuleElements pTypeRule;
	private final PrimitiveTypeRuleElements pPrimitiveTypeRule;
	private final TerminalRule tBV;
	private final EnumTypeRuleElements pEnumTypeRule;
	private final EnumValueElements pEnumValue;
	private final TupleTypeRuleElements pTupleTypeRule;
	private final RecordTypeRuleElements pRecordTypeRule;
	private final ArrayTypeRuleElements pArrayTypeRule;
	private final SynonymTypeRuleElements pSynonymTypeRule;
	private final ControlBlockRuleElements pControlBlockRule;
	private final CmdRuleElements pCmdRule;
	private final CmdNameRuleElements pCmdNameRule;
	private final IdListRuleElements pIdListRule;
	private final IdTypeListRuleElements pIdTypeListRule;
	private final ExprListRuleElements pExprListRule;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UclidGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModelRule = new ModelRuleElements();
		this.pFQN = new FQNElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.STRING");
		this.pModuleRule = new ModuleRuleElements();
		this.pDeclRule = new DeclRuleElements();
		this.pTypeDeclRule = new TypeDeclRuleElements();
		this.pInputsDeclRule = new InputsDeclRuleElements();
		this.pOutputsDeclRule = new OutputsDeclRuleElements();
		this.pVarsDeclRule = new VarsDeclRuleElements();
		this.pVarDecl = new VarDeclElements();
		this.pConstsDeclRule = new ConstsDeclRuleElements();
		this.pConstDecl = new ConstDeclElements();
		this.pSharedVarsDeclRule = new SharedVarsDeclRuleElements();
		this.pDefineDeclRule = new DefineDeclRuleElements();
		this.pFunctionDecl = new FunctionDeclElements();
		this.pProcedureDecl = new ProcedureDeclElements();
		this.pProcReturnArgRule = new ProcReturnArgRuleElements();
		this.pRequireExprsRule = new RequireExprsRuleElements();
		this.pEnsureExprsRule = new EnsureExprsRuleElements();
		this.pModifiesExprsRule = new ModifiesExprsRuleElements();
		this.pInstanceDeclRule = new InstanceDeclRuleElements();
		this.pArgMapListRule = new ArgMapListRuleElements();
		this.pArgMapRule = new ArgMapRuleElements();
		this.pAxiomDeclRule = new AxiomDeclRuleElements();
		this.pSpecDeclRule = new SpecDeclRuleElements();
		this.pInitDeclRule = new InitDeclRuleElements();
		this.pNextDeclRule = new NextDeclRuleElements();
		this.pStatementRule = new StatementRuleElements();
		this.pCallStatement = new CallStatementElements();
		this.pAssignmentRule = new AssignmentRuleElements();
		this.pBlkStmtRule = new BlkStmtRuleElements();
		this.pLhs = new LhsElements();
		this.pLhsVarRef = new LhsVarRefElements();
		this.pIfStmtRule = new IfStmtRuleElements();
		this.pCaseStmtRule = new CaseStmtRuleElements();
		this.pDefaultCaseBlockRule = new DefaultCaseBlockRuleElements();
		this.pCaseBlockRule = new CaseBlockRuleElements();
		this.pForLoopRule = new ForLoopRuleElements();
		this.pWhileLoopRule = new WhileLoopRuleElements();
		this.pInvariantClauseRule = new InvariantClauseRuleElements();
		this.pExprRule = new ExprRuleElements();
		this.pE1Rule = new E1RuleElements();
		this.pE2Rule = new E2RuleElements();
		this.pE3Rule = new E3RuleElements();
		this.pE4Rule = new E4RuleElements();
		this.pE5Rule = new E5RuleElements();
		this.tREL_OP_RULE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.REL_OP_RULE");
		this.pE6Rule = new E6RuleElements();
		this.pE7Rule = new E7RuleElements();
		this.pE8Rule = new E8RuleElements();
		this.pE9Rule = new E9RuleElements();
		this.pE10Rule = new E10RuleElements();
		this.pE11Rule = new E11RuleElements();
		this.pE12Rule = new E12RuleElements();
		this.pRHSVarRef = new RHSVarRefElements();
		this.pEnumRef = new EnumRefElements();
		this.pE13Rule = new E13RuleElements();
		this.pTupleExpr = new TupleExprElements();
		this.pIfPrimaryExpr = new IfPrimaryExprElements();
		this.pParenthesisExpr = new ParenthesisExprElements();
		this.pConstRule = new ConstRuleElements();
		this.pTypeRule = new TypeRuleElements();
		this.pPrimitiveTypeRule = new PrimitiveTypeRuleElements();
		this.tBV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uclid.xtext.Uclid.BV");
		this.pEnumTypeRule = new EnumTypeRuleElements();
		this.pEnumValue = new EnumValueElements();
		this.pTupleTypeRule = new TupleTypeRuleElements();
		this.pRecordTypeRule = new RecordTypeRuleElements();
		this.pArrayTypeRule = new ArrayTypeRuleElements();
		this.pSynonymTypeRule = new SynonymTypeRuleElements();
		this.pControlBlockRule = new ControlBlockRuleElements();
		this.pCmdRule = new CmdRuleElements();
		this.pCmdNameRule = new CmdNameRuleElements();
		this.pIdListRule = new IdListRuleElements();
		this.pIdTypeListRule = new IdTypeListRuleElements();
		this.pExprListRule = new ExprListRuleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uclid.xtext.Uclid".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ModelRule:
	//	{TopLevel} rules+=ModuleRule*;
	public ModelRuleElements getModelRuleAccess() {
		return pModelRule;
	}
	
	public ParserRule getModelRuleRule() {
		return getModelRuleAccess().getRule();
	}
	
	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//ModuleRule:
	//	{Module} 'module' name=ID '{' d+=DeclRule* e=ControlBlockRule? '}';
	public ModuleRuleElements getModuleRuleAccess() {
		return pModuleRule;
	}
	
	public ParserRule getModuleRuleRule() {
		return getModuleRuleAccess().getRule();
	}
	
	//DeclRule:
	//	TypeDeclRule
	//	| InputsDeclRule
	//	| OutputsDeclRule
	//	| VarsDeclRule
	//	| SharedVarsDeclRule
	//	| DefineDeclRule
	//	| ConstsDeclRule
	//	| FunctionDecl
	//	| ProcedureDecl
	//	| InstanceDeclRule
	//	| InitDeclRule
	//	| NextDeclRule
	//	| AxiomDeclRule
	//	| SpecDeclRule;
	public DeclRuleElements getDeclRuleAccess() {
		return pDeclRule;
	}
	
	public ParserRule getDeclRuleRule() {
		return getDeclRuleAccess().getRule();
	}
	
	//TypeDeclRule TypeDecl:
	//	'type' (name=ID | '*') '=' t=TypeRule ';'
	//	| 'type' name=ID ';';
	public TypeDeclRuleElements getTypeDeclRuleAccess() {
		return pTypeDeclRule;
	}
	
	public ParserRule getTypeDeclRuleRule() {
		return getTypeDeclRuleAccess().getRule();
	}
	
	//InputsDeclRule:
	//	'input' IdListRule ':' t=TypeRule ';';
	public InputsDeclRuleElements getInputsDeclRuleAccess() {
		return pInputsDeclRule;
	}
	
	public ParserRule getInputsDeclRuleRule() {
		return getInputsDeclRuleAccess().getRule();
	}
	
	//OutputsDeclRule:
	//	'output' IdListRule ':' t=TypeRule ';';
	public OutputsDeclRuleElements getOutputsDeclRuleAccess() {
		return pOutputsDeclRule;
	}
	
	public ParserRule getOutputsDeclRuleRule() {
		return getOutputsDeclRuleAccess().getRule();
	}
	
	//VarsDeclRule:
	//	'var' (vars+=VarDecl (',' vars+=VarDecl)*) ':' t=TypeRule ';';
	public VarsDeclRuleElements getVarsDeclRuleAccess() {
		return pVarsDeclRule;
	}
	
	public ParserRule getVarsDeclRuleRule() {
		return getVarsDeclRuleAccess().getRule();
	}
	
	//VarDecl:
	//	name=ID;
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//ConstsDeclRule:
	//	'const' constants+=ConstDecl (',' constants+=ConstDecl)* ':' t=TypeRule ('=' INT)? ';';
	public ConstsDeclRuleElements getConstsDeclRuleAccess() {
		return pConstsDeclRule;
	}
	
	public ParserRule getConstsDeclRuleRule() {
		return getConstsDeclRuleAccess().getRule();
	}
	
	//ConstDecl VarDecl:
	//	{ConstDecl} name=ID;
	public ConstDeclElements getConstDeclAccess() {
		return pConstDecl;
	}
	
	public ParserRule getConstDeclRule() {
		return getConstDeclAccess().getRule();
	}
	
	//SharedVarsDeclRule:
	//	'sharedvar' IdListRule ':' t=TypeRule ';';
	public SharedVarsDeclRuleElements getSharedVarsDeclRuleAccess() {
		return pSharedVarsDeclRule;
	}
	
	public ParserRule getSharedVarsDeclRuleRule() {
		return getSharedVarsDeclRuleAccess().getRule();
	}
	
	//DefineDeclRule:
	//	'define' name=ID '(' l=IdTypeListRule? ')' ':' t=TypeRule '=' e=ExprRule ';';
	public DefineDeclRuleElements getDefineDeclRuleAccess() {
		return pDefineDeclRule;
	}
	
	public ParserRule getDefineDeclRuleRule() {
		return getDefineDeclRuleAccess().getRule();
	}
	
	//FunctionDecl VarDecl:
	//	{FunctionDecl} 'function' name=ID '(' l=IdTypeListRule? ')' ':' t=TypeRule ';';
	public FunctionDeclElements getFunctionDeclAccess() {
		return pFunctionDecl;
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}
	
	//ProcedureDecl VarDecl:
	//	{ProcedureDecl} 'procedure' name=ID '(' l=IdTypeListRule? ')'
	//	ret=ProcReturnArgRule?
	//	req+=RequireExprsRule*
	//	ensure+=EnsureExprsRule*
	//	modifies+=ModifiesExprsRule*
	//	body=BlkStmtRule;
	public ProcedureDeclElements getProcedureDeclAccess() {
		return pProcedureDecl;
	}
	
	public ParserRule getProcedureDeclRule() {
		return getProcedureDeclAccess().getRule();
	}
	
	//ProcReturnArgRule:
	//	'returns' '(' l=IdTypeListRule? ')';
	public ProcReturnArgRuleElements getProcReturnArgRuleAccess() {
		return pProcReturnArgRule;
	}
	
	public ParserRule getProcReturnArgRuleRule() {
		return getProcReturnArgRuleAccess().getRule();
	}
	
	//RequireExprsRule:
	//	'requires' e=ExprRule ';';
	public RequireExprsRuleElements getRequireExprsRuleAccess() {
		return pRequireExprsRule;
	}
	
	public ParserRule getRequireExprsRuleRule() {
		return getRequireExprsRuleAccess().getRule();
	}
	
	//EnsureExprsRule:
	//	'ensures' e=ExprRule ';';
	public EnsureExprsRuleElements getEnsureExprsRuleAccess() {
		return pEnsureExprsRule;
	}
	
	public ParserRule getEnsureExprsRuleRule() {
		return getEnsureExprsRuleAccess().getRule();
	}
	
	//ModifiesExprsRule:
	//	'modifies' l=IdListRule ';';
	public ModifiesExprsRuleElements getModifiesExprsRuleAccess() {
		return pModifiesExprsRule;
	}
	
	public ParserRule getModifiesExprsRuleRule() {
		return getModifiesExprsRuleAccess().getRule();
	}
	
	//InstanceDeclRule InstanceDecl:
	//	'instance' name=ID ':' module=[Module|FQN] args+=ArgMapListRule ';';
	public InstanceDeclRuleElements getInstanceDeclRuleAccess() {
		return pInstanceDeclRule;
	}
	
	public ParserRule getInstanceDeclRuleRule() {
		return getInstanceDeclRuleAccess().getRule();
	}
	
	//ArgMapListRule:
	//	{ArgMapListRule} '(' (arg+=ArgMapRule (',' arg+=ArgMapRule)*)? ')';
	public ArgMapListRuleElements getArgMapListRuleAccess() {
		return pArgMapListRule;
	}
	
	public ParserRule getArgMapListRuleRule() {
		return getArgMapListRuleAccess().getRule();
	}
	
	//ArgMapRule:
	//	{ArgMapRule} name=ID ':' '(' e+=ExprRule? ')';
	public ArgMapRuleElements getArgMapRuleAccess() {
		return pArgMapRule;
	}
	
	public ParserRule getArgMapRuleRule() {
		return getArgMapRuleAccess().getRule();
	}
	
	//AxiomDeclRule:
	//	('axiom' | 'assume') n=ID ':' e=ExprRule ';'
	//	| ('axiom' | 'assume') h=ExprRule ';';
	public AxiomDeclRuleElements getAxiomDeclRuleAccess() {
		return pAxiomDeclRule;
	}
	
	public ParserRule getAxiomDeclRuleRule() {
		return getAxiomDeclRuleAccess().getRule();
	}
	
	//SpecDeclRule:
	//	prop=('property' | 'invariant') name=ID ':' e=ExprRule ';'
	//	| prop=('property' | 'invariant') e=ExprRule ';';
	public SpecDeclRuleElements getSpecDeclRuleAccess() {
		return pSpecDeclRule;
	}
	
	public ParserRule getSpecDeclRuleRule() {
		return getSpecDeclRuleAccess().getRule();
	}
	
	//InitDeclRule:
	//	'init' body=BlkStmtRule;
	public InitDeclRuleElements getInitDeclRuleAccess() {
		return pInitDeclRule;
	}
	
	public ParserRule getInitDeclRuleRule() {
		return getInitDeclRuleAccess().getRule();
	}
	
	//NextDeclRule:
	//	'next' body=BlkStmtRule;
	public NextDeclRuleElements getNextDeclRuleAccess() {
		return pNextDeclRule;
	}
	
	public ParserRule getNextDeclRuleRule() {
		return getNextDeclRuleAccess().getRule();
	}
	
	//StatementRule Statement:
	//	{StatementRule} 'skip' ';' | 'assert' d=ExprRule ';' | 'assume' d=ExprRule ';' | 'havoc' name=ID ';' | AssignmentRule
	//	';' | CallStatement ';' | 'next' '(' name=ID ')' ';' | s=IfStmtRule ';'? | s=CaseStmtRule ';'? | s=ForLoopRule ';'? |
	//	s=WhileLoopRule ';'? | s=BlkStmtRule ';'?;
	public StatementRuleElements getStatementRuleAccess() {
		return pStatementRule;
	}
	
	public ParserRule getStatementRuleRule() {
		return getStatementRuleAccess().getRule();
	}
	
	//CallStatement:
	//	{CallStatement} ('call' '(' (lhs+=Lhs (',' lhs+=Lhs)*)? ')' '=' target=[ProcedureDecl|FQN] '(' exprs+=ExprRule (','
	//	exprs+=ExprRule)* ')' ';') | 'call' target=[ProcedureDecl|FQN] '(' exprs+=ExprRule (',' exprs+=ExprRule)* ')' ';';
	public CallStatementElements getCallStatementAccess() {
		return pCallStatement;
	}
	
	public ParserRule getCallStatementRule() {
		return getCallStatementAccess().getRule();
	}
	
	//AssignmentRule:
	//	{Assignment} (lhs+=Lhs (',' lhs+=Lhs*)?) '=' exprs+=ExprRule (',' exprs+=ExprRule)*;
	public AssignmentRuleElements getAssignmentRuleAccess() {
		return pAssignmentRule;
	}
	
	public ParserRule getAssignmentRuleRule() {
		return getAssignmentRuleAccess().getRule();
	}
	
	//BlkStmtRule CompoundStatement:
	//	'{' {CompoundStatement} dec+=VarsDeclRule* stmt+=StatementRule* '}';
	public BlkStmtRuleElements getBlkStmtRuleAccess() {
		return pBlkStmtRule;
	}
	
	public ParserRule getBlkStmtRuleRule() {
		return getBlkStmtRuleAccess().getRule();
	}
	
	////BlockVarDeclRule :  'var' l=IdListRule ':' t=TypeRule ';';
	//Lhs:
	//	{Lhs} target=LhsVarRef ('[' index+=ExprRule (',' index+=ExprRule)* ']')? "'"?;
	public LhsElements getLhsAccess() {
		return pLhs;
	}
	
	public ParserRule getLhsRule() {
		return getLhsAccess().getRule();
	}
	
	//LhsVarRef VarRef:
	//	var=[VarDecl|FQN];
	public LhsVarRefElements getLhsVarRefAccess() {
		return pLhsVarRef;
	}
	
	public ParserRule getLhsVarRefRule() {
		return getLhsVarRefAccess().getRule();
	}
	
	//IfStmtRule:
	//	'if' '(' c=ExprRule ')' then=BlkStmtRule ('else' else=BlkStmtRule)?;
	public IfStmtRuleElements getIfStmtRuleAccess() {
		return pIfStmtRule;
	}
	
	public ParserRule getIfStmtRuleRule() {
		return getIfStmtRuleAccess().getRule();
	}
	
	//CaseStmtRule:
	//	{CaseStmtRule} 'case' cases+=(CaseBlockRule | DefaultCaseBlockRule)* 'esac';
	public CaseStmtRuleElements getCaseStmtRuleAccess() {
		return pCaseStmtRule;
	}
	
	public ParserRule getCaseStmtRuleRule() {
		return getCaseStmtRuleAccess().getRule();
	}
	
	//DefaultCaseBlockRule:
	//	'default' ':' body=BlkStmtRule;
	public DefaultCaseBlockRuleElements getDefaultCaseBlockRuleAccess() {
		return pDefaultCaseBlockRule;
	}
	
	public ParserRule getDefaultCaseBlockRuleRule() {
		return getDefaultCaseBlockRuleAccess().getRule();
	}
	
	//CaseBlockRule:
	//	e=ExprRule ':' body=BlkStmtRule;
	public CaseBlockRuleElements getCaseBlockRuleAccess() {
		return pCaseBlockRule;
	}
	
	public ParserRule getCaseBlockRuleRule() {
		return getCaseBlockRuleAccess().getRule();
	}
	
	//ForLoopRule:
	//	'for' iterator=VarDecl 'in' 'range' '(' lb=INT ',' ub=INT ')' body=BlkStmtRule;
	public ForLoopRuleElements getForLoopRuleAccess() {
		return pForLoopRule;
	}
	
	public ParserRule getForLoopRuleRule() {
		return getForLoopRuleAccess().getRule();
	}
	
	//WhileLoopRule:
	//	'while' '(' c=ExprRule ')' inv+=InvariantClauseRule* stmt=BlkStmtRule;
	public WhileLoopRuleElements getWhileLoopRuleAccess() {
		return pWhileLoopRule;
	}
	
	public ParserRule getWhileLoopRuleRule() {
		return getWhileLoopRuleAccess().getRule();
	}
	
	//InvariantClauseRule:
	//	('property' | 'invariant') ('[' 'LTL' ']')? e=ExprRule ';';
	public InvariantClauseRuleElements getInvariantClauseRuleAccess() {
		return pInvariantClauseRule;
	}
	
	public ParserRule getInvariantClauseRuleRule() {
		return getInvariantClauseRuleAccess().getRule();
	}
	
	//ExprRule:
	//	E1Rule;
	public ExprRuleElements getExprRuleAccess() {
		return pExprRule;
	}
	
	public ParserRule getExprRuleRule() {
		return getExprRuleAccess().getRule();
	}
	
	//E1Rule:
	//	E2Rule | '(' pred=('forall' | 'exists') '(' l=IdTypeListRule? ')' '::' a=E1Rule ')';
	public E1RuleElements getE1RuleAccess() {
		return pE1Rule;
	}
	
	public ParserRule getE1RuleRule() {
		return getE1RuleAccess().getRule();
	}
	
	//E2Rule:
	//	z+=E3Rule ('<==>' q+=(E2Rule | E3Rule))*;
	public E2RuleElements getE2RuleAccess() {
		return pE2Rule;
	}
	
	public ParserRule getE2RuleRule() {
		return getE2RuleAccess().getRule();
	}
	
	//E3Rule:
	//	e+=E4Rule ('==>' e+=(E3Rule | E4Rule))*;
	public E3RuleElements getE3RuleAccess() {
		return pE3Rule;
	}
	
	public ParserRule getE3RuleRule() {
		return getE3RuleAccess().getRule();
	}
	
	//E4Rule:
	//	e+=E5Rule '&&' e+=E4Rule | e+=E5Rule '||' e+=E4Rule | e+=E5Rule '&' e+=E4Rule | e+=E5Rule '|' e+=E4Rule | e+=E5Rule
	//	'^' e+=E4Rule | e+=E5Rule;
	public E4RuleElements getE4RuleAccess() {
		return pE4Rule;
	}
	
	public ParserRule getE4RuleRule() {
		return getE4RuleAccess().getRule();
	}
	
	//E5Rule:
	//	e+=E6Rule (op=REL_OP_RULE e+=E6Rule)*;
	public E5RuleElements getE5RuleAccess() {
		return pE5Rule;
	}
	
	public ParserRule getE5RuleRule() {
		return getE5RuleAccess().getRule();
	}
	
	//terminal REL_OP_RULE:
	//	'<' | '>' | '==' | '!=' | '<=' | '>=';
	public TerminalRule getREL_OP_RULERule() {
		return tREL_OP_RULE;
	}
	
	//E6Rule:
	//	e+=E7Rule ('++' e+=E6Rule)*;
	public E6RuleElements getE6RuleAccess() {
		return pE6Rule;
	}
	
	public ParserRule getE6RuleRule() {
		return getE6RuleAccess().getRule();
	}
	
	//E7Rule:
	//	e+=E8Rule ('+' e+=E7Rule)*;
	public E7RuleElements getE7RuleAccess() {
		return pE7Rule;
	}
	
	public ParserRule getE7RuleRule() {
		return getE7RuleAccess().getRule();
	}
	
	//E8Rule:
	//	e+=E9Rule ('-' e+=E9Rule)*;
	public E8RuleElements getE8RuleAccess() {
		return pE8Rule;
	}
	
	public ParserRule getE8RuleRule() {
		return getE8RuleAccess().getRule();
	}
	
	//E9Rule:
	//	e+=E10Rule ('*' e+=E10Rule)*;
	public E9RuleElements getE9RuleAccess() {
		return pE9Rule;
	}
	
	public ParserRule getE9RuleRule() {
		return getE9RuleAccess().getRule();
	}
	
	//E10Rule:
	//	op=('-' | '!' | '~') e=E11Rule | e=E11Rule;
	public E10RuleElements getE10RuleAccess() {
		return pE10Rule;
	}
	
	public ParserRule getE10RuleRule() {
		return getE10RuleAccess().getRule();
	}
	
	//E11Rule:
	//	E12Rule '[' l+=ExprListRule ('->' e+=ExprRule | ':' e+=ExprRule)? ']'
	//	//		| E12Rule  '[' e+=ExprRule  (','e+=ExprRule )* '->'e+=ExprRule  ']'
	//	//		| E12Rule  '[' e+=ExprRule  ':'e+=ExprRule  ']'
	//	| E12Rule;
	public E11RuleElements getE11RuleAccess() {
		return pE11Rule;
	}
	
	public ParserRule getE11RuleRule() {
		return getE11RuleAccess().getRule();
	}
	
	//E12Rule:
	//	j=E13Rule ('(' v=ExprListRule? ')'
	//	//		| 
	//	//		(('.' name+=ID )+)
	//)?;
	public E12RuleElements getE12RuleAccess() {
		return pE12Rule;
	}
	
	public ParserRule getE12RuleRule() {
		return getE12RuleAccess().getRule();
	}
	
	//RHSVarRef VarRef:
	//	{VarRef} (var=[VarDecl|FQN] prime='\''?);
	public RHSVarRefElements getRHSVarRefAccess() {
		return pRHSVarRef;
	}
	
	public ParserRule getRHSVarRefRule() {
		return getRHSVarRefAccess().getRule();
	}
	
	//EnumRef:
	//	_enum=[EnumValue|FQN];
	public EnumRefElements getEnumRefAccess() {
		return pEnumRef;
	}
	
	public ParserRule getEnumRefRule() {
		return getEnumRefAccess().getRule();
	}
	
	//E13Rule:
	//	ConstRule
	//	| RHSVarRef
	//	| EnumRef
	//	| TupleExpr
	//	| IfPrimaryExpr
	//	| ParenthesisExpr;
	public E13RuleElements getE13RuleAccess() {
		return pE13Rule;
	}
	
	public ParserRule getE13RuleRule() {
		return getE13RuleAccess().getRule();
	}
	
	//TupleExpr:
	//	'{' e+=ExprRule (',' e+=ExprRule)* '}';
	public TupleExprElements getTupleExprAccess() {
		return pTupleExpr;
	}
	
	public ParserRule getTupleExprRule() {
		return getTupleExprAccess().getRule();
	}
	
	//IfPrimaryExpr:
	//	'if' '(' c=ExprRule ')' 'then' e+=ExprRule 'else' e+=ExprRule;
	public IfPrimaryExprElements getIfPrimaryExprAccess() {
		return pIfPrimaryExpr;
	}
	
	public ParserRule getIfPrimaryExprRule() {
		return getIfPrimaryExprAccess().getRule();
	}
	
	//ParenthesisExpr:
	//	'(' ExprRule ')';
	public ParenthesisExprElements getParenthesisExprAccess() {
		return pParenthesisExpr;
	}
	
	public ParserRule getParenthesisExprRule() {
		return getParenthesisExprAccess().getRule();
	}
	
	//ConstRule:
	//	v='false' | v='true' | d=INT w=BV? | v=STRING;
	public ConstRuleElements getConstRuleAccess() {
		return pConstRule;
	}
	
	public ParserRule getConstRuleRule() {
		return getConstRuleAccess().getRule();
	}
	
	//TypeRule Type:
	//	PrimitiveTypeRule
	//	| EnumTypeRule
	//	| TupleTypeRule
	//	| RecordTypeRule
	//	| ArrayTypeRule
	//	| SynonymTypeRule;
	public TypeRuleElements getTypeRuleAccess() {
		return pTypeRule;
	}
	
	public ParserRule getTypeRuleRule() {
		return getTypeRuleAccess().getRule();
	}
	
	////|ExternalTypeRule;
	//PrimitiveTypeRule Type:
	//	t=('boolean' | 'integer' | BV);
	public PrimitiveTypeRuleElements getPrimitiveTypeRuleAccess() {
		return pPrimitiveTypeRule;
	}
	
	public ParserRule getPrimitiveTypeRuleRule() {
		return getPrimitiveTypeRuleAccess().getRule();
	}
	
	//terminal BV:
	//	'bv' INT;
	public TerminalRule getBVRule() {
		return tBV;
	}
	
	//EnumTypeRule Type:
	//	{EnumTypeRule} 'enum' '{' enums+=EnumValue (',' enums+=EnumValue)* '}';
	public EnumTypeRuleElements getEnumTypeRuleAccess() {
		return pEnumTypeRule;
	}
	
	public ParserRule getEnumTypeRuleRule() {
		return getEnumTypeRuleAccess().getRule();
	}
	
	//EnumValue VarDecl:
	//	{EnumValue} name=ID;
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	//TupleTypeRule Type:
	//	{TupleTypeRule} '{' tuple+=TypeRule (',' tuple+=TypeRule)* '}';
	public TupleTypeRuleElements getTupleTypeRuleAccess() {
		return pTupleTypeRule;
	}
	
	public ParserRule getTupleTypeRuleRule() {
		return getTupleTypeRuleAccess().getRule();
	}
	
	//RecordTypeRule Type:
	//	{RecordTypeRule} 'record' '{' fields+=IdTypeListRule '}';
	public RecordTypeRuleElements getRecordTypeRuleAccess() {
		return pRecordTypeRule;
	}
	
	public ParserRule getRecordTypeRuleRule() {
		return getRecordTypeRuleAccess().getRule();
	}
	
	//ArrayTypeRule Type:
	//	{ArrayTypeRule} '[' b+=TypeRule (',' b+=TypeRule)* ']' base+=TypeRule;
	public ArrayTypeRuleElements getArrayTypeRuleAccess() {
		return pArrayTypeRule;
	}
	
	public ParserRule getArrayTypeRuleRule() {
		return getArrayTypeRuleAccess().getRule();
	}
	
	//SynonymTypeRule Type:
	//	{SynonymTypeRule} decl=[TypeDecl];
	public SynonymTypeRuleElements getSynonymTypeRuleAccess() {
		return pSynonymTypeRule;
	}
	
	public ParserRule getSynonymTypeRuleRule() {
		return getSynonymTypeRuleAccess().getRule();
	}
	
	//ControlBlockRule:
	//	{ControlBlockRule} 'control' '{' cmd+=CmdRule* '}';
	public ControlBlockRuleElements getControlBlockRuleAccess() {
		return pControlBlockRule;
	}
	
	public ParserRule getControlBlockRuleRule() {
		return getControlBlockRuleAccess().getRule();
	}
	
	//CmdRule:
	//	(lhs=VarDecl '=')? (ID '.')? c=CmdNameRule ('[' lid=IdListRule ']')? ('(' lex=ExprListRule? ')')? ';';
	public CmdRuleElements getCmdRuleAccess() {
		return pCmdRule;
	}
	
	public ParserRule getCmdRuleRule() {
		return getCmdRuleAccess().getRule();
	}
	
	//CmdNameRule:
	//	'bmc'
	//	| 'check'
	//	| 'clear_context'
	//	| 'induction'
	//	| 'print'
	//	| 'print_cex'
	//	| 'print_module'
	//	| 'print_results'
	//	| 'print_smt2'
	//	| 'synthesize_invariant'
	//	| 'unroll'
	//	| 'verify';
	public CmdNameRuleElements getCmdNameRuleAccess() {
		return pCmdNameRule;
	}
	
	public ParserRule getCmdNameRuleRule() {
		return getCmdNameRuleAccess().getRule();
	}
	
	//IdListRule:
	//	name+=ID | name+=ID ',' l=IdListRule;
	public IdListRuleElements getIdListRuleAccess() {
		return pIdListRule;
	}
	
	public ParserRule getIdListRuleRule() {
		return getIdListRuleAccess().getRule();
	}
	
	//IdTypeListRule:
	//	k+=ID (',' z+=ID)* ':' t=TypeRule (',' l=IdTypeListRule)?;
	public IdTypeListRuleElements getIdTypeListRuleAccess() {
		return pIdTypeListRule;
	}
	
	public ParserRule getIdTypeListRuleRule() {
		return getIdTypeListRuleAccess().getRule();
	}
	
	//ExprListRule:
	//	{ExprListRule} exprs+=ExprRule (',' exprs+=ExprRule)*;
	public ExprListRuleElements getExprListRuleAccess() {
		return pExprListRule;
	}
	
	public ParserRule getExprListRuleRule() {
		return getExprListRuleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.24.0
 */
package uclid.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import uclid.xtext.services.UclidGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractUclidSyntacticSequencer extends AbstractSyntacticSequencer {

	protected UclidGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AssignmentRule_CommaKeyword_1_1_0_q;
	protected AbstractElementAlias match_AxiomDeclRule_AssumeKeyword_0_1_or_AxiomKeyword_0_0;
	protected AbstractElementAlias match_CallStatement_LeftParenthesisKeyword_1_3_0_q;
	protected AbstractElementAlias match_CallStatement___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2_EqualsSignKeyword_1_1_3__q;
	protected AbstractElementAlias match_CmdRule___IDTerminalRuleCall_1_0_FullStopKeyword_1_1__q;
	protected AbstractElementAlias match_CmdRule___LeftParenthesisKeyword_4_0_RightParenthesisKeyword_4_2__q;
	protected AbstractElementAlias match_ConstsDeclRule___EqualsSignKeyword_5_0_INTTerminalRuleCall_5_1__q;
	protected AbstractElementAlias match_E12Rule___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q;
	protected AbstractElementAlias match_E13Rule_RHSVarRef_FQNParserRuleCall_or_FunctionReferenceParserRuleCall_2;
	protected AbstractElementAlias match_FunctionDecl_SynthesisKeyword_1_q;
	protected AbstractElementAlias match_InvariantRule___LeftSquareBracketKeyword_1_0___CTLKeyword_1_1_1_or_LTLKeyword_1_1_0___RightSquareBracketKeyword_1_2__q;
	protected AbstractElementAlias match_PropertyRule___LeftSquareBracketKeyword_1_0___CTLKeyword_1_1_1_or_LTLKeyword_1_1_0___RightSquareBracketKeyword_1_2__q;
	protected AbstractElementAlias match_StatementRule_SemicolonKeyword_10_1_q;
	protected AbstractElementAlias match_StatementRule_SemicolonKeyword_11_1_q;
	protected AbstractElementAlias match_StatementRule_SemicolonKeyword_7_1_q;
	protected AbstractElementAlias match_StatementRule_SemicolonKeyword_8_1_q;
	protected AbstractElementAlias match_StatementRule_SemicolonKeyword_9_1_q;
	protected AbstractElementAlias match_VarReference_ApostropheKeyword_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (UclidGrammarAccess) access;
		match_AssignmentRule_CommaKeyword_1_1_0_q = new TokenAlias(false, true, grammarAccess.getAssignmentRuleAccess().getCommaKeyword_1_1_0());
		match_AxiomDeclRule_AssumeKeyword_0_1_or_AxiomKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAxiomDeclRuleAccess().getAssumeKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getAxiomDeclRuleAccess().getAxiomKeyword_0_0()));
		match_CallStatement_LeftParenthesisKeyword_1_3_0_q = new TokenAlias(false, true, grammarAccess.getCallStatementAccess().getLeftParenthesisKeyword_1_3_0());
		match_CallStatement___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2_EqualsSignKeyword_1_1_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCallStatementAccess().getLeftParenthesisKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getCallStatementAccess().getRightParenthesisKeyword_1_1_2()), new TokenAlias(false, false, grammarAccess.getCallStatementAccess().getEqualsSignKeyword_1_1_3()));
		match_CmdRule___IDTerminalRuleCall_1_0_FullStopKeyword_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCmdRuleAccess().getIDTerminalRuleCall_1_0()), new TokenAlias(false, false, grammarAccess.getCmdRuleAccess().getFullStopKeyword_1_1()));
		match_CmdRule___LeftParenthesisKeyword_4_0_RightParenthesisKeyword_4_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCmdRuleAccess().getLeftParenthesisKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getCmdRuleAccess().getRightParenthesisKeyword_4_2()));
		match_ConstsDeclRule___EqualsSignKeyword_5_0_INTTerminalRuleCall_5_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConstsDeclRuleAccess().getEqualsSignKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getConstsDeclRuleAccess().getINTTerminalRuleCall_5_1()));
		match_E12Rule___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getE12RuleAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getE12RuleAccess().getRightParenthesisKeyword_1_2()));
		match_E13Rule_RHSVarRef_FQNParserRuleCall_or_FunctionReferenceParserRuleCall_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getE13RuleAccess().getFunctionReferenceParserRuleCall_2()), new TokenAlias(false, false, grammarAccess.getRHSVarRefAccess().getFQNParserRuleCall()));
		match_FunctionDecl_SynthesisKeyword_1_q = new TokenAlias(false, true, grammarAccess.getFunctionDeclAccess().getSynthesisKeyword_1());
		match_InvariantRule___LeftSquareBracketKeyword_1_0___CTLKeyword_1_1_1_or_LTLKeyword_1_1_0___RightSquareBracketKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getInvariantRuleAccess().getLeftSquareBracketKeyword_1_0()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getInvariantRuleAccess().getCTLKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getInvariantRuleAccess().getLTLKeyword_1_1_0())), new TokenAlias(false, false, grammarAccess.getInvariantRuleAccess().getRightSquareBracketKeyword_1_2()));
		match_PropertyRule___LeftSquareBracketKeyword_1_0___CTLKeyword_1_1_1_or_LTLKeyword_1_1_0___RightSquareBracketKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPropertyRuleAccess().getLeftSquareBracketKeyword_1_0()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPropertyRuleAccess().getCTLKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getPropertyRuleAccess().getLTLKeyword_1_1_0())), new TokenAlias(false, false, grammarAccess.getPropertyRuleAccess().getRightSquareBracketKeyword_1_2()));
		match_StatementRule_SemicolonKeyword_10_1_q = new TokenAlias(false, true, grammarAccess.getStatementRuleAccess().getSemicolonKeyword_10_1());
		match_StatementRule_SemicolonKeyword_11_1_q = new TokenAlias(false, true, grammarAccess.getStatementRuleAccess().getSemicolonKeyword_11_1());
		match_StatementRule_SemicolonKeyword_7_1_q = new TokenAlias(false, true, grammarAccess.getStatementRuleAccess().getSemicolonKeyword_7_1());
		match_StatementRule_SemicolonKeyword_8_1_q = new TokenAlias(false, true, grammarAccess.getStatementRuleAccess().getSemicolonKeyword_8_1());
		match_StatementRule_SemicolonKeyword_9_1_q = new TokenAlias(false, true, grammarAccess.getStatementRuleAccess().getSemicolonKeyword_9_1());
		match_VarReference_ApostropheKeyword_2_q = new TokenAlias(false, true, grammarAccess.getVarReferenceAccess().getApostropheKeyword_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getFQNRule())
			return getFQNToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFunctionReferenceRule())
			return getFunctionReferenceToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * FQN: ID ("." ID)*;
	 */
	protected String getFQNToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * FunctionReference : 
	 * 	FQN
	 * 	;
	 */
	protected String getFunctionReferenceToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AssignmentRule_CommaKeyword_1_1_0_q.equals(syntax))
				emit_AssignmentRule_CommaKeyword_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AxiomDeclRule_AssumeKeyword_0_1_or_AxiomKeyword_0_0.equals(syntax))
				emit_AxiomDeclRule_AssumeKeyword_0_1_or_AxiomKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CallStatement_LeftParenthesisKeyword_1_3_0_q.equals(syntax))
				emit_CallStatement_LeftParenthesisKeyword_1_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CallStatement___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2_EqualsSignKeyword_1_1_3__q.equals(syntax))
				emit_CallStatement___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2_EqualsSignKeyword_1_1_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CmdRule___IDTerminalRuleCall_1_0_FullStopKeyword_1_1__q.equals(syntax))
				emit_CmdRule___IDTerminalRuleCall_1_0_FullStopKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CmdRule___LeftParenthesisKeyword_4_0_RightParenthesisKeyword_4_2__q.equals(syntax))
				emit_CmdRule___LeftParenthesisKeyword_4_0_RightParenthesisKeyword_4_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConstsDeclRule___EqualsSignKeyword_5_0_INTTerminalRuleCall_5_1__q.equals(syntax))
				emit_ConstsDeclRule___EqualsSignKeyword_5_0_INTTerminalRuleCall_5_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_E12Rule___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q.equals(syntax))
				emit_E12Rule___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_E13Rule_RHSVarRef_FQNParserRuleCall_or_FunctionReferenceParserRuleCall_2.equals(syntax))
				emit_E13Rule_RHSVarRef_FQNParserRuleCall_or_FunctionReferenceParserRuleCall_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionDecl_SynthesisKeyword_1_q.equals(syntax))
				emit_FunctionDecl_SynthesisKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InvariantRule___LeftSquareBracketKeyword_1_0___CTLKeyword_1_1_1_or_LTLKeyword_1_1_0___RightSquareBracketKeyword_1_2__q.equals(syntax))
				emit_InvariantRule___LeftSquareBracketKeyword_1_0___CTLKeyword_1_1_1_or_LTLKeyword_1_1_0___RightSquareBracketKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PropertyRule___LeftSquareBracketKeyword_1_0___CTLKeyword_1_1_1_or_LTLKeyword_1_1_0___RightSquareBracketKeyword_1_2__q.equals(syntax))
				emit_PropertyRule___LeftSquareBracketKeyword_1_0___CTLKeyword_1_1_1_or_LTLKeyword_1_1_0___RightSquareBracketKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementRule_SemicolonKeyword_10_1_q.equals(syntax))
				emit_StatementRule_SemicolonKeyword_10_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementRule_SemicolonKeyword_11_1_q.equals(syntax))
				emit_StatementRule_SemicolonKeyword_11_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementRule_SemicolonKeyword_7_1_q.equals(syntax))
				emit_StatementRule_SemicolonKeyword_7_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementRule_SemicolonKeyword_8_1_q.equals(syntax))
				emit_StatementRule_SemicolonKeyword_8_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementRule_SemicolonKeyword_9_1_q.equals(syntax))
				emit_StatementRule_SemicolonKeyword_9_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VarReference_ApostropheKeyword_2_q.equals(syntax))
				emit_VarReference_ApostropheKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     lhs+=VarReference (ambiguity) '=' exprs+=ExprRule
	 */
	protected void emit_AssignmentRule_CommaKeyword_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'axiom' | 'assume'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) e=ExprRule
	 *     (rule start) (ambiguity) n=ID
	 */
	protected void emit_AxiomDeclRule_AssumeKeyword_0_1_or_AxiomKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('?
	 *
	 * This ambiguous syntax occurs at:
	 *     target=FunctionReference (ambiguity) ')' ';' (rule end)
	 *     target=FunctionReference (ambiguity) ')' (rule end)
	 */
	protected void emit_CallStatement_LeftParenthesisKeyword_1_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')' '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'call' (ambiguity) target=FunctionReference
	 */
	protected void emit_CallStatement___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2_EqualsSignKeyword_1_1_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (ID '.')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) c=CmdNameRule
	 *     lhs=VarDecl '=' (ambiguity) c=CmdNameRule
	 */
	protected void emit_CmdRule___IDTerminalRuleCall_1_0_FullStopKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=CmdNameRule (ambiguity) ';' (rule end)
	 *     lid=IdListRule ']' (ambiguity) ';' (rule end)
	 */
	protected void emit_CmdRule___LeftParenthesisKeyword_4_0_RightParenthesisKeyword_4_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('=' INT)?
	 *
	 * This ambiguous syntax occurs at:
	 *     t=TypeRule (ambiguity) ';' (rule end)
	 */
	protected void emit_ConstsDeclRule___EqualsSignKeyword_5_0_INTTerminalRuleCall_5_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     j=E13Rule (ambiguity) '[' l+=ExprListRule
	 *     j=E13Rule (ambiguity) (rule end)
	 */
	protected void emit_E12Rule___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     FQN | FunctionReference
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_E13Rule_RHSVarRef_FQNParserRuleCall_or_FunctionReferenceParserRuleCall_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'synthesis'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'function' name=ID
	 */
	protected void emit_FunctionDecl_SynthesisKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ('LTL' | 'CTL') ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'invariant' (ambiguity) e=ExprRule
	 *     (rule start) 'invariant' (ambiguity) name=ID
	 */
	protected void emit_InvariantRule___LeftSquareBracketKeyword_1_0___CTLKeyword_1_1_1_or_LTLKeyword_1_1_0___RightSquareBracketKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ('LTL' | 'CTL') ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'property' (ambiguity) e=ExprRule
	 *     (rule start) 'property' (ambiguity) name=ID
	 */
	protected void emit_PropertyRule___LeftSquareBracketKeyword_1_0___CTLKeyword_1_1_1_or_LTLKeyword_1_1_0___RightSquareBracketKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=WhileLoopRule (ambiguity) (rule end)
	 */
	protected void emit_StatementRule_SemicolonKeyword_10_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=BlkStmtRule (ambiguity) (rule end)
	 */
	protected void emit_StatementRule_SemicolonKeyword_11_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=IfStmtRule (ambiguity) (rule end)
	 */
	protected void emit_StatementRule_SemicolonKeyword_7_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=CaseStmtRule (ambiguity) (rule end)
	 */
	protected void emit_StatementRule_SemicolonKeyword_8_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=ForLoopRule (ambiguity) (rule end)
	 */
	protected void emit_StatementRule_SemicolonKeyword_9_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '''?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) FQN (ambiguity) (rule start)
	 *     index+=ExprRule ']' (ambiguity) (rule end)
	 */
	protected void emit_VarReference_ApostropheKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
